<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ntcs&#39; blog</title>
  
  
  <link href="http://naughtychas.github.io/atom.xml" rel="self"/>
  
  <link href="http://naughtychas.github.io/"/>
  <updated>2025-02-28T08:50:39.112Z</updated>
  <id>http://naughtychas.github.io/</id>
  
  <author>
    <name>ntcs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ENGG1340笔记</title>
    <link href="http://naughtychas.github.io/2025/01/25/ENGG1340%E7%AC%94%E8%AE%B0/"/>
    <id>http://naughtychas.github.io/2025/01/25/ENGG1340%E7%AC%94%E8%AE%B0/</id>
    <published>2025-01-25T06:18:50.000Z</published>
    <updated>2025-02-28T08:50:39.112Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>自学ENGG1340写的笔记<br><span id="more"></span></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>惊讶的发现这学期ENGG1340是自学课，没有Lecture。讲道理挺舒服的。</p><p>ENGG1340期望你拥有Python编程知识作为基础，然后逐渐引入更深层的新内容，包括Linux / Bash Shell，版本控制（Git），C/C++语言等。</p><p>叠甲先：笔记可能出错所以轻喷。内容是根据课上发的笔记转写的，所以本文算是个人梳理吧</p><hr><h1 id="Module-1-Linux-Environment"><a href="#Module-1-Linux-Environment" class="headerlink" title="Module 1: Linux Environment"></a>Module 1: Linux Environment</h1><p>Linux如同Windows一样是操作系统。Linux是开源的，这导致Linux相较于其他操作系统拥有更多长处，例如：可自定义程度较强，安全性也比较高（因为你可以直接读到源代码）。<br>因为Linux是开源的，所以使用Linux也是免费的。在一些相对低价的电子产品上，使用Linux作为操作系统就很划算。</p><p>Linux存在不同的发行版，例如Ubuntu, CentOS, Debian等。</p><p>在ENGG1340中我们将会使用Ubuntu，虽然现阶段不同发行版不会对课程大纲产生太多影响。</p><hr><h2 id="Linux-Shell"><a href="#Linux-Shell" class="headerlink" title="Linux Shell"></a>Linux Shell</h2><p>Shell 是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</p><p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p><p>Linux中有不同种类的shell，比如Korn Shell, Bourne Shell, C Shell，以及Bash Shell。<br>不同的Shell之间命令可能有些许区别，例如Korn Shell使用<code>print</code>命令输出一个字符串，而Bash Shell使用<code>echo</code>命令。</p><p>在ENGG1340里我们主要使用Bash Shell。</p><hr><h3 id="Shell-Commands"><a href="#Shell-Commands" class="headerlink" title="Shell Commands"></a>Shell Commands</h3><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><p>向命令行中输入<code>date</code>，Shell会返回当前系统的时间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">date</span></span></span><br><span class="line">Sat Jan 25 14:51:19 HKT 2025</span><br></pre></td></tr></table></figure><hr><h4 id="文件与路径操作"><a href="#文件与路径操作" class="headerlink" title="文件与路径操作"></a>文件与路径操作</h4><p><code>ls</code>命令列举当前目录下的所有文件和路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span> </span><br><span class="line">Documents/  logon.bat*  public_html/  t.txt  Downloads/ </span><br><span class="line">Pictures/  Templates/    </span><br><span class="line">Videos/    </span><br><span class="line">Music/      </span><br><span class="line">Desktop/  engg1340/ </span><br><span class="line">Public/    </span><br><span class="line">test.txt</span><br></pre></td></tr></table></figure><blockquote><p><strong>命令变体</strong>：</p><ul><li><code>ls -l</code>  以长字符方式输出，包含额外信息如文件大小，文件拥有者，上次编辑日期等</li><li><code>ls -a</code>  输出路径下所有内容，包含隐藏的文件和目录。隐藏的内容会以一点开头<code>.</code>。</li><li><code>ls -la</code>  就是<code>ls -l -a</code></li></ul></blockquote><hr><p><code>cd</code>命令用来重定向当前目录。例如我们想要访问当前目录下的engg1340路径，直接敲<code>cd engg1340</code>就行：</p><blockquote><p>命令变体：<br><code>cd ..</code> 前往当前目录的父级路径<br><code>cd ~</code>  前往当前用户的主目录<br><code>cd ~username</code>  前往指定用户的主目录<br><code>cd .</code> 前往当前目录 （虽说没啥效果就是了）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> engg1340</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span> </span><br><span class="line">lab1/  lab2/  lab3/ </span><br></pre></td></tr></table></figure><hr><p><code>pwd</code>命令将会输出当前的工作目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">pwd</span></span></span><br><span class="line">/home/d003/h978645312</span><br></pre></td></tr></table></figure><hr><h4 id="命令使用说明"><a href="#命令使用说明" class="headerlink" title="命令使用说明"></a>命令使用说明</h4><p>Shell里面有许多命令，能将所有命令记住基本上是不现实的。因此，Shell提供了<code>man</code>命令（Manual的缩写），能够返回命令的详细解释。</p><p>例如我想要查看ls命令的详细解释，就可以使用<code>man ls</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">man <span class="built_in">ls</span></span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">LS(1)                                               User Commands                                               LS(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       ls - list directory contents</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       ls [OPTION]... [FILE]...</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       List  information  about the FILEs (the current directory by default).  Sort entries alphabetically if none of</span><br><span class="line">       -cftuvSUX nor --sort is specified.</span><br><span class="line"></span><br><span class="line">       Mandatory arguments to long options are mandatory for short options too.</span><br><span class="line"></span><br><span class="line">       -a, --all</span><br><span class="line">              do not ignore entries starting with .</span><br><span class="line"></span><br><span class="line">       -A, --almost-all</span><br><span class="line">              do not list implied . and ..</span><br><span class="line"></span><br><span class="line">       --author</span><br><span class="line">              with -l, print the author of each file</span><br><span class="line"></span><br><span class="line">       -b, --escape</span><br><span class="line">              print C-style escapes for nongraphic characters</span><br><span class="line"></span><br><span class="line">       --block-size=SIZE</span><br><span class="line">              with -l, scale sizes by SIZE when printing them; e.g., '--block-size=M'; see SIZE format below</span><br><span class="line"></span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line"></span><br><span class="line">        -l     use a long listing format</span><br><span class="line"></span><br><span class="line"> Manual page ls(1) line 1 (press h for help or q to quit)</span><br></pre></td></tr></table></figure><p>从NAME区域我们可以得知<code>ls</code>的解释为”list directory contents”。<br>从DESCRIPTION区域得知，如果在ls后面加入可选参数<code>-l</code>，代表”use a long listing format”。这会在普通<code>ls</code>的基础上显示更多信息，包括文件大小，文件拥有者，上次编辑日期等等：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l</span></span><br><span class="line">total 26044</span><br><span class="line">drwxr-xr-x 17 1000 1000     4096 Nov  4 01:17 Python-3.11.0</span><br><span class="line">-rw-r--r--  1 root root 26333656 Oct 24  2022 Python-3.11.0.tgz</span><br><span class="line">drwxr-xr-x  4 root root     4096 Nov  1 13:25 napcat</span><br><span class="line">-rw-------  1 root root   317274 Nov  4 01:38 nohup.out</span><br></pre></td></tr></table></figure><hr><h2 id="路径和文件管理"><a href="#路径和文件管理" class="headerlink" title="路径和文件管理"></a>路径和文件管理</h2><p>在Linux中根目录用<code>/</code>表示。根目录包含所有的文件和路径。</p><p>例如在根目录下有一个”home”路径，”home”下有另一个路径”kit”，那么这个”kit”路径的绝对路径就是：<code>/home/kit</code></p><p>有关相对路径和绝对路径的内容一会介绍。</p><hr><h3 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h3><p>绝对路径总是以<code>/</code>打头。举几个简单的例子：</p><ul><li><code>/home/file3</code>是在home路径下的文件file3的绝对路径。</li><li><code>/home/kit/Desktop/file4</code>是file4的绝对路径。</li></ul><p>而相对路径和当前的工作目录有联系，相对路径不会以<code>/</code>打头。</p><p>例如我们使用上面的file3做例子，如果当前的工作目录为<code>/home</code>，则file3的相对路径为<code>file3</code>。注意看刚才这个file3的路径不以<code>/</code>打头，所以能判断出这是一个相对路径。</p><p>file4同理。如果当前工作目录是<code>/home/kit</code>，那么file4的相对路径就是<code>Desktop/file4</code>。</p><hr><p>如果目录A包含另一个目录B，则A称为B的父目录，B称为A的子目录。例如在刚才的例子中，kit是home的子目录，home是kit的父目录。</p><p>一旦shell启动，它当前的工作目录就是主目录。我们总是可以通过命令pwd获得当前的工作目录。</p><hr><h3 id="主目录"><a href="#主目录" class="headerlink" title="主目录"></a>主目录</h3><p>对于任何用户，都有一个属于该用户的主目录。例如，用户 kit 的主目录位于<code>/home/kit</code></p><p><code>~</code>用来表示用户的主目录。你可以使用<code>cd ~</code>命令回到当前用户的主目录，也可以使用<code>cd ~username</code>来前往其他用户的主目录。</p><h3 id="路径管理"><a href="#路径管理" class="headerlink" title="路径管理"></a>路径管理</h3><h4 id="创建路径"><a href="#创建路径" class="headerlink" title="创建路径"></a>创建路径</h4><p><code>mkdir</code>命令可以用来创建路径   <del>新建文件夹</del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> lab</span></span><br></pre></td></tr></table></figure><p>上面的命令会在当前的工作目录下创建一个lab路径。</p><p>如果你想在当前工作目录下创建多个路径，可以直接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> lab1 lab2</span></span><br></pre></td></tr></table></figure><p>如果想在路径名中包括空格，可以在创建路径时将路径名用引号引起来：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> <span class="string">"lab 1"</span></span></span><br></pre></td></tr></table></figure><hr><h4 id="移除路径"><a href="#移除路径" class="headerlink" title="移除路径"></a>移除路径</h4><p><code>rmdir</code>命令可以用来移除空路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rmdir</span> lab</span></span><br></pre></td></tr></table></figure><p>如果想要移除的路径不是空路径，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> lab1</span></span><br><span class="line">file1.txt  file2.txt</span><br></pre></td></tr></table></figure><p>就需要使用<code>rm -rf</code>或者<code>rm -r -f</code>来移除整个路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rm</span> -r -f lab1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> lab1</span></span><br><span class="line">ls: cannot access 'lab1': No such file or directory</span><br></pre></td></tr></table></figure><p>可以看到路径被成功移除了。</p><p><code>-r</code>参数代表系统会按照递归方式向下遍历目标路径下的文件和路径，而<code>-f</code>可以确保删除过程不需要你来进行确认。如果当前路径下文件巨多，不带<code>-f</code>就会很麻烦了。</p><hr><h4 id="重命名路径"><a href="#重命名路径" class="headerlink" title="重命名路径"></a>重命名路径</h4><p><code>mv</code>命令虽然叫move，但是也可以用来重命名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> lab <span class="string">"lab 1"</span></span></span><br></pre></td></tr></table></figure><p>这个命令会把<code>lab</code>路径重命名至<code>lab 1</code>。</p><p>如果<code>mv</code>命令下第一个参数和第二个参数的类型一致，例如参数1和参数2都是文件类型，则该命令会将参数1重命名至参数2。</p><hr><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><p><code>touch</code>命令可以用来创建一个空文件。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> file1.txt</span></span><br></pre></td></tr></table></figure><p>可以创建一个名叫”file1.txt”的空文件。</p><hr><h4 id="展示文件内容"><a href="#展示文件内容" class="headerlink" title="展示文件内容"></a>展示文件内容</h4><p><code>cat</code>，命令可以用来展示文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> file1.txt</span></span><br><span class="line">Hello, this is the content of file1.txt</span><br><span class="line">Bye Bye!</span><br></pre></td></tr></table></figure><hr><h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h4><p><code>mv</code>命令也可以用来移动文件或者路径位置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> hello.txt mydir</span></span><br></pre></td></tr></table></figure><p>好比说这串命令会将hello.txt移动到<code>mydir</code>路径下。</p><p>如果文件拥有同样的前缀，你可以使用星号(<em>)来选中所有符合条件的项。<br>例如：将所有拥有“ <em>*myfile</em></em> ”前缀的文件移动到lab路径下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">myfile1.txt  myfile2.txt lab/</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> myfile* lab</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">lab/</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> lab</span></span><br><span class="line">myfile1.txt  myfile2.txt</span><br></pre></td></tr></table></figure><hr><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><p>除此之外还有其他关于文件操作的命令集合：</p><p><code>cp</code> 命令用于复制文件。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> file1 file2</span></span><br></pre></td></tr></table></figure><p>会将”file1”复制至”file2”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> -r dir1 dir2</span></span><br></pre></td></tr></table></figure><p>会将<code>dir1</code>路径包括路径下的所有内容复制到dir2中。</p><hr><h3 id="使用vi编辑器"><a href="#使用vi编辑器" class="headerlink" title="使用vi编辑器"></a>使用vi编辑器</h3><p>vi编辑器用来创建并编辑文本。就好比Windows上的记事本，或Linux上的gedit，但是他没有图形用户界面，完全在命令行中使用。</p><p>vi编辑器中有两个功能：</p><ol><li>插入模式(Insert mode)：在这个模式中你可以编辑文件内容</li><li>命令模式(Command mode)：命令模式用来执行文件操作，比如保存文件等</li></ol><p>要使用vi编辑器打开一个文件，只需要敲入<code>vi</code>命令即可。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vi file2.txt</span></span><br></pre></td></tr></table></figure><p>将会打开工作目录下的”file2.txt”文件。如果该文件不存在，编辑器会帮你自动创建一个。</p><p>!()[<a href="https://note.youdao.com/yws/api/personal/file/WEB851884414ef36fe09b4feda45b512323?method=download&amp;shareKey=cbca8ca352f134b3e06ba8e53e65b13c">https://note.youdao.com/yws/api/personal/file/WEB851884414ef36fe09b4feda45b512323?method=download&amp;shareKey=cbca8ca352f134b3e06ba8e53e65b13c</a>]</p><p>进入vi编辑器后默认为命令模式。因为我们的路径下没有file2.txt，如你所见编辑器目前显示的是空白文件。</p><p><strong>按”I”键切换至插入模式</strong>。当你在插入模式时，你可以在界面的左下角看到<code>-- INSERT --</code>：</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB95b622f6c06e6eedb9be9e614f57adfd?method=download&amp;shareKey=2036e5e9da9576ca52eb2934bf7a4909" alt=""></p><p>在插入模式中你可以按照我们熟悉的样子编辑文件。如果编辑完成想要保存文件，则需要退回至命令模式。</p><p>在插入模式时，<strong>按”esc”以回到命令模式</strong>。当你回到命令模式后，你将不会再左下角看到<code>-- INSERT --</code>字样。这时输入<code>:wq</code>并按下Enter，你会退出vi编辑器，同时你的文件会被保存。</p><hr><h4 id="命令模式下的命令"><a href="#命令模式下的命令" class="headerlink" title="命令模式下的命令"></a>命令模式下的命令</h4><p>除了“保存并关闭”(<code>:wq</code>)命令外，还有下面这些常见命令：</p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">执行的操作</th></tr></thead><tbody><tr><td style="text-align:center"><code>:wq</code></td><td style="text-align:center">保存并退出</td></tr><tr><td style="text-align:center"><code>:w</code></td><td style="text-align:center">保存（但不退出vi编辑器）</td></tr><tr><td style="text-align:center"><code>:w filename</code></td><td style="text-align:center">保存到名叫”filename”的新文件下</td></tr><tr><td style="text-align:center"><code>:q</code></td><td style="text-align:center">退出</td></tr><tr><td style="text-align:center"><code>:q!</code></td><td style="text-align:center">不保存并退出vi编辑器</td></tr></tbody></table></div><p>想要查阅完整的命令列表的话<a href="https://www.cs.colostate.edu/helpdocs/vi.html">点我</a></p><p>或者你也可以查阅这张Cheatsheet：</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB3d38757cff77704b4b626c7e77a8299a?method=download&amp;shareKey=7d62b9dd7d9765da3fbbc8ff1020e3f9" alt="Cheatsheet"></p><hr><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><p>Linux系统中的每个文件或目录都被分配了3种类型的所有者。</p><ul><li><strong>用户（User）</strong>：用户可以作为文件的拥有者</li><li><strong>用户组（Group）</strong>：用户组中可以包含多个用户。若用户组拥有一个文件的权限，则组中的每个用户都有该文件的权限。</li><li><strong>其他（Other）</strong>：有权访问文件的任何其他用户。它既没有创建文件，也不属于拥有该文件的组。</li></ul><p>每个用户对于上面的三种所有者定义了三种不同的文件权限：</p><ul><li><strong>读取（Read）</strong>：拥有文件读取权限的个体可以打开并读取文件中的内容。拥有路径读取权限的个体可以列举出该路径下的内容。</li><li><strong>写入（Write）</strong>：拥有文件写入权限的个体可以更改文件中的内容。拥有路径读取权限的个体可以在路径中添加，移除或者重命名内容。</li><li><strong>执行（Execute）</strong>：执行权限允许个体来运行程序</li></ul><hr><p>不如举个例子看看：使用之前提到过的<code>ls -l</code>命令来列举出路径下的内容，里面会告诉你文件权限的相关信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l</span></span><br><span class="line"></span><br><span class="line">total 10</span><br><span class="line">-rw------- 1 cklai ra 50 Jul 30 17:07 file1.txt</span><br><span class="line">-rw------- 1 cklai ra 48 Jul 31 15:14 file2.txt</span><br><span class="line">drwx------ 2 cklai ra  2 Jul 30 17:00 lab/</span><br></pre></td></tr></table></figure><hr><h3 id="权限指示"><a href="#权限指示" class="headerlink" title="权限指示"></a>权限指示</h3><p>借用上面的例子，我们来仔细讲讲刚才的输出是啥意思：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total 10</span><br><span class="line">-rw------- 1 cklai ra 50 Jul 30 17:07 file1.txt</span><br></pre></td></tr></table></figure><p><code>total 10</code>代表文件在文件系统中占用了多大空间，单位为千字节（kilobytes）。<br>由左至右分别是：</p><div class="table-container"><table><thead><tr><th style="text-align:center">条目</th><th style="text-align:center">释义</th></tr></thead><tbody><tr><td style="text-align:center"><code>-rw-------</code></td><td style="text-align:center">代表<strong>文件权限</strong>。具体的释义马上就解释（</td></tr><tr><td style="text-align:center"><code>1</code></td><td style="text-align:center">代表<strong>文件拥有的硬链接数量</strong>。</td></tr><tr><td style="text-align:center"><code>cklai</code></td><td style="text-align:center">代表<strong>文件拥有者</strong></td></tr><tr><td style="text-align:center"><code>ra</code></td><td style="text-align:center">文件拥有者存在的用户组</td></tr><tr><td style="text-align:center"><code>50</code></td><td style="text-align:center"><strong>文件大小</strong>，单位为字节（byte）</td></tr><tr><td style="text-align:center"><code>Jul 23 17:07</code></td><td style="text-align:center"><strong>上次修改时间</strong></td></tr><tr><td style="text-align:center"><code>file1.txt</code></td><td style="text-align:center"><strong>文件名</strong></td></tr></tbody></table></div><hr><p>现在我们来讲讲权限指示该怎么解读。<br>权限指示（Permission indicator）是一个十字符长的字符串，通常分为四部分：</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB2e57509e464b685521f221612db841b6?method=download&amp;shareKey=980a26dccb73b17e40f57a8a8bbfb599" alt=""></p><p>这玩意可以分成四部分解读，<strong>Type</strong>, <strong>User permissions</strong>, <strong>Group permission</strong>和<strong>Other permission</strong>。</p><hr><p><strong>Type</strong>:</p><p>代指权限指示的第一个字符。</p><ul><li>如果第一个字符是<strong>短横线 “-“</strong>，则代表它是一个<strong>正常文件</strong>。</li><li>如果第一个字符是<strong>字母d “d”</strong>，则代表这是一个路径。</li></ul><p>还有其他的类型不过这里涵盖不到。可以自己上网查询。</p><hr><p><strong>User permissions</strong></p><p>第2-4个字符表示用户的权限。三个位置会显示”r”, “w”或者”x”。</p><p>比如这里显示了”rw-“，就代表：</p><ul><li>可以读取文件 (read, r)</li><li>可以写入文件 (write, w)</li><li>但是<em>不能</em>执行文件。如果文件可以被执行，第三个位置会显示”x”</li></ul><hr><p><strong>Group permission</strong></p><p>5-7个字符表示了用户组的权限。同样用rwx表示权限。</p><hr><p><strong>Other permission</strong></p><p>最后三位表示了文件对其他所有人的权限。</p><p>如果显示”—-“，则表示其他人都不可以读取(r)，写入(w)，并且也不能执行(x)</p><hr><h3 id="更改权限"><a href="#更改权限" class="headerlink" title="更改权限"></a>更改权限</h3><p>你可以使用<code>chmod</code>命令来更改你拥有的文件或者路径的权限：</p><p><code>chmod</code>命令格式为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> [<span class="built_in">who</span>][operator][permissions] filename</span></span><br></pre></td></tr></table></figure><hr><ul><li><code>who</code></li></ul><p>在参数<code>who</code>内，可以键入四个不同的字母来指定要更改的对象群体：</p><div class="table-container"><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">释义</th></tr></thead><tbody><tr><td style="text-align:center"><strong>u</strong></td><td style="text-align:center">指定<strong>用户</strong>权限</td></tr><tr><td style="text-align:center"><strong>g</strong></td><td style="text-align:center">指定<strong>用户组</strong>权限</td></tr><tr><td style="text-align:center"><strong>o</strong></td><td style="text-align:center">指定<strong>其他</strong>权限</td></tr><tr><td style="text-align:center"><strong>a</strong></td><td style="text-align:center">指定<strong>所有群体</strong>的权限</td></tr></tbody></table></div><hr><ul><li><code>operator</code></li></ul><p>在参数<code>operator</code>内，共有三个运算符，用来代指具体的操作：</p><div class="table-container"><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">释义</th></tr></thead><tbody><tr><td style="text-align:center"><strong>+</strong></td><td style="text-align:center"><strong>增加</strong>权限</td></tr><tr><td style="text-align:center"><strong>-</strong></td><td style="text-align:center"><strong>移除</strong>权限</td></tr><tr><td style="text-align:center"><strong>=</strong></td><td style="text-align:center"><strong>设定</strong>权限</td></tr></tbody></table></div><hr><ul><li><code>permission</code></li></ul><p>在参数<code>permission</code>内，就是我们熟悉的r, w和x了。这些参数用指定要用来增加或者减少的权限：</p><div class="table-container"><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">释义</th></tr></thead><tbody><tr><td style="text-align:center"><strong>r</strong></td><td style="text-align:center"><strong>读取</strong>权限</td></tr><tr><td style="text-align:center"><strong>w</strong></td><td style="text-align:center"><strong>写入</strong>权限</td></tr><tr><td style="text-align:center"><strong>x</strong></td><td style="text-align:center"><strong>运行</strong>权限</td></tr></tbody></table></div><hr><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p><strong>Example 1：更改权限</strong></p><p>在Linux中，可以首先使用<code>touch</code>创建一个新文件。<code>touch</code>命令创建的文件对用户的默认权限为可读可写(rw-)。<br>想要更改权限，就可以使用<code>chmod</code>来指定文件的权限。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span> file</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l</span></span><br><span class="line"></span><br><span class="line">total 26</span><br><span class="line">-rw------- 1 cklai ra   0 Aug  1 11:48 file</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> o+w file</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l</span></span><br><span class="line"></span><br><span class="line">total 26</span><br><span class="line">-rw-----w- 1 cklai ra   0 Aug  1 11:48 file</span><br></pre></td></tr></table></figure><p>其中，<code>chmod o+w file</code>意思是对于其他用户(o)授予(+)写入(w)权限。</p><hr><p><strong>Example 2： 更改多个权限</strong></p><p>可以在<code>permission</code>参数内键入多个值来一次性设置多个权限。就刚才的例子往下继续：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l</span></span><br><span class="line"></span><br><span class="line">-rw-----w- 1 cklai ra   0 Aug  1 11:48 file</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> o+rx file</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l</span></span><br><span class="line"></span><br><span class="line">-rw----rwx 1 cklai ra   0 Aug  1 11:48 file*</span><br></pre></td></tr></table></figure><p><code>chmod o+rx file</code>的释义为：对其他用户(o)授予(+)读取(r)和运行(x)权限。</p><p>可以看到更新完权限后，文件名后面出现了一个星号”*”，这代表文件现在是可执行的。</p><hr><h2 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h2><p>这里会介绍很多新的命令：</p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:center"><code>grep 'abc' file</code></td><td style="text-align:left">返回在文件中包含”abc”的行。可以使用更高级的描述来实现更复杂的搜索。</td></tr><tr><td style="text-align:center"><code>cut -d, -f2 file</code></td><td style="text-align:left">返回特定的数据列。<br>它根据标志-d指定的定界符分隔每行，并返回标志-f指定的列（字段编号从1开始）。</td></tr><tr><td style="text-align:center"><code>diff file1 file2</code></td><td style="text-align:left">显示两个文件的区别。</td></tr><tr><td style="text-align:center"><code>wc file</code></td><td style="text-align:left">返回文件中的行数，字数和字符数。</td></tr><tr><td style="text-align:center"><code>sort file</code></td><td style="text-align:left">按照字母顺序将文件中的每行进行排序</td></tr><tr><td style="text-align:center"><code>uniq file</code></td><td style="text-align:left">用于删除相邻的重复行，最后只会留下一个重复行。</td></tr><tr><td style="text-align:center"><code>spell file</code></td><td style="text-align:left">检查文件中所有的拼写错误。</td></tr><tr><td style="text-align:center"><code>su</code></td><td style="text-align:left">将用户模式更改为超级用户模式。</td></tr><tr><td style="text-align:center"><code>yum install prog</code><br>或者<br><code>apt-get install prog</code></td><td style="text-align:left">这个命令会链接特定服务器来下载并安装程序。<br>一般来讲你需要先运行<code>su</code>才能使用这些命令来安装程序。</td></tr><tr><td style="text-align:center"><code>man cmd</code></td><td style="text-align:left">显示命令<code>cmd</code>的手册页。找到使用命令的其他选项对您非常有用。</td></tr></tbody></table></div><p>接下来我们会细致介绍这些命令的用法</p><hr><h3 id="文件内搜索-grep"><a href="#文件内搜索-grep" class="headerlink" title="文件内搜索 (grep)"></a>文件内搜索 (grep)</h3><p><code>grep</code>命令适用于搜索文件内的行。</p><p>例如这里有一个”<em>example1.txt</em>“文件包含如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 Apple 3.5</span><br><span class="line">4 Chicken 50</span><br><span class="line">1 Coke 5.5</span><br><span class="line">10 Jelly 5</span><br><span class="line">3 Chocolate 15</span><br><span class="line">2 Milk 8</span><br></pre></td></tr></table></figure><p>运行下面的命令将会返回文件内所有包含”ke”的行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep <span class="string">'ke'</span> example1.txt</span></span><br><span class="line">4 Chicken 50</span><br><span class="line">1 Coke 5.5</span><br></pre></td></tr></table></figure><p>搜索是很大的一块内容。这里仅用来介绍。后面我们会在搜索章节一起将文件内文件外搜索一并讲清楚的。  </p><p><br></p><hr><h3 id="文件字数-wc"><a href="#文件字数-wc" class="headerlink" title="文件字数 (wc)"></a>文件字数 (wc)</h3><p>同样使用”example1.txt”作为例子：</p><p>运行该命令则会返回如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">wc</span> example1.txt</span></span><br><span class="line"> 6 18 71 example1.txt</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>第一个数字代表<strong>行数</strong>，也就是文件共有六行</li><li>第二个数字代表<strong>词数</strong>，表明文件中有18个词</li><li>第三个数字代表<strong>文件大小</strong>，代指文件大小为71字节</li></ul><p>搭配参数<code>-l</code>使用可以仅仅返回行数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">wc</span> -l example1.txt</span></span><br><span class="line">6 example1.txt</span><br></pre></td></tr></table></figure><p>搭配参数<code>-w</code>使用可以仅仅返回词数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">wc</span> -w example1.txt</span></span><br><span class="line">18 example1.txt</span><br></pre></td></tr></table></figure><hr><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>使用<code>sort</code>命令来对文件内容排序。如果没有指定任何输入参数，则默认排序方式按照<strong>字母表顺序排列</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sort</span> example1.txt</span></span><br><span class="line">1 Coke 5.5</span><br><span class="line">10 Jelly 5</span><br><span class="line">2 Milk 8</span><br><span class="line">3 Chocolate 15</span><br><span class="line">4 Chicken 50</span><br><span class="line">5 Apple 3.5</span><br></pre></td></tr></table></figure><p>你可以使用不同的传入参数来指定排序方法。例如：</p><ul><li>使用<code>-n</code>则按照数字顺序排序：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sort</span> -n example1.txt</span></span><br><span class="line">1 Coke 5.5</span><br><span class="line">2 Milk 8</span><br><span class="line">3 Chocolate 15</span><br><span class="line">4 Chicken 50</span><br><span class="line">5 Apple 3.5</span><br><span class="line">10 Jelly 5</span><br></pre></td></tr></table></figure><ul><li>使用<code>-r</code>则按照倒序顺序排序:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sort</span> -n -r example1.txt</span></span><br><span class="line">10 Jelly 5</span><br><span class="line">5 Apple 3.5</span><br><span class="line">4 Chicken 50</span><br><span class="line">3 Chocolate 15</span><br><span class="line">2 Milk 8</span><br><span class="line">1 Coke 5.5</span><br></pre></td></tr></table></figure><ul><li>使用<code>-k</code>则按照字段排序。需要注意排序字段ID从1开始，而不是0。</li></ul><p>例如，将文件按照第三个字段进行排序。在”example1.txt”中，每行最后的那组数字就是第三字段。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sort</span> -k3 -n example1.txt</span></span><br><span class="line">5 Apple 3.5</span><br><span class="line">10 Jelly 5</span><br><span class="line">1 Coke 5.5</span><br><span class="line">2 Milk 8</span><br><span class="line">3 Chocolate 15</span><br><span class="line">4 Chicken 50</span><br></pre></td></tr></table></figure><ul><li>使用<code>-t</code>用来告诉排序程序，我们使用分隔符并非空格而是逗号。</li></ul><p>例如我们有一个”example1.txt”的变体，”example1_comma.txt”：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> example1_comma.txt</span></span><br><span class="line">5,Apple,3.5</span><br><span class="line">4,Chicken,50</span><br><span class="line">1,Coke,5.5</span><br><span class="line">10,Jelly,5</span><br><span class="line">3,Chocolate,15</span><br><span class="line">2,Milk,8</span><br></pre></td></tr></table></figure><p>需要在使用<code>sort</code>时加入参数<code>-t</code>来指定分隔符为逗号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sort</span> -t, -k3 -n example1_comma.txt</span></span><br><span class="line">5,Apple,3.5 </span><br><span class="line">10,Jelly,5 </span><br><span class="line">1,Coke,5.5 </span><br><span class="line">2,Milk,8 </span><br><span class="line">3,Chocolate,15 </span><br><span class="line">4,Chicken,50</span><br></pre></td></tr></table></figure><hr><h3 id="剪切文件"><a href="#剪切文件" class="headerlink" title="剪切文件"></a>剪切文件</h3><p>这里指的不是我们熟悉的剪切文件到其他目录，而是直接在文件内剪掉一部分内容。</p><p><code>cut</code>命令将会修剪文件并返回特定的内容。要使用这个命令，我们需要向<code>cut</code>命令指定分隔符。</p><p>指定分隔符的参数为<code>-d</code>，代表delimiter，注意不要和之前的<code>sort</code>命令搞混了！该参数不是可选的，即便分隔符为空格，你也需要指定参数<code>-d</code>。</p><p>使用参数<code>-f</code>来告诉程序你想要返回的字段，说白了就是列。和<code>sort</code>一样，字段ID从1开始而不是0。</p><p>例如，返回”example1.txt”文件内的第一字段和第三字段：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cut</span> -d <span class="string">' '</span> -f 1,3 example1.txt</span></span><br><span class="line">5 3.5 </span><br><span class="line">4 50 </span><br><span class="line">1 5.5 </span><br><span class="line">10 5 </span><br><span class="line">3 15 </span><br><span class="line">2 8</span><br></pre></td></tr></table></figure><hr><h3 id="移除重复行"><a href="#移除重复行" class="headerlink" title="移除重复行"></a>移除重复行</h3><p><code>uniq</code>命令删除相邻的重复行，只保留一个重复行。  </p><p>注意咯，它只删除相邻的重复项。</p><p>“example2.txt”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Apple </span><br><span class="line">Apple pie </span><br><span class="line">Apple pie </span><br><span class="line">Apple </span><br><span class="line">Apple </span><br><span class="line">Apple pie</span><br></pre></td></tr></table></figure><p>想要移除在”example2.txt”中多余的相邻重复行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">uniq</span> example2.txt</span> </span><br><span class="line">Apple </span><br><span class="line">Apple pie </span><br><span class="line">Apple </span><br><span class="line">Apple pie</span><br></pre></td></tr></table></figure><hr><h3 id="拼写检查"><a href="#拼写检查" class="headerlink" title="拼写检查"></a>拼写检查</h3><p><code>spell</code>命令返回文件中所有可能出现拼写错误的词：</p><p>“example3.txt”:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">It's a beautiffful day!</span><br><span class="line">I am so happpy todday.</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">spell example3.txt</span></span><br><span class="line">beautiffful </span><br><span class="line">happpy </span><br><span class="line">todday</span><br></pre></td></tr></table></figure><p><br></p><p>如果你自己的Linux机子运行这个命令报错，那么你的系统很有可能没有安装需要的软件包。按照下面的步骤修复这个问题吧：</p><ol><li>切换到Superuser账号：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">su</span></span><br></pre></td></tr></table></figure><p>还记得我们之前说过安装软件包之前需要切换到su账号吗</p><ol><li>安装<code>aspell</code>包：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum install aspell</span></span><br></pre></td></tr></table></figure><ol><li>退回到你当前的账户：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">exit</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="文件差异"><a href="#文件差异" class="headerlink" title="文件差异"></a>文件差异</h3><p><code>diff</code>命令用来显示两个文件的区别。</p><p>“fileA.txt”:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br></pre></td></tr></table></figure><p>“fileB.txt”:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eee</span><br><span class="line">aaa</span><br><span class="line">ddd</span><br></pre></td></tr></table></figure></p><p>下面的命令则会返回将”fileA.txt”转化为”fileB.txt”的步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">diff fileA.txt fileB.txt</span></span><br><span class="line">0a1 </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">eee</span> </span><br><span class="line">2,3c3 </span><br><span class="line">&lt; bbb </span><br><span class="line">&lt; ccc</span><br><span class="line"></span><br><span class="line">--- </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ddd</span> </span><br></pre></td></tr></table></figure><p>这里我们需要一点解释了。</p><p><strong>0a1</strong>：  </p><p>在<em>fileA</em>的第<strong>0</strong>行之后添加(<strong>a</strong>, add)一行，添加的内容由下一行<strong>&gt; eee</strong>表示</p><p><strong>2, 3c3</strong>：  </p><p>将<em>fileA</em>中的第<strong>2, 3</strong>行变成(<strong>c</strong>, change)<em>fileB</em>的第三行。<br>完成这一步需要先删除掉两行，由<strong>&lt;</strong>表示：</p><p><strong>&lt; bbb</strong><br><strong>&lt; ccc</strong><br>代表删除掉这两行。</p><p>分割线隔开后出现了<strong>&gt;</strong>。这代表我们需要在删除后再次添加一行：</p><p><strong>&gt; ddd</strong></p><p>代表再添加文本”ddd”</p><p>这样就能把”fileA.txt”变成”fileB.txt”了。</p><hr><p>再举另一个例子把：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">diff fileB.txt fileA.txt</span> </span><br><span class="line">1d0 </span><br><span class="line">&lt; eee </span><br><span class="line">3c2,3 </span><br><span class="line">&lt; ddd </span><br><span class="line"></span><br><span class="line">--- </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">bbb</span> </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">ccc</span> </span><br></pre></td></tr></table></figure><p>刚才是由A变B，现在是由B变A了。</p><p><strong>1d0</strong>：  </p><p>在<em>fileB</em>中删除(<strong>d</strong>, delete)第一行，随后的内容就会在第<strong>0</strong>行被对齐。</p><p><strong>&lt; eee</strong>表示我们删除了”eee”</p><p><strong>3c2,3</strong>：  </p><p>和刚才刚好反过来，将<em>fileB</em>中的第<strong>3</strong>行变为<em>fileA</em>的<strong>2,3</strong>行。先删去”ddd”，然后加入”bbb”和”ccc”</p><hr><h2 id="标准I-O，文件重定向和管道"><a href="#标准I-O，文件重定向和管道" class="headerlink" title="标准I/O，文件重定向和管道"></a>标准I/O，文件重定向和管道</h2><h3 id="标准IO和文件重定向"><a href="#标准IO和文件重定向" class="headerlink" title="标准IO和文件重定向"></a>标准IO和文件重定向</h3><h4 id="标准输入，输出和标准错误"><a href="#标准输入，输出和标准错误" class="headerlink" title="标准输入，输出和标准错误"></a>标准输入，输出和标准错误</h4><p>在Shell中使用命令时，Shell将每个进程与一些打开的文件关联起来，并使用称为<strong>文件描述符</strong> (File descriptors)的数字引用这些打开的文件。</p><div class="table-container"><table><thead><tr><th style="text-align:center">文件描述符</th><th style="text-align:left">文件</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:left">标准输入(stdin) - 输入文件</td></tr><tr><td style="text-align:center">1</td><td style="text-align:left">标准输出(stdout) - 输出文件</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">标准错误(stderr) - 输出错误的文件</td></tr></tbody></table></div><h4 id="重定向运算符"><a href="#重定向运算符" class="headerlink" title="重定向运算符"></a>重定向运算符</h4><p>一般来讲当我们执行命令时，输出会在屏幕上通过Shell打印出来。我们可以使用<strong>重定向运算符</strong> (Redirection operator) “<strong>&gt;</strong>“ 来重定向输出到一个文件内。  </p><p>例如，下面的命令将会保存路径中的文件到”file.txt”中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l 1&gt; files.txt</span></span><br></pre></td></tr></table></figure><p>或者也可以用这样的短格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l &gt; files.txt</span></span><br></pre></td></tr></table></figure><p>如果使用了上述命令，则输出将不会显示在屏幕上，而是会被记录到文件”files.txt”中。当用来排查数据，debug或者就是简单保存信息时，这招很有用。</p><blockquote><p>如果多次执行上述命令，系统可能会显示”<strong>cannot overwrite existing file</strong>“。<br>为了解决这个问题，可以先手动删除已有的文件，或者使用<strong>&gt;|</strong>强制写入文件。如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l &gt;| files.txt</span></span><br></pre></td></tr></table></figure></blockquote><p><br></p><hr><p>下面是一些常见的重定向运算符和他们的释义：</p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>command 1&gt; file</code><br>或者<br><code>command &gt; file</code></td><td style="text-align:left">将标准输出<strong>发送到</strong> <em>file</em>中</td></tr><tr><td style="text-align:center"><code>command 1&gt;&gt; file</code><br>或者<br><code>command &gt;&gt; file</code></td><td style="text-align:left">将标准输出<strong>追加到</strong> <em>file</em>中</td></tr><tr><td style="text-align:center"><code>command 2&gt; file</code></td><td style="text-align:left">将标准错误<strong>发送到*</strong>file*中</td></tr><tr><td style="text-align:center"><code>command 2&gt;&gt; file</code></td><td style="text-align:left">将标准错误<strong>追加到*</strong>file*中</td></tr><tr><td style="text-align:center"><code>command &lt; fileA &gt; fileB 2&gt;fileC</code></td><td style="text-align:left">首先命令会从<em>fileA</em>中读取，执行后将输出发送到<em>fileB</em>，将标准错误发送到<em>fileC</em></td></tr></tbody></table></div><p><br></p><p><strong>&gt;</strong>和<strong>&gt;&gt;</strong>的区别在于，”&gt;”将会在每次执行时覆盖文件内容，而”&gt;&gt;”则会在文件后面追加内容。</p><hr><p>如果我们这里有一个C++程序，我们也可以使用这样的运算符来进行操作。例如下面的程序”add.cpp”会由两个输入，将两个输入加起来之后获得一个输出：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">       <span class="type">int</span> a;</span><br><span class="line">       <span class="type">int</span> b;</span><br><span class="line">       std::cin &gt;&gt; a;</span><br><span class="line">       std::cin &gt;&gt; b;</span><br><span class="line">       std::cout &lt;&lt; a+b;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>编译文件为一个叫做”add”的可执行文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ add.cpp -o add</span></span><br></pre></td></tr></table></figure><p>这时你可以将自己的输入写到文件内，如”input.txt”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br></pre></td></tr></table></figure><p>然后使用”&lt;”传入参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./add &lt; input.txt</span></span><br><span class="line">7</span><br></pre></td></tr></table></figure><p>或者你可以更进一步，将输入和输出都独立出来：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./add &lt; input.txt &gt; output.txt</span></span><br></pre></td></tr></table></figure><p>为何不能使用 <code>input.txt &gt; ./add &gt; output.txt</code>这种写法？因为Shell会尝试执行input.txt。  </p><p><br></p><hr><h4 id="管线"><a href="#管线" class="headerlink" title="管线"></a>管线</h4><p>有时候我们需要将一个程序的输出换做另一个程序的输入，我们可以创建并且利用管线来优雅地解决这个问题。  </p><p>“|”是管线的符号。这个符号用来重定向一个程序的输出到另一个程序的输入，没有中间商赚差价。所谓中间商就是刚才用到的输入输出文本文件。  </p><p>举个例子，如下是两行命令：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l &gt; files.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep <span class="string">"Jan 26"</span> &lt; files.txt</span></span><br></pre></td></tr></table></figure><p>简而言之就是使用<code>ls</code>命令列出所有内容到”files.txt”中，然后从”files.txt”中搜索所有含有”Jan 26”的行。  </p><p>太复杂了。  </p><p>整个操作可以换做下面的一行：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l | grep <span class="string">"Jan 26"</span></span></span><br></pre></td></tr></table></figure><p>通过使用<code>|</code>，可以将<code>|</code>之前的命令输出直接当作<code>|</code>后面的命令传入。在这个例子中具体是将<code>ls -l</code>的输出当作<code>grep</code>命令的传入来用了。  </p><hr><p>举几个例子吧。  </p><p><strong>Example 1</strong>:</p><p>假设我们现在有一个”data.txt”文件，我们需要按照价格将其排序，然后仅仅将商品的名称和价格保存到”result.txt”文件夹中，要求只能使用一行命令。  </p><p>来看看标准题解：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sort</span> -k3 -n data.txt | <span class="built_in">cut</span> -d<span class="string">' '</span> -f2,3 &gt; result.txt</span></span><br></pre></td></tr></table></figure><p>首先我们使用<code>sort</code>命令，对”data.txt”的<strong>第三个字段(-k3)</strong>按照<strong>数字顺序(n)</strong>进行排序。<br>然后你看见了<code>|</code>。这代表这一步的输出即将被传入到下一个命令，也就是<code>cut</code>。<br>在<code>cut</code>中我们以<strong>空格作为分隔符(-d’ ‘)</strong>，并<strong>保留第二第三字段(-f2,3)</strong>，最后存入到”result.txt”中。  </p><p>还是很简单的。下面是这个过程的视觉表述方式：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBfe2c1fb97579cb3ac7600cc5974e5bb8?method=download&amp;shareKey=866755676c9de499cfa8e00e7cad5101" alt=""></p><hr><p><strong>Example 2</strong>:</p><p>目标是在当前路径下对用户，用户组和其他人有运行权限的文件和路径。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l</span></span><br><span class="line">total 190</span><br><span class="line">-rwx--x--x    1   kit  gopher   0   Sep  12 10:30  add.o</span><br></pre></td></tr></table></figure><p>对于所有目标都有执行权限的话，则权限指示的第4, 7, 10位应该是x。但是我们应该如何检索呢？看看下面这行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -E <span class="string">'^...x..x..x'</span> [传入]</span></span><br></pre></td></tr></table></figure><p>使用<code>-E</code>参数可以告诉Shell我们需要做样式匹配搜索了。对于<code>'^...x..x..x'</code>来讲：  </p><ul><li>“^”表示从行首开始匹配。</li><li>“.”表示可以匹配任意字符。</li></ul><p>加在一起的话，<code>'^...x..x..x'</code>的意思大概就是，从行首开始匹配，返回在第4, 7, 10个位置有字母”x”的行。  </p><p>那么一行就能解决了：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l | grep -E <span class="string">'^...x..x..x'</span></span></span><br></pre></td></tr></table></figure><p>结构上和上一个例子一样所以这里不解释了。  </p><p><br></p><hr><p><strong>Example 3</strong></p><p>加入你想移除文件里的某几列，然后将其输入到程序里。举个例子，”mark.txt”，包含学生信息的单行数据：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> mark.txt</span></span><br><span class="line">2011111111 John M 98.5 100 62.5 88 75.5</span><br></pre></td></tr></table></figure><p>对应格式是：[UID, 名称，性别，分数1，分数2，分数3，分数4，分数5]</p><p>然后我们同样有一个C++程序用来处理信息，用于计算平均分：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mark.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">int</span> main {</span><br><span class="line">       <span class="type">double</span> a1, a2, a3, a4, a5;</span><br><span class="line">       std::cin &gt;&gt; a1 &gt;&gt; a2 &gt;&gt; a3 &gt;&gt; a4 &gt;&gt; a5;</span><br><span class="line">       std::cout &lt;&lt; <span class="string">"The overall mark the student get is: "</span>;</span><br><span class="line">       std::cout &lt;&lt; (a1 + a2 + a3 + a4 + a5) / <span class="number">5</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>程序的问题是输入仅有五项成绩，但是我们的”mark.txt”文件内包含UID在内的其他多余信息。  </p><p>那这就很坏了。  </p><p>一种方法是我们可以使用管线来先处理”mark.txt”，然后传入程序。我们可以使用<code>cut</code>命令处理一下：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cut</span> -d<span class="string">' '</span> -f-8 mark.txt</span></span><br><span class="line">98.5 100 62.5 88 75.5</span><br></pre></td></tr></table></figure><p>然后编译程序运行：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ mark.cpp -o mark</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cut</span> -d<span class="string">' '</span> -f4-8 mark.txt | ./mark &gt; result.txt</span></span><br></pre></td></tr></table></figure><p>这样程序的输出就会被记录到”result.txt”中：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> result.txt</span></span><br><span class="line">The overall marks the student get is: 84.9</span><br></pre></td></tr></table></figure><p><br></p><hr><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="搜索文件或路径-find"><a href="#搜索文件或路径-find" class="headerlink" title="搜索文件或路径 (find)"></a>搜索文件或路径 (find)</h3><p>各位应该在Windows或MacOS中使用过搜索功能。你也可以在Linux中实现对文件或路径的搜索操作：  </p><p>使用<code>find</code>命令可以用来搜索文件或路径。<code>find</code>命令的格式为：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [path] [-name] [-type]</span><br></pre></td></tr></table></figure><ul><li><code>[path]</code>告诉系统你想从哪里开始搜索操作。  </li><li><code>[name]</code>是你想要搜索的文件或路径的名字。  </li><li><code>[type]</code>是可选参数，参数包含：  <ul><li><code>-type f</code>代表仅搜索文件 (<em>files</em>)</li><li><code>-type d</code>命令之搜索路径 (<em>directory</em>)</li></ul></li></ul><hr><p>举个例子，假如在当前位置有下面这几个文件和路径：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">hello/  hello.cpp  hello.txt</span><br></pre></td></tr></table></figure><p>那么在当前目录下搜索”hello.txt”的方法即为：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find . -name <span class="string">"hello.txt"</span> -<span class="built_in">type</span> f</span></span><br><span class="line">./hello.txt</span><br></pre></td></tr></table></figure><p>上面的命令<br>在上面的命令中，<code>.</code>代表<strong>当前目录</strong>。指定当前目录后<code>find</code>会在这个目录为基础向下寻找文件。  </p><p><br></p><p>或者我们也可以在当前位置下搜索”hello”打头的文件：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find . -name <span class="string">"hello.*"</span> -<span class="built_in">type</span> f</span></span><br><span class="line">./hello.cpp</span><br><span class="line">./hello.txt</span><br></pre></td></tr></table></figure><p>…或者是搜索路径：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">find . -name <span class="string">"hello"</span> -<span class="built_in">type</span> d</span></span><br><span class="line">./hello</span><br></pre></td></tr></table></figure><hr><h3 id="文件内搜索-grep-1"><a href="#文件内搜索-grep-1" class="headerlink" title="文件内搜索 (grep)"></a>文件内搜索 (grep)</h3><p><code>grep</code> (Global Regular Expression Print)命令之前已经介绍过了。这里介绍更多细节：  </p><p>之前用的是不带<code>-E</code>的使用方式，只是用来返回文件内的匹配行：  </p><p>“example1.txt”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello how are you?</span><br><span class="line">I am using the bash shell like a pro!</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep <span class="string">'hell'</span> example1.txt</span></span><br><span class="line">I am using the bash shell like a pro!</span><br></pre></td></tr></table></figure><p><code>grep</code>命令<strong>区分大小写！</strong>这就是为什么返回的是包含”shell”的第二行，而不是包含”Hello”的第一行。  </p><hr><p><code>grep</code>可以加入可选参数<code>-E</code>，代表按样式匹配。格式为：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -E [regular experssion] [filename]</span><br></pre></td></tr></table></figure><p>在<code>regular expression</code>中，你可以按照下面的符号来进行自定义匹配：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:center"><code>.</code></td><td style="text-align:left">匹配任何<strong>单个字符</strong></td></tr><tr><td style="text-align:center"><code>^</code></td><td style="text-align:left">仅从<strong>行首</strong>开始匹配</td></tr><tr><td style="text-align:center"><code>$</code></td><td style="text-align:left">仅从<strong>行尾</strong>开始匹配</td></tr><tr><td style="text-align:center"><code>?</code></td><td style="text-align:left">一个字符后面跟一个”?”，则该字符可被匹配<strong>0次或1次</strong></td></tr><tr><td style="text-align:center"><code>+</code></td><td style="text-align:left">一个字符后面跟一个”+”，则该字符可被匹配<strong>1次或多次</strong></td></tr><tr><td style="text-align:center"><code>*</code></td><td style="text-align:left">一个字符后面跟一个”<em>“，则该字符可被匹配<em>*0次或多次</em></em></td></tr><tr><td style="text-align:center"><code>[]</code></td><td style="text-align:left">被”[]”括起来的字符会被<strong>全字匹配</strong><br>括起来的字符可以是单个字符，也可以是多个字符<br>你可以用”-“符号来自定义区间<br>例如，与其使用[12345]，可以使用[1-5]代替</td></tr><tr><td style="text-align:center"><code>\</code></td><td style="text-align:left"><strong>转义符</strong><br>使用转义符来取消特殊字符的特殊效用<br>例如我们想要寻找”.”而不发挥它“匹配单个字符的属性”，就写成<code>\.</code></td></tr><tr><td style="text-align:center"><code>pattern {n}</code></td><td style="text-align:left">匹配”n”次出现的<code>pattern</code></td></tr><tr><td style="text-align:center"><code>pattern {n,}</code></td><td style="text-align:left">匹配<em>至少</em>“n”次出现的<code>pattern</code></td></tr><tr><td style="text-align:center"><code>pattern {n,m}</code></td><td style="text-align:left">匹配出现”n”和”m”次数之间的<code>pattern</code></td></tr><tr><td style="text-align:center"><code>(ab){3}</code></td><td style="text-align:left">出现三次”ab”排列<br>例如(ab){3}会被匹配做”ababab”，不是”abbb”</td></tr></tbody></table></div><p>接下来我们使用刚才”example1.txt”，挑重点解释。  </p><hr><h4 id="任意单字符匹配"><a href="#任意单字符匹配" class="headerlink" title="任意单字符匹配"></a>任意单字符匹配</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -E <span class="string">'.ell'</span> example1.txt</span></span><br><span class="line">Hello how are you?</span><br><span class="line">I am using the bash shell like a pro!</span><br></pre></td></tr></table></figure><p>‘.ell’代表”.”处可以匹配任何单个字符，例如”Cell”, “cell”, “bell”会被匹配。<br>如果如果你想要在”.”处搜索的字母仅仅是大小写H，则可以使用<code>[Hh]ell</code>。  </p><hr><h4 id="行首-行尾匹配"><a href="#行首-行尾匹配" class="headerlink" title="行首/行尾匹配"></a>行首/行尾匹配</h4><p>这里启用”example2.txt”：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> example2.txt</span></span><br><span class="line">apple</span><br><span class="line">pineapple</span><br><span class="line">apple pie</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep <span class="string">'apple'</span> example2.txt</span></span><br><span class="line">apple</span><br><span class="line">pineapple</span><br><span class="line">apple pie</span><br></pre></td></tr></table></figure><p><br></p><p>使用”^”从行首开始匹配：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -E <span class="string">'^apple'</span> example2.txt</span></span><br><span class="line">apple</span><br><span class="line">apple pie</span><br></pre></td></tr></table></figure><p><br></p><p>而使用”$”从行尾开始匹配：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -E <span class="string">'apple$'</span> example2.txt</span></span><br><span class="line">apple</span><br><span class="line">pineapple</span><br></pre></td></tr></table></figure><p><br></p><p>由此可知，使用”^”和”$”也可以全字匹配某一行：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -E <span class="string">'^apple$'</span> example2.txt</span></span><br><span class="line">apple</span><br></pre></td></tr></table></figure><p><br></p><p>或者使用”^”, “$”配合”.”来返回只有五个字符的行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -E <span class="string">'^.....$'</span> example2.txt</span></span><br><span class="line">apple</span><br></pre></td></tr></table></figure><hr><h4 id=""><a href="#" class="headerlink" title="?, +, *"></a>?, +, *</h4><p><strong>“?”</strong></p><p>“example3.txt”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apple</span><br><span class="line">coco</span><br><span class="line">cherries</span><br><span class="line">orange</span><br><span class="line">ape</span><br><span class="line">angel</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -E <span class="string">'^ap?'</span> example3.txt</span></span><br><span class="line">apple</span><br><span class="line">ape</span><br><span class="line">angel</span><br></pre></td></tr></table></figure><p>没看懂？首先”^”确保行首开始匹配，随后：  </p><ul><li>“<strong>ap</strong>ple”会被返回，因为在表达式中的p要求出现0次或者1次，这里出现了1次</li><li>“<strong>ap</strong>e”会被返回，因为在表达式中的p要求出现0次或者1次，这里出现了1次</li><li>“<strong>a</strong>ngel”会被返回，因为在表达式中的p要求出现0次或者1次，这里出现了0次</li></ul><p>那么接下来的东西，”+”和”*”，原理上基本上是一样的了。</p><hr><p><strong>+</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -E <span class="string">'^ap+'</span> example3.txt</span></span><br><span class="line">apple</span><br><span class="line">ape</span><br></pre></td></tr></table></figure><ul><li>“<strong>app</strong>le”会被返回，因为在表达式中的p要求出现1次或者多次，这里出现了多次</li><li>“<strong>ap</strong>e”会被返回，因为在表达式中的p要求出现1次或者多次，这里出现了1次</li><li>“angel”没有被返回，因为在表达式中的p要求出现1次或者多次，这里出现了0次</li></ul><hr><p><strong>*</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -E <span class="string">'^ap*+*'</span> example3.txt</span></span><br><span class="line">apple</span><br><span class="line">ape</span><br><span class="line">angel</span><br></pre></td></tr></table></figure><ul><li>“<strong>app</strong>le”会被返回，因为在表达式中的p要求出现0次或者多次，这里出现了多次</li><li>“<strong>ap</strong>e”会被返回，因为在表达式中的p要求出现0次或者多次，这里出现了1次</li><li>“<strong>a</strong>ngel”会被被返回，因为在表达式中的p要求出现0次或者多次，这里出现了0次</li></ul><hr><p>接下来是一些进阶一点的用法了：</p><p><strong>整合”.”和”*“</strong></p><p>如果我们想要匹配字符”a”，然后后方跟随任意字符，直到”ge”再次出现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -E <span class="string">'a.*ge'</span> example3.txt</span></span><br><span class="line">orange</span><br><span class="line">angel</span><br></pre></td></tr></table></figure><p>“<em>“跟在”.”之后，所以”任意字符匹配”可以被匹配多次，这就是为什么”or<strong>ange</strong>“和”<em>*ang</em></em>el”能被返回的原因。  </p><hr><p><strong>使用括号”()”</strong></p><p>我们可以使用括号来整合子字符串。例如我们想要寻找字符串”co”出现过一次或多次的行：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -E <span class="string">'(co)+'</span> example3.txt</span></span><br><span class="line">coco</span><br></pre></td></tr></table></figure><p>为什么要用括号呢，看看如果不用括号会发生什么：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -E <span class="string">'co*'</span> example3.txt</span></span><br><span class="line">coco</span><br><span class="line">cherries</span><br></pre></td></tr></table></figure><p>因为”*”只会应用到它的前一个字符。没加括号的话就会被应用到”o”，而不是整个子字符串”co”。  </p><hr><h4 id="匹配集合"><a href="#匹配集合" class="headerlink" title="匹配集合"></a>匹配集合</h4><p>可以使用方括号 “[ ]”来定义一个集合，随后进行搜索。你可以按照下面的格式定义集合：  </p><ul><li><strong>[0123456789]</strong>或者<strong>[0-9]</strong>用来匹配任意单个数字</li><li><strong>[A-Z]</strong>用来匹配任何单个大写字母</li><li><strong>[a-z]</strong>用来匹配任何单个小写字母</li><li><strong>[A-Za-z]</strong>用来匹配任何单个字母，包括大写和小写字母。  </li></ul><p>例如我们有一个”example4.txt”：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Apple Juice HKD13</span><br><span class="line">apple pie USD 4</span><br><span class="line">Banana phone HKD</span><br></pre></td></tr></table></figure><p>查找包含”apple”或者”Apple”的行：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -E <span class="string">'[Aa]pple'</span> example4.txt</span></span><br><span class="line">Apple Juice HKD13</span><br><span class="line">apple pie USD 4</span><br></pre></td></tr></table></figure><p>查找包含”HKD”，并在其后跟随一个或者多个数字的行：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -E <span class="string">'HKD[0-9]*'</span> example4.txt</span></span><br><span class="line">Apple Juice HKD13</span><br><span class="line">Banana phone HKD</span><br></pre></td></tr></table></figure><hr><h4 id="匹配序列"><a href="#匹配序列" class="headerlink" title="匹配序列"></a>匹配序列</h4><p>可以使用”{ }”来匹配一个序列 (pattern)。  </p><p>上”example5.txt”：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2April2013</span><br><span class="line">30-1-2013</span><br><span class="line">13December2013</span><br></pre></td></tr></table></figure><p>如果我们想要查找一个日月年的格式，并且日为2个字符，月至少为3个字符，年为4个字符，你可以整成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -E <span class="string">'^[0-9]{1,2}[a-zA-Z]{3,}[0-9]{4}'</span> example5.txt</span></span><br><span class="line">2April2013</span><br><span class="line">13December2013</span><br></pre></td></tr></table></figure><p>这很抽象，所以我们需要简单讲讲：  </p><ul><li><strong>[0-9]{1,2}</strong>定义一个数字集合，并且需要至少出现一次，最多出现2次</li><li><strong>[a-zA-Z]{3,}</strong>定义一个字母（包含大小写）集合，并且需要至少3个字符长</li><li><strong>[0-9]{4}</strong>定义一个数字集合，并且必须要是正正好好4个字符长</li></ul><p>加上行首匹配”^”就ok了。  </p><hr><h4 id="其他常用匹配写法"><a href="#其他常用匹配写法" class="headerlink" title="其他常用匹配写法"></a>其他常用匹配写法</h4><div class="table-container"><table><thead><tr><th style="text-align:center">表述</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:center"><code>[a-z]*</code></td><td style="text-align:left">匹配任意数量字符的小写字母</td></tr><tr><td style="text-align:center"><code>....$</code></td><td style="text-align:left">匹配包含四个字符的行</td></tr><tr><td style="text-align:center"><code>abc.*abc</code></td><td style="text-align:left">匹配出现两次”abc”的行。两个”abc”之间可以有任意数量的字符</td></tr><tr><td style="text-align:center"><code>[0-9]{2}-[0-9]{2}-[0-9]{4}</code></td><td style="text-align:left">匹配<code>dd-mm-yyyy</code>格式。请注意这不会验证日期是否合法！</td></tr><tr><td style="text-align:center"><code>^.{n,m}$</code></td><td style="text-align:left">匹配行长介于n和m个字符之间的行</td></tr><tr><td style="text-align:center"><code>(bye)+</code></td><td style="text-align:left">匹配一次或多次出现过”bye”的行，例如”bye”, “byebye”, “byebyebye”，空行不会被匹配。</td></tr></tbody></table></div><hr><p><br></p><p><strong>至此，Module 1全部完结！</strong> </p><p><br></p><hr><h1 id="Module-2-Shell-Script-amp-Version-Control"><a href="#Module-2-Shell-Script-amp-Version-Control" class="headerlink" title="Module 2: Shell Script & Version Control"></a>Module 2: Shell Script &amp; Version Control</h1><p>先来深入一下Shell脚本把。  </p><h2 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h2><p>Shell 脚本 (Shell Script, .sh) 是一种由 Linux shell 运行的计算机程序。<br>Shell Script是一种解释型语言，而不是编译型语言。因此与 C++ 不同，我们不需要在执行程序之前将 shell 编译为二进制可执行格式。<br>相反，每次执行用 Shell 脚本编写的程序时，shell 都会对其进行解析和解释。  </p><p>解释型语言允许我们通过简单地编辑脚本来更快地修改程序。但是，程序通常较慢，因为在执行期间需要进行解析和解释。<br>假设我们有一系列 Shell 命令，我们不想在每次要执行时重新输入这些命令。我们可以将它们保存在一个文件中，并将其称为 shell 脚本。  </p><blockquote><p><strong>注意注意↑！</strong><br>在 Windows 中编辑脚本文件并导入到 Linux 可能会导致执行失败，因为 Windows 中使用的行尾 (EOL) 不同。<br>  你应该在 Linux 系统内创建和编辑脚本文件（例如，在 SSH 中使用 vi 编辑器，在 X2Go 中使用 gedit）。否则，如果从 Windows 导入脚本文件，则需要确保 Windows 环境中的文本编辑器中的行尾选项设置为 UNIX 格式 (LF) 而不是 Windows 格式 (CRLF)。  </p></blockquote><p><br></p><hr><p>我们先来创建一个<code>hello.sh</code>脚本写个典中典Hello world：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vi hello.sh</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello world!"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Welcome to ENGG1340"</span></span><br></pre></td></tr></table></figure><p><code>echo</code>命令用来向控制台输出一行。行中内容可以是变量值，也可以是字符串。  </p><p>保存并退出，随后我们需要使得文件可以被用户运行：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> u+x hello.sh</span></span><br></pre></td></tr></table></figure><p>然后直接运行：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./hello.sh</span></span><br><span class="line">Hello world!</span><br><span class="line">Welcome to ENGG1340</span><br></pre></td></tr></table></figure><hr><p>所有脚本都应以<code>#!</code>开头，这表示系统应使用哪个程序来处理 shell 脚本。在本例中，它是 bash 程序的路径。<br>从Module 1 中我们知道有许多不同的 shell（例如，C shell、Korn shell、Bash shell）。而由于我们使用 Bash shell，因此我们需要提供 bash 程序的路径，以便操作系统知道如何解释 bash shell 命令。<br>在本例中，Bash shell的路径为 /bin/bash。  </p><p>你也可以使用<code>which -a</code>命令来找到Bash shell的具体位置： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">which</span> -a bash</span></span><br><span class="line">/usr/local/bin/bash</span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><p>参数<code>-a</code>代指返回bash的所有路径。如你所见返回的路径不止一个，这代表Bash的路径可能有多个。在本例中我们使用<code>/bin/bash</code>路径下的那个。  </p><hr><p>来看看另一个例子。这里我们引入<code>echo</code>命令的新参数<code>-n</code>看看会发生什么不同的情况：  </p><p><em>ex1_1.sh</em>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">"Hello world!"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Welcome to ENGG1340"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"bye"</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ex1_1.sh</span></span><br><span class="line">Hello world!Welcome to ENGG1340</span><br><span class="line">bye</span><br></pre></td></tr></table></figure><p><code>-n</code>可以表示”no trailing”使下一行直接继续打印在上一行的末尾。  </p><hr><p>这次我们来看个带C++的例子：  </p><p>“<em>add.cpp</em>“</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">       <span class="type">int</span> a;</span><br><span class="line">       <span class="type">int</span> b;</span><br><span class="line">       std::cin &gt;&gt; a;</span><br><span class="line">       std::cin &gt;&gt; b;</span><br><span class="line">       std::cout &lt;&lt; a + b;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>“<em>input.txt</em>“:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br></pre></td></tr></table></figure><p>之前我们使用管线可以封装好整个自动化，不过这里我们试着用Shell脚本： </p><p>“<em>ex1_2.sh</em>“:  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Compile the code</span></span><br><span class="line">g++ add.cpp -o add</span><br><span class="line"><span class="comment"># Run the code and display result</span></span><br><span class="line">./add &lt; input.txt &gt; output.txt</span><br><span class="line"><span class="built_in">cat</span> output.txt</span><br></pre></td></tr></table></figure><p>运行：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./ex1_2.sh</span><br><span class="line">7</span><br></pre></td></tr></table></figure><hr><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>在Shell脚本中只有一种变量类型，那就是字符串。  </p><p>变量名区分大小写，只支持包含大小写字母，数字和下划线 (_)。  </p><hr><h4 id="定义并访问变量"><a href="#定义并访问变量" class="headerlink" title="定义并访问变量"></a>定义并访问变量</h4><p>我们可以通过这种方式来定义并赋予变量一个值：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pet=<span class="string">"dog"</span></span><br></pre></td></tr></table></figure><p>等号前后不能有空格。  </p><p>如果我们需要取用变量中的内容，则需要使用美元符号：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">pet=<span class="string">"dog"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$pet</span></span><br></pre></td></tr></table></figure><p>输出为<code>dog</code>。  </p><hr><h4 id="读取用户输入"><a href="#读取用户输入" class="headerlink" title="读取用户输入"></a>读取用户输入</h4><p><code>read</code>命令用来等待用户在控制台向脚本提供输入： </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"What is your name?"</span></span><br><span class="line"><span class="built_in">read</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello <span class="variable">$name</span>"</span></span><br></pre></td></tr></table></figure><p>当用户输入完值之后，会被自动存储到变量<code>name</code>中。  </p><p>比如我们来看这个程序的具体例子：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ex2_2.sh</span></span><br><span class="line">What is your name?</span><br><span class="line">Kit</span><br><span class="line">Hello, Kit</span><br></pre></td></tr></table></figure><p><br></p><hr><h4 id="单引号和双引号"><a href="#单引号和双引号" class="headerlink" title="单引号和双引号"></a>单引号和双引号</h4><p>在Shell脚本中区分引用很重要。我们可以用三种方式来确定一个字符串值，分别是<strong>不引用</strong>，<strong>单引号引用</strong>和<strong>双引号引用</strong>。  </p><hr><p><strong>不引用</strong>  </p><p>我们可以在定义字符串的时候不加任何引用，但是这个方法仅在需要定义的字符串是一个整体，没有空格的情况下才可用：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">cat</span></span><br></pre></td></tr></table></figure><p>下面这种情况就会报错：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=Apple pie</span><br></pre></td></tr></table></figure><p>因为 程序会将Apple当作一个指令来看待，而不是一个字符串。  </p><hr><p><strong>单引号引用</strong>  </p><p>在单引号引用情况下，带空格的字符串可以被成功处理，但是没办法做到变量替换。  </p><p>变量替换功能是双引号引用的功能： </p><hr><p><strong>双引号引用</strong></p><p>双引号引用相比单引号引用支持更多功能，其中一个就是变量替换：</p><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>$</code></td><td style="text-align:left">变量替换</td></tr><tr><td style="text-align:center"><code>\</code></td><td style="text-align:left">转义符</td></tr><tr><td style="text-align:center">``</td><td style="text-align:left">包含bash命令</td></tr></tbody></table></div><p>看不懂？就着下面的例子看看：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">name=<span class="string">"Apple"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Hello, $name'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello, <span class="variable">$name</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\$name = <span class="variable">$name</span>"</span></span><br></pre></td></tr></table></figure><p>运行后可以得到： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ex2_3.sh</span></span><br><span class="line">Hello, $name</span><br><span class="line">Hello, Apple</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">name = Apple</span></span><br></pre></td></tr></table></figure><p>第一行会被输出为<code>Hello, $name</code>，因为我们使用了单引号引用，<code>name</code>变量不会被替换。<br>第二行会被输出为<code>Hello Apple</code>，因为双引号引用下<code>$name</code>会被替换为变量<code>name</code>。<br>第三行会被输出为<script type="math/tex">name = Apple`，因为我们使用转义符取消了第一个`$name`中`</script>的替换功能，而第二个<code>$name</code>会被保持原状正常替换。  </p><p><br></p><hr><h4 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h4><p>前面提到过一嘴，不过我们决定在这里展开相关说明。  </p><p>使用反引号(`)，一般是esc键下面的那个键，我们可以在脚本中向变量保存Shell命令的输出，来实现进一步的处理：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=<span class="string">"`cat file.txt`"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"></span><br><span class="line">b=<span class="string">"`wc -l file.txt | cut -d\" \""</span> -f1`<span class="string">"</span></span><br><span class="line"><span class="string">echo "</span>There are <span class="variable">$b</span> lines <span class="keyword">in</span> file<span class="string">"</span></span><br></pre></td></tr></table></figure><p>“<em>file.txt</em>“:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Apple</span><br><span class="line">Banana</span><br><span class="line">Cherry</span><br></pre></td></tr></table></figure><p>运行输出为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ex2_4.sh</span></span><br><span class="line">Apple Banana Cherry</span><br><span class="line">There are 3 lines in file</span><br></pre></td></tr></table></figure><p>接下来我们解读一下。在变量b中，首先<code>wc</code>命令返回<code>3 file.txt</code>，告诉我们一共有三行。接着我们使用<code>cut</code>命令截去后面多余的部分，返回一个”3”。  </p><p>注意在<code>cut</code>命令的参数部分我们使用了转义符，因为原本是<code>cut -d" " -f1</code>，但问题在于外面已经有一对双引号了。解决这个问题只能去转义里面的两个引号。  </p><p><br></p><hr><h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h3><p>如果我们想要获得一个字符串的长度：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=<span class="string">"Apple"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">${#a}</span></span><br></pre></td></tr></table></figure><p><br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./ex2_5_1.sh</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>其中<code>${\#a}</code>的意思是返回变量a存储的字符串的长度。  </p><hr><h4 id="子字符串"><a href="#子字符串" class="headerlink" title="子字符串"></a>子字符串</h4><p>使用<code>${a:pos:len}</code>可以用来返回一个字符串的子字符串。例如：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=<span class="string">"Apple Pie"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">${a:6:3}</span></span><br></pre></td></tr></table></figure><p>会返回变量<strong>a</strong>从第<strong>6</strong>个字符位置开始包含并向后数<strong>3</strong>个字符长度的子字符串，也就是：<code>Pie</code>。  </p><p>和Python一样第一个字符编号为0。  </p><p><br></p><hr><h4 id="替换字符串内容"><a href="#替换字符串内容" class="headerlink" title="替换字符串内容"></a>替换字符串内容</h4><p>使用<code>${a/from/to}</code>来指定替换一个字符串。先看例子：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=<span class="string">"Apple Pie"</span></span><br><span class="line">from=<span class="string">"Pie"</span></span><br><span class="line">to=<span class="string">"Juice"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">${a/from/to}</span></span><br></pre></td></tr></table></figure><p>输出为<code>Apple Juice</code>。  </p><p>该替换会在字符串内寻找<code>from</code>的第一个匹配，然后将<code>from</code>替换为<code>to</code>的值。  </p><p><br></p><hr><h4 id="按数字计算"><a href="#按数字计算" class="headerlink" title="按数字计算"></a>按数字计算</h4><p>我们存储的变量都是字符串，但是如果我们存入的是数字类型的字符串，并且我们想要进行一些数学运算该咋整？  </p><p>虽然听起来很奇怪，但是我们可以使用<code>let</code>命令来进行数学运算。支持加减乘除和整数除法。(+, -, *, /, %)  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> <span class="string">"b = <span class="variable">$a</span> = 9"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> <span class="string">"c = <span class="variable">$a</span> * <span class="variable">$a</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$C</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> <span class="string">"d = <span class="variable">$a</span> % 9"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$d</span></span><br></pre></td></tr></table></figure><p>运行为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ex2_5_4.sh</span></span><br><span class="line">19</span><br><span class="line">100</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><br></p><hr><h4 id="获取控制台参数数量"><a href="#获取控制台参数数量" class="headerlink" title="获取控制台参数数量"></a>获取控制台参数数量</h4><p>控制台参数再Shell脚本中会被列为<code>$0</code>, <code>$1</code>, <code>$2</code>一直到<code>$9</code>。<br>作为特殊项，<code>$0</code>会被解析为Shell脚本的名称。<br>如果想要引用第十个或者更多参数，则需要将序号使用括号括起来：<code>${10}</code>, <code>${11}</code>这样，否则命令会被解析为<code>$1</code>和数字的组合。<br><code>$#</code>代表控制台内参数的数量。  </p><p>例如我们有一个Shell脚本如下所示：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"There are <span class="variable">$#</span> arguments"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$3</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$4</span>"</span></span><br></pre></td></tr></table></figure><p>运行脚本后输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ex2_6.sh we are the world</span></span><br><span class="line">There are 4 arguments</span><br><span class="line">./ex2_6.sh</span><br><span class="line">we</span><br><span class="line">are</span><br><span class="line">the</span><br><span class="line">world</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><p>在任何脚本语言中，流程控制都是必不可少的一部分。  </p><h4 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if else语句"></a>if else语句</h4><p>基本的if else语句语法为：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    *perform some action</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>if语句的重点写做fi还有点搞笑。<br>注意了if语句的条件判断，方括号里那个，需要前后带一个空格。注意condition前后离着括号都差一个空格。如果不遵守这个规定会爆语法错误。  </p><p>Shell脚本也有else if功能：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ condition1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"condition 1 met"</span></span><br><span class="line"><span class="keyword">elif</span> [ condition2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"condition 2 met"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"No condition met"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><br></p><hr><p>在上面的语句中，condition的语法条件比较特殊。下面的列表展示了可以当作condition来用的语句：  </p><ul><li>比较字符串</li></ul><p>注意<code>$string1</code>和<code>$string</code>都被双引号引用了，所以在<code>$string1</code>和<code>$string2</code>内即使有空格也可以正确比较内容。  </p><div class="table-container"><table><thead><tr><th style="text-align:center">String comparisons</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:center"><code>[ "$string" ]</code></td><td style="text-align:left">如果<code>$string</code>的长度不为空，则返回true</td></tr><tr><td style="text-align:center"><code>[ -z "$string" ]</code></td><td style="text-align:left">如果<code>$string</code>的长度为空，则返回true</td></tr><tr><td style="text-align:center"><code>[ "$string1" == "$string2" ]</code></td><td style="text-align:left">如果<code>$string1</code>和<code>$string2</code>完全一致，返回true</td></tr><tr><td style="text-align:center"><code>[ "$string1" != "$string2" ]</code></td><td style="text-align:left">如果<code>$string1</code>和<code>$string2</code>不一致，返回true</td></tr><tr><td style="text-align:center"><code>[ "$string1" \&gt; "$string2" ]</code></td><td style="text-align:left">如果<code>$string1</code>按照字母顺序排序排在<code>$string2</code>后面，则返回true</td></tr><tr><td style="text-align:center"><code>[ "$string1" \&lt; "$string2" ]</code></td><td style="text-align:left">如果<code>$string1</code>按照字母顺序排序排在<code>$string2</code>前面，则返回true</td></tr></tbody></table></div><p>注意排序那两个符号前面带转义符。</p><p><br></p><ul><li>比较文件或路径</li></ul><p>可以用来判断文件或者路径的状态。包括但不限于：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">文件检查</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>[ -e $file ]</code></td><td style="text-align:left">如果<code>file</code>存在，返回true</td></tr><tr><td style="text-align:center"><code>[ -f $file ]</code></td><td style="text-align:left">如果<code>file</code>是一个文件，返回true</td></tr><tr><td style="text-align:center"><code>[ -d $file ]</code></td><td style="text-align:left">如果<code>file</code>是一个路径，返回true</td></tr><tr><td style="text-align:center"><code>[ -s $file ]</code></td><td style="text-align:left">如果<code>file</code>的大小&gt;0，返回true</td></tr><tr><td style="text-align:center"><code>[ -r $file ]</code></td><td style="text-align:left">如果<code>file</code>可读，返回true</td></tr><tr><td style="text-align:center"><code>[ -w $file ]</code></td><td style="text-align:left">如果<code>file</code>可写，返回true</td></tr><tr><td style="text-align:center"><code>[ -x $file ]</code></td><td style="text-align:left">如果<code>file</code>可执行，返回true</td></tr></tbody></table></div><p><br></p><hr><ul><li>比较数字</li></ul><p>虽然shell里只有字符串一种变量，但我们也可以按下面的方式来比较数字：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">数字比较</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>[ $a -eq $b ]</code></td><td style="text-align:left">如果a = b，返回true (equal)</td></tr><tr><td style="text-align:center"><code>[ $a -ne $b ]</code></td><td style="text-align:left">如果a != b，返回true (not equal)</td></tr><tr><td style="text-align:center"><code>[ $a -lt $b ]</code></td><td style="text-align:left">如果a &lt; b，返回true (less than)</td></tr><tr><td style="text-align:center"><code>[ $a -le $b ]</code></td><td style="text-align:left">如果a &lt;= b，返回true (less or equal)</td></tr><tr><td style="text-align:center"><code>[ $a -gt $b ]</code></td><td style="text-align:left">如果a &gt; b，返回true (greater than)</td></tr><tr><td style="text-align:center"><code>[ $a -ge $b ]</code></td><td style="text-align:left">如果a &gt;= b，返回true (greater or equal)</td></tr></tbody></table></div><p>还是比较好记的</p><p><br></p><p>例如我们想要写一个小脚本，询问用户想不想要移除所有后缀为<code>.cpp</code>的文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Do you want to remove all .cpp files? (Y/N)"</span></span><br><span class="line"><span class="built_in">read</span> ans =</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$ans</span>"</span> == <span class="string">"Y"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">rm</span> -rf *.cpp</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"All .cpp files are removed!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>尤其注意一下if语句带condition的空格问题。留意一下空格都加在哪里了。  </p><p>运行为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Do you want to remove all .cpp files? (Y/N)</span><br><span class="line">Y</span><br><span class="line">All .cpp files are removed!</span><br></pre></td></tr></table></figure><p><br></p><hr><p>学会了？接下来举几个例子：  </p><p><strong>Example 1</strong>  </p><p>如果g++在编译c++文件时出现了错误，则编译失败，可执行文件将不会生成。所以我们可以使用<code>[ -e file ]</code>来检查文件是否存在。<br>同时，我们也可以考虑一下是不是可以查看一下编译失败的log?  </p><p>比如我们可以使用重定向方法来存储错误log：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ hello.cpp -o hello 2&gt; error.txt</span></span><br></pre></td></tr></table></figure><p>别忘了<code>2&gt;</code>代表重定向标准错误。  </p><p>那么看看这个shell脚本吧：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -e hello.cpp ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"hello.cpp exist"</span></span><br><span class="line">    g++ hello.cpp -o hello 2&gt; error.txt</span><br><span class="line">    <span class="keyword">if</span> [ -e hello ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        ./hello</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Compilation failed!"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Here are the error message"</span></span><br><span class="line">        <span class="built_in">cat</span> error.txt</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"hello.cpp not found!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>如果<code>hello.cpp</code>包含语法错误，那么下面就是其中一种可能的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hello,cpp exist</span><br><span class="line">Compilation failed!</span><br><span class="line">Here are the error message</span><br><span class="line">hello.cpp: In function 'int main()':</span><br><span class="line">hello.cpp:5:5: error: expected ';' before 'return'</span><br><span class="line">     return 0;</span><br><span class="line">     ^~~~~~</span><br></pre></td></tr></table></figure><p><br></p><hr><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>for循环可以按照指定次数循环。  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">list=<span class="string">"1 2 3 4 5"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$list</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"This is iteration <span class="variable">$i</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>for循环以<code>for i in []</code>开始，需要执行的命令以<code>do</code>和<code>done</code>括起来。  </p><p>例如上面的脚本会被运行为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is iteration 1</span><br><span class="line">This is iteration 2</span><br><span class="line">This is iteration 3</span><br><span class="line">This is iteration 4</span><br><span class="line">This is iteration 5</span><br></pre></td></tr></table></figure><p><br></p><hr><p>实际上除了遍历数组，我们也可以遍历一个路径中的文件。<br>比如下面的脚本将会自动将你路径下所有的<code>.cpp</code>文件记录一个备份：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">list=<span class="string">"`ls *.cpp`"</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> <span class="variable">$list</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">cp</span> <span class="variable">$fileName</span> <span class="string">"<span class="variable">$fileName</span>.backup"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">a.cpp  backup.sh*  b.cpp  c.cpp</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./backup.sh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">a.cpp  a.cpp.backup  backup.sh*  b.cpp  b.cpp.backup  c.cpp  c.cpp.backup</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="有用的操作"><a href="#有用的操作" class="headerlink" title="有用的操作"></a>有用的操作</h3><h4 id="在脚本中隐藏命令"><a href="#在脚本中隐藏命令" class="headerlink" title="在脚本中隐藏命令"></a>在脚本中隐藏命令</h4><p>Shell脚本会生成自己的错误和输出信息，有时会引爆你的shell脚本输出。  </p><p>为了解决这一点你可以使用之前的重定向方法：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> file123 fileabc 1&gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="keyword">if</span> [ -e fileabc ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Copy successful"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span>: Oops. Copy failed :("</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>解析一下，<code>1&gt;/dev/null</code>用来将<code>cp</code>命令的标准输出重定向到系统回收站内<code>/dev/null</code>。挺巧妙的。  </p><p><code>2&gt;&amp;1</code>则会重定向<code>cp</code>命令的标准错误到同一个位置，只不过我们以<code>&amp;1</code>表示了。  </p><p><code>&amp;</code>表示在这里指的是文件描述符，而不是文件名或路径。如果没有<code>&amp;</code>，像<code>2&gt;1</code>这样的命令将无效，因为shell会尝试将<code>1</code>解释为文件名，而不是标准输出文件描述符。  </p><p>输出为：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ex4_1.sh</span></span><br><span class="line">./ex4_1.sh: Oops. Copy failed :(</span><br></pre></td></tr></table></figure><p><br></p><hr><h4 id="输出到标准错误"><a href="#输出到标准错误" class="headerlink" title="输出到标准错误"></a>输出到标准错误</h4><p>Shell脚本也可以通过<code>echo</code>命令输出到标准错误中：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> file123 fileabc 1&gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="keyword">if</span> [ -e fileabc ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Copy successful"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$0</span>: Oops. Copy failed :("</span> &gt;&amp;2</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>当<code>echo</code>后面跟着<code>&gt;&amp;2</code>时候，则代表我们将该条信息重定向到标准错误层上进行输出了。接下来如果我们执行这个：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ex4_2.sh 2&gt; error.txt</span></span><br></pre></td></tr></table></figure><p>就可以在”error.txt”中看见我们的错误输出了！  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> error.txt</span></span><br><span class="line">./ex2_6.sh: Oops. Copy failed :(</span><br></pre></td></tr></table></figure><p>经过这两步处理后你的shell脚本的输出看起来就像其他shell命令一样了。  </p><hr><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>在版本控制这一部分，我们主要学习如何使用Git。  </p><p>Git 是一种常见的现代版本控制系统，用于管理和跟踪计算机文件中的更改以及协调多人对这些文件的工作。主要用于软件开发中的源代码管理。<br>Git 是一种分布式版本控制系统 (DVCS)，与大多数替代版本控制系统相比，它具有更高的性能、安全性和灵活性。  </p><p>那么什么是版本控制系统？  </p><p>版本控制系统 (VCS) 是一类软件工具，支持软件开发团队管理源代码随时间的变化。<br>它在一种特殊的数据库中跟踪每个贡献者对代码的单独更改历史记录。如果出现错误或需要修复错误，开发人员可以返回到源代码的早期版本来解决问题，而不会妨碍其他团队成员的工作流程。<br>如果软件团队不使用 VCS，他们可能会遇到一些问题，例如在项目的两个独立部分之间创建不兼容的代码或对用户可用的更改一无所知。  </p><p>在这么多版本控制解决方案中，使用Git的原因是它让开发人员可以在一个地方查看任何项目的变更、决策和进展的整个时间线。<br>借助 Git 这样的 DVCS，可以随时进行协作，同时保持源代码的完整性。使用分支，开发人员可以安全地对生产代码提出更改建议。  </p><p>如果你用过Github，你应该对上述这些内容和下面将要讲到的内容比较熟悉。如果不，那么这一节将会很有意思。  </p><p><br></p><p>Git的使用工作流基本分三步。  </p><ol><li><code>git init</code>初始化工作目录  </li></ol><p>首先可以使用Git初始化一个你将要使用的工作目录。Git会尝试在目录内跟踪你对文件的改变。  </p><ol><li><code>git add</code>增加一次提交  </li></ol><p>这一步告诉Git，当前目录下所有被更改的文件有哪些。  </p><ol><li><code>git commit</code>创建一次提交(commit)</li></ol><p>最后告诉Git让它创建一次提交，类似于创建一个存档点。每一次提交就是某个特定版本。  </p><p><br></p><hr><h3 id="开始使用Git"><a href="#开始使用Git" class="headerlink" title="开始使用Git"></a>开始使用Git</h3><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>要使用Git，我们需要先配置好Git的使用环境。首先我们需要在你的电脑上安装Git。  </p><p>检查Git是否在你的电脑上安装，执行<code>git version</code>即可：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git version</span></span><br><span class="line">git version 2.45.2.windows.1</span><br></pre></td></tr></table></figure><p>如果没有安装Git，则你可以根据下面的步骤来安装Git。  </p><p><br></p><p><strong>在Linux上安装</strong>  </p><p>在终端执行几行代码就OK了：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get update</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get upgrade</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo apt-get install git</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>在MacOS上安装</strong></p><p>虽然我不用Mac但是相应的安装方式也是可以提一嘴的。  </p><p>首先下载Homebrew来更方便快捷的安装软件：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ruby -e <span class="string">"<span class="subst">$(curl -fsSL</span></span></span></span><br><span class="line">   https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string"><span class="subst">brew doctor</span></span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="string"><span class="subst">brew install git</span></span></span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>在Windows上安装</strong></p><p>直接去官网下载安装包即可。  </p><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p><br></p><hr><h4 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h4><p>一个Git仓库包含你工作环境的所有文件，文件夹或者路径等等。配置好Git后Git会自动帮你管理变更。  </p><p>一共有两种方式来初始化一个本地仓库。你可以从网上clone一个仓库下来，也可以自己创建一个空白仓库使用。  </p><p><br></p><p><strong>初始化新仓库</strong></p><ol><li>打开终端并转到你想要初始化的路径：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> project</span></span><br></pre></td></tr></table></figure><ol><li>在文件夹内我们使用<code>git init</code>命令创建一个新仓库：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br><span class="line">Initialized empty Git repository in /home/research/ra/1801/cklai/project/.git/</span><br></pre></td></tr></table></figure><p>执行完这行命令后，一个新的<code>.git/</code>子路径会在当前路径下生成。这个指令用来设置好Git用来跟踪你的文件的所有前置工作。  </p><ol><li>现在我们可以使用Git了。比如说下一步我们创建一个”work.txt”： </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Welcome to my Git tutorial.</span><br><span class="line">Today we will learn how to get started with Git.</span><br></pre></td></tr></table></figure><p><code>git init</code>还有其他的一些可选变体可以使用：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>git init</code></td><td style="text-align:left">创建新的本地仓库</td></tr><tr><td style="text-align:center"><code>git init --quiet</code><br>or<br><code>git init -q</code></td><td style="text-align:left">静默模式，仅输出重要信息，警告和错误。</td></tr><tr><td style="text-align:center"><code>git init --bare</code></td><td style="text-align:left">创建一个裸仓库。<br>裸仓库没有工作目录，因此不能在上面进行实际的编辑和修改文件的操作，仅仅是用来存储并共享版本控制的历史记录。</td></tr><tr><td style="text-align:center"><code>git init --template=&lt;template_directory&gt;</code></td><td style="text-align:left">给本地仓库指定一个模板</td></tr><tr><td style="text-align:center"><code>git init --separate-git-dir=&lt;git dir&gt;</code></td><td style="text-align:left">创建一个包含具体工作目录路径的文本文档</td></tr></tbody></table></div><p><br></p><hr><p><strong>clone新仓库</strong></p><p>或者你也可以从网上拉取一个新仓库下来。  </p><ol><li>如果你想使用其他人的仓库，你可以直接从代码托管平台上clone一个仓库到你的本地。Github就是全球最大的代码托管平台。  </li></ol><blockquote><p><strong>注意注意↑！</strong><br>如果存在<code>.git</code>路径，那么你的仓库就会被拉取到那里。如果没有，则仓库会被clone到你的当前工作路径。  </p></blockquote><ol><li>输入clone命令即可从网上拉取仓库：  </li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/[YourUsername]/[YourRepository]</span><br><span class="line">Cloning into `Spoon-Knife`...</span><br><span class="line">remote: Counting objects: 10, done.</span><br><span class="line">remote: Compressing objects: 100% (8/8), done.</span><br><span class="line">remove: Total 10 (delta 1), reused 10 (delta 1)</span><br><span class="line">Unpacking objects: 100% (10/10), done.</span><br></pre></td></tr></table></figure><p>同样的这里有一些<code>git clone</code>的附加变体：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>git clone --branch &lt;branch_name&gt;</code></td><td style="text-align:left">告诉Git你想要拉取的分支是哪一条。有关分支后面再说</td></tr><tr><td style="text-align:center"><code>git clone --bare</code></td><td style="text-align:left">将仓库以裸仓库的形式拉取下来</td></tr><tr><td style="text-align:center"><code>git clone --mirror</code></td><td style="text-align:left">clone远程存储库的所有扩展引用，并隐式调用 -bare 参数</td></tr><tr><td style="text-align:center"><code>git clone --template=&lt;template_directory&gt; &lt;repo_location&gt;</code></td><td style="text-align:left">clone位于<code>&lt;repo location&gt;</code>的仓库，并应用来自<code>&lt;template_directory&gt;</code>的仓库模板</td></tr></tbody></table></div><p><br></p><hr><h4 id="查看工作路径"><a href="#查看工作路径" class="headerlink" title="查看工作路径"></a>查看工作路径</h4><p>当你在当前工作路径内工作时，你也可以使用<code>git status</code>命令来查看当前工作目录版本情况的信息：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master </span><br><span class="line"> </span><br><span class="line">No commits yet </span><br><span class="line"> </span><br><span class="line">Untracked files: </span><br><span class="line">  (use "git add &lt;file&gt;..." to include in what will be committed) </span><br><span class="line"> </span><br><span class="line">        work.txt </span><br><span class="line"> </span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br></pre></td></tr></table></figure><p>注意到在Untracked files下存在”work.txt”，这代表这个文本文档被Git可见，但是Git没有开始追踪这个文档的任何更改。解决这个问题我们需要向Git生命暂存更改。  </p><p><br></p><hr><h4 id="暂存更改"><a href="#暂存更改" class="headerlink" title="暂存更改"></a>暂存更改</h4><p>为了让 Git 开始跟踪你在工作目录中所做的更改，你需要先将这些文件添加到暂存区。<br>这可以通过使用命令<code>git add &lt;filename&gt;</code>来完成，其中<code>&lt;filename&gt;</code>是您正在处理的文件的名称，例如我们的”work.txt”文件。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add work.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master </span><br><span class="line"> </span><br><span class="line">No commits yet </span><br><span class="line"> </span><br><span class="line">Changes to be committed: </span><br><span class="line">  (use "git rm --cached &lt;file&gt;..." to unstage) </span><br><span class="line"> </span><br><span class="line">        new file:   work.txt</span><br></pre></td></tr></table></figure><p>现在”work.txt”已被加入暂存目录。</p><p><br></p><p><code>git add</code>的一些额外变体：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>git add .</code></td><td style="text-align:left">将当前目录下所有文件添加到暂存区</td></tr><tr><td style="text-align:center"><code>git add -A</code><br>or<br><code>git add --all</code></td><td style="text-align:left">查找整个项目中存在的所有新文件或更新文件，并将其添加到暂存区</td></tr></tbody></table></div><p><br></p><hr><h4 id="跟踪工作目录中文件变化"><a href="#跟踪工作目录中文件变化" class="headerlink" title="跟踪工作目录中文件变化"></a>跟踪工作目录中文件变化</h4><p>现在我们在”work.txt”新增第三行： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Welcome to my Git tutorial.</span><br><span class="line">Today we will learn how to get started with Git.</span><br><span class="line">We start with the Basic Git Workflow.</span><br></pre></td></tr></table></figure><p>想要查看暂存区和工作目录中同一个文件的区别，我们完全可以使用<code>git diff &lt;filename&gt;</code>命令来查看区别： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff work.txt</span> </span><br><span class="line">diff --git a/work.txt b/work.txt </span><br><span class="line">index 90ac5e6..f0f679f 100644 --- a/work.txt </span><br><span class="line">+++ b/work.txt </span><br><span class="line">@@ -1,2 +1,3 @@ </span><br><span class="line">Welcome to my Git tutorial. </span><br><span class="line">Today we will learn how to get started with Git. </span><br><span class="line">+We start with the Basic Git Workflow.</span><br></pre></td></tr></table></figure><p>可以在最后一行看出，Git已经成功登记了文件的更改。如果想要将当前的状态加入暂存，随时可以执行<code>git add work.txt</code>命令。  </p><p>下面是一些<code>git diff</code>命令的变体： </p><div class="table-container"><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:left">名称</th></tr></thead><tbody><tr><td style="text-align:center"><code>git diff --base &lt;filename&gt;</code></td><td style="text-align:left">查看与基础文件的冲突</td></tr><tr><td style="text-align:center"><code>git diff &lt;sourcebranch&gt; &lt;targetbranch&gt;</code></td><td style="text-align:left">在合并更改之前预览变更</td></tr></tbody></table></div><p>如果<code>git diff</code>的输出过长，则Git会使用分页器显示内容。在这种情况下我们可以按Q来退出分页器。<br>你也可以在参数中添加<code>--no-pager</code>告诉Git不要使用pager。这个设置对于绝大多数的Git命令都可以使用。  </p><p><br></p><hr><h4 id="提交更改"><a href="#提交更改" class="headerlink" title="提交更改"></a>提交更改</h4><p>从暂存区存到仓库我们需要使用<code>git commit</code>来提交我们所做的所有更改，建立一个存档。  </p><p><code>git commit</code>在使用时需要跟一个参数<code>-m</code>，用来写入你这次更改的内容注释： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">"Added an introduction."</span></span></span><br><span class="line">[master (root-commit) 8327731] Added an introduction. </span><br><span class="line">    Committer: Chan Tai Man &lt;tmchan@academy11.cs.hku.hk&gt; </span><br><span class="line">Your name and email address were configured automatically based </span><br><span class="line">on your username and hostname. Please check that they are accurate. </span><br><span class="line">You can suppress this message by setting them explicitly. Run the </span><br><span class="line">following command and follow the instructions in your editor to edit </span><br><span class="line">your configuration file: </span><br><span class="line"> </span><br><span class="line">    git config --global --edit </span><br><span class="line"> </span><br><span class="line">After doing this, you may fix the identity used for this commit with: </span><br><span class="line"> </span><br><span class="line">    git commit --amend --reset-author </span><br><span class="line"> </span><br><span class="line"> 1 file changed, 3 insertions(+) </span><br><span class="line"> create mode 100644 work.txt</span><br></pre></td></tr></table></figure><p>请注意上面有关您的姓名和电子邮件地址配置的消息，实际上你可以按照说明对配置文件进行相应的更改。</p><p>始终输入有意义的提交消息，是程序员们的基本操作之一。这对你后期的开发有非常大的帮助，同时对别人也是。  </p><p><br></p><p>使用<code>git log</code>命令可以查看比较旧版本的项目：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span></span><br><span class="line">commit 8327731fa6a9108fb6b54d0b38b9b59c7fbf316c (HEAD -&gt; master) </span><br><span class="line">Author: Chan Tai Man &lt;tmchan@academy11.cs.hku.hk&gt; </span><br><span class="line">Date:   Mon Jan 14 10:38:43 2019 +0800 </span><br><span class="line"> </span><br><span class="line">    Added an introduction.</span><br></pre></td></tr></table></figure><p>在每个log中会提供如下四个信息：  </p><ul><li>40字长的哈希码，我们叫SHA。这是每个commit的唯一识别码 </li><li>提交的作者，也就是你自己</li><li>提交的时间和日期</li><li>提交消息</li></ul><p><br></p><hr><h3 id="与他人合作"><a href="#与他人合作" class="headerlink" title="与他人合作"></a>与他人合作</h3><h4 id="使用分支系统"><a href="#使用分支系统" class="headerlink" title="使用分支系统"></a>使用分支系统</h4><p>分支可以看作是指向 Git 存储库中最新提交的指针。<br>当我们初始化存储库时，我们正在处理一个称为<code>master</code>分支的单个分支。我们正在处理的提交称为<code>HEAD</code>，通常是分支的最新提交。  </p><p>你可以在某个commit节点创建一个分支。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBed6b622ab401c9305753c7e2623a767f?method=download&amp;shareKey=b90b1091d05ac2a4898119d43ae308e9" alt=""></p><p>可以看一下上面这张图。这是一个正在开发的项目的Git图表。每一条线代表一个分支，每一个点代表一个commit。  </p><p>可以看到橙色的那条线从粉红色分支的一个commit拉出，经过一系列的更改，最后在上面的一个commit合并到粉红色分支。这两个粉红色commit之间区别在于并入了整个橙色分支的内容。  </p><p>要在当前commit拉出一个分支，可以使用<code>git branch BugFix</code>命令：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch BugFix</span></span><br></pre></td></tr></table></figure><p>拉出分支成功后当前工作分支还是在<code>master</code>上。切换到刚拉出来的<code>BugFix</code>分支我们需要：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout BugFix</span></span><br><span class="line">Switched to branch 'BugFix'</span><br></pre></td></tr></table></figure><p><br></p><hr><p>我们也可以使用<code>checkout</code>命令将 HEAD 移至上一个提交。<br>如果这样做，我们也会恢复此提交中文件的状态。例如，我们可以移动到提交 BugFix^，这是分支 BugFix 中的上一个提交。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout BugFix^</span></span><br><span class="line">Note: checking out 'BugFix^'.</span><br><span class="line"></span><br><span class="line">You are in 'detached HEAD' state. You can look around, make experimental </span><br><span class="line">changes and commit them, and you can discard any commits you make in this </span><br><span class="line">state without impacting any branches by performing another checkout. </span><br><span class="line"> </span><br><span class="line">If you want to create a new branch to retain commits you create, you may </span><br><span class="line">do so (now or later) by using -b with the checkout command again. Example: </span><br><span class="line"> </span><br><span class="line">  git checkout -b &lt;new-branch-name&gt; </span><br><span class="line"> </span><br><span class="line">HEAD is now at 8327731 Added an introduction.</span><br></pre></td></tr></table></figure><p>想要移动一个特定的分支，那就用<code>git log</code>吧。  </p><p>下面是一些用于分支的可用命令：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:center">释义</th></tr></thead><tbody><tr><td style="text-align:left"><code>git branch</code></td><td style="text-align:center">列出所有分支</td></tr><tr><td style="text-align:left"><code>git branch branchname</code></td><td style="text-align:center">创建一个分支</td></tr><tr><td style="text-align:left"><code>git checkout branchname</code></td><td style="text-align:center">切换到分支</td></tr><tr><td style="text-align:left"><code>git checkout -b branchname</code></td><td style="text-align:center">创建并切换到分支</td></tr><tr><td style="text-align:left"><code>git branch -m branchname new_branchname</code></td><td style="text-align:center">重命名分支</td></tr><tr><td style="text-align:left"><code>git branch --merged</code></td><td style="text-align:center">显示所有与当前分支合并过的分支</td></tr><tr><td style="text-align:left"><code>git branch -d branchname</code></td><td style="text-align:center">删除合并完成的分支</td></tr><tr><td style="text-align:left"><code>git branch -D branch_to_delete</code></td><td style="text-align:center">删除未合并的分支</td></tr></tbody></table></div><p><br></p><hr><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p>用刚才的那张图做例子，橙色分支最后并入到了粉红色分支上，并入操作我们叫做(merge).  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout master</span></span><br><span class="line">Switched to branch 'master'</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">"This is some new file in master."</span> &gt; master.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add master.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">"Added master.txt"</span></span></span><br><span class="line">[master 832ceba] Added master.txt </span><br><span class="line"> 1 file changed, 1 insertions(+) </span><br><span class="line"> create mode 100644 master.txt</span><br></pre></td></tr></table></figure><p>接下来我们在BugFix分支上也添加一个新文件：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout BugFix</span></span><br><span class="line">Switched to branch 'BugFix'</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">"This is some new file in BugFix"</span> &gt; bugfix.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add bugfix.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">"Added bugfix.txt"</span></span></span><br><span class="line">[BugFix ed600da] Added bugfix.txt </span><br><span class="line"> 1 file changed, 1 insertions(+) </span><br><span class="line"> create mode 100644 bugfix.txt</span><br></pre></td></tr></table></figure><p>我们可以选择向<code>BugFix</code>分支并入<code>master</code>，也可以向<code>master</code>并入<code>BugFix</code>。但是我们可以选择前者，因为这样我们就可以在不干扰<code>master</code>分支的前提下验证bug修复是否有用。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout BugFix</span></span><br><span class="line">Already on 'BugFix'</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge master -m <span class="string">"Apply changes in master"</span></span></span><br><span class="line">Merge made by the 'recursive' strategy. </span><br><span class="line"> master.txt | 1 + </span><br><span class="line"> 1 file changed, 1 insertion(+) </span><br><span class="line"> create mode 100644 master.txt </span><br></pre></td></tr></table></figure><p>如果在<code>master</code>分支下出现了会影响到<code>BugFix</code>的更改，则会出现文件冲突。这时Git就会提示你解决冲突。  </p><p>现在假设我们发现修复没啥问题可以直接并入<code>master</code>，则我们可以直接快进并入，叫做”fast foward”。<br>这一步不会创建任何commit。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout master</span></span><br><span class="line">Switched to branch 'master'</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge BugFix</span></span><br><span class="line">Fast-forward</span><br><span class="line"> bugfix.txt | 1 + </span><br><span class="line"> 1 file changed, 1 insertion(+) </span><br><span class="line"> create mode 100644 bugfix.txt </span><br></pre></td></tr></table></figure><p>下面是一些<code>merge</code>命令的变体：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:left"><code>git merge branchname</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:left"><code>git merge --ff-only branchname</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:left"><code>git merge --no-ff branchname</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:left"><code>git merge --abort</code></td><td style="text-align:center"></td></tr><tr><td style="text-align:left"><code>git cherry-pick 073791e7</code></td></tr></tbody></table></div><p><br></p><hr><h4 id="在远程仓库上工作"><a href="#在远程仓库上工作" class="headerlink" title="在远程仓库上工作"></a>在远程仓库上工作</h4><p>目前为止我们只在本地仓库上作法。 如果你想要加入任何在线的Git项目，你需要去了解如何管理远程仓库。  </p><p>使用<code>git remote</code>命令来查看目前所有的远程仓库，<code>git remote -v</code>命令允许你去查看这些远程仓库的URL：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/schacon/ticgit</span></span><br><span class="line">Cloning into 'ticgit'...</span><br><span class="line">remote: Enumerating objects: 1857, done. </span><br><span class="line">remote: Total 1857 (delta 0), reused 0 (delta 0), pack-reused 1857 </span><br><span class="line">Receiving objects: 100% (1857/1857), 334.04 KiB | 395.00 KiB/s, done. </span><br><span class="line">Resolving deltas: 100% (837/837), done. </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ticgit</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote</span> </span><br><span class="line">origin </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span> </span><br><span class="line">origin  https://github.com/schacon/ticgit (fetch) </span><br><span class="line">origin  https://github.com/schacon/ticgit (push)</span><br></pre></td></tr></table></figure><p><br></p><p>想要添加远程仓库，你可以使用<code>git remote add &lt;shortname&gt; &lt;URL&gt;</code>命令：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add pb https://github.com/paulboone/ticgit</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote</span> </span><br><span class="line">origin </span><br><span class="line">pb</span><br></pre></td></tr></table></figure><p><br></p><p>或者如果你想查看一个远程仓库的信息，就使用<code>git remote show &lt;remote&gt;</code>：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote show origin</span> </span><br><span class="line">* remote origin </span><br><span class="line">  Fetch URL: https://github.com/schacon/ticgit </span><br><span class="line">  Push  URL: https://github.com/schacon/ticgit </span><br><span class="line">  HEAD branch: master </span><br><span class="line">  Remote branches: </span><br><span class="line">    master tracked </span><br><span class="line">    ticgit tracked </span><br><span class="line">  Local branch configured for 'git pull': </span><br><span class="line">    master merges with remote master </span><br><span class="line">  Local ref configured for 'git push': </span><br><span class="line">    master pushes to master (up to date)</span><br></pre></td></tr></table></figure><p>下面有一些有关远程仓库的命令和变体：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:center">释义</th></tr></thead><tbody><tr><td style="text-align:left"><code>git remote</code></td><td style="text-align:center">查看远程仓库配置</td></tr><tr><td style="text-align:left"><code>git remote -v</code></td><td style="text-align:center">带着URL查看远程仓库配置</td></tr><tr><td style="text-align:left"><code>git remote add &lt;shortname&gt; &lt;URL&gt;</code></td><td style="text-align:center">添加远程仓库</td></tr><tr><td style="text-align:left"><code>git remote rm &lt;shortname&gt;</code></td><td style="text-align:center">删除在本地记录的远程仓库</td></tr><tr><td style="text-align:left"><code>git remote rename &lt;old-name&gt; &lt;new-name&gt;</code></td><td style="text-align:center">重命名在本地记录的远程仓库</td></tr><tr><td style="text-align:left"><code>git branch --merged</code></td><td style="text-align:center">显示所有与当前分支合并过的分支</td></tr><tr><td style="text-align:left"><code>git branch -d branchname</code></td><td style="text-align:center">删除合并完成的分支</td></tr><tr><td style="text-align:left"><code>git branch -D branch_to_delete</code></td><td style="text-align:center">删除未合并的分支</td></tr></tbody></table></div><p><br></p><hr><h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><p>当你在本地对远程仓库做出了更改，并且想要远程仓库同步你本地的版本，就可以使用<code>git push</code>将本地的代码推送到远程仓库。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin master</span></span><br></pre></td></tr></table></figure><p>此命令仅在您从具有写入权限的服务器克隆且在此期间无人推送时才有效。<br>如果你和其他人同时克隆，并且他们推送上游，然后您推送上游，您的推送将被拒绝。<br>这种情况下必须先获取他们的工作并将其合并到当前版本的工作中，然后才允许推送。  </p><div class="table-container"><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:center">释义</th></tr></thead><tbody><tr><td style="text-align:left"><code>git push &lt;remote&gt; &lt;branch&gt;</code></td><td style="text-align:center">将某个特定分支推送同步到远程仓库</td></tr><tr><td style="text-align:left"><code>git push &lt;remote&gt; --force</code></td><td style="text-align:center">和上面一样，但是本命令会强制将本地推送到远程仓库</td></tr><tr><td style="text-align:left"><code>git push &lt;remote&gt; -all</code></td><td style="text-align:center">将本地所有分支推送同步到远程仓库</td></tr><tr><td style="text-align:left"><code>git push &lt;remote&gt; --tags</code></td><td style="text-align:center">将所有的本地标签推送到远程仓库</td></tr></tbody></table></div><p><br></p><hr><h4 id="从远程仓库拉取"><a href="#从远程仓库拉取" class="headerlink" title="从远程仓库拉取"></a>从远程仓库拉取</h4><p>有点像是下载，也可以算是同步。本命令基本上用来以远程仓库为基准，更新本地仓库。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:center">释义</th></tr></thead><tbody><tr><td style="text-align:left"><code>git pull &lt;remote&gt;</code></td><td style="text-align:center">将远程仓库的内容同步到本地仓库</td></tr><tr><td style="text-align:left"><code>git pull --no-commit &lt;remote&gt;</code></td><td style="text-align:center">从远程仓库拉取，但是不在本地创建提交</td></tr><tr><td style="text-align:left"><code>git pull --verbose</code></td><td style="text-align:center">从远程仓库拉取时返回verbose内容</td></tr></tbody></table></div><p><br></p><hr><h1 id="Module-3-C-Basics"><a href="#Module-3-C-Basics" class="headerlink" title="Module 3: C++ Basics"></a>Module 3: C++ Basics</h1><p>在这门课中我们要接触一门全新的语言：C++。  </p><p>我不想过多介绍有关环境配置和其他的内容，一方面是ENGG1340已经为我们提供了可以直接使用的Linux环境，内置gcc，而在Windows系统上的C++环境配置也不复杂。有需要的自己上网一搜就行。</p><p>东西挺多所以我决定每一部分写的少一点，尽可能概括到所有需要掌握的知识点。 </p><p><br></p><hr><h2 id="C-基本语法和程序结构"><a href="#C-基本语法和程序结构" class="headerlink" title="C++基本语法和程序结构"></a>C++基本语法和程序结构</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>我们先从最简单的开始说起吧：  </p><p>在程序中插入一段注释，只需要使用双斜杠<code>//</code>就可以达到你的目的：  </p><p>例如在下面的程序中：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一段注释</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"Hello, World!"</span>; <span class="comment">//这行用来输出文本</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p><p>注释行在进行编译的时候，会被编译器忽略。大胆地在程序里写下你的注释吧，你也不希望回头看不懂你自己写的程序吧。  </p><p><br></p><hr><h3 id="头文件引用"><a href="#头文件引用" class="headerlink" title="头文件引用"></a>头文件引用</h3><p>在上面的程序中，你会发现第一行是一个由井号开头，看起来和程序没有任何关系的一行。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure><p>这一行实际上引用了我们要在程序中使用到的头文件。你可以类比为我们要使用到一个叫做<code>iostream</code>的工具箱。  </p><p><code>#include</code>指令在这里用来将预先编写的代码（库）引入到程序中，这些库包含我们可以使用的有用函数和工具。  </p><p>至于后面的<code>&lt;iostream&gt;</code>，是一个处理输入和输出的标准 C++ 库。这个库为我们提供了在屏幕上显示内容（输出）和从用户那里获取信息（输入）的工具。<br>具体来说，它为我们提供了 <code>cout</code>命令。  </p><p>也就是说如果我们移除程序中的这一行，程序就不知道<code>cout</code>是什么东西了。</p><p>怎么提供呢？实际上方法非常暴力：编译器在将要编译文件时，会找到你引用的这些头文件，然后将其粘贴到文件的开头…</p><hr><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a><code>main</code>函数</h3><p><code>main</code>函数是任何C++程序的切入点 (Starting Point)。大概的意思是，编译器在编译该文件时，会默认从main开始往下读。  </p><p><code>main</code>函数的结构可以像是是这样：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 我们想要写的任何code</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul><li><code>int main()</code>定义了主函数。<code>int</code>的意思代表该函数会返回一个整型值。  </li><li><code>{  }</code>这个花括号是主函数的主体 (Body)。 我们在主函数的主题内写到的任何命令，就在主函数要执行的范畴之内。</li><li><code>return 0;</code>这一行一般代表我们的程序已经执行完毕。在C++中，在这种情况下返回<code>0</code>是一个约定。</li></ul><p><br></p><hr><p>现在你知道了这些内容，我们再回头解答一下一开始写的那个程序干了什么： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{ <span class="comment">// 主函数从这里开始</span></span><br><span class="line">  std::cout &lt;&lt; <span class="string">"Hello, World!"</span>; <span class="comment">// 你写的code</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 程序在这里成功执行完毕</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>冷知识，如果你把你的主函数写成这样： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="comment">// 啥也不写</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>程序不会报错，只是主函数刚开始执行就结束了。类似于你定义了一个新房子，但是房子里面什么也没有（  </p><p><br></p><hr><h3 id="基本输入输出"><a href="#基本输入输出" class="headerlink" title="基本输入输出"></a>基本输入输出</h3><p>实际上刚才已经接触过一点点了，这里我们系统性讲解一下：  </p><p><strong><code>cout</code>（输出）</strong></p><p>类似控制台输出。用来将内容输出到控制台的屏幕上：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; <span class="string">"Hello!"</span>;  <span class="comment">// 在屏幕上输出"Hello!"</span></span><br><span class="line">std::cout &lt;&lt; <span class="number">123</span>;       <span class="comment">// 输出数字 123</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">"The answer is: "</span> &lt;&lt; <span class="number">42</span>; <span class="comment">// 输出 "The answer is: 42"</span></span><br></pre></td></tr></table></figure><p>我们涉及到了左移<code>&lt;&lt;</code>运算符。把它类比于插入操作就行。</p><p>同样的有输出就少不了输入：  </p><p><strong><code>cin</code> (输入)</strong></p><p>这边就类比于控制台输入了。语句会读取用户在控制台输入的内容：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> age;</span><br><span class="line">std::cout &lt;&lt; <span class="string">"Please enter your age: "</span>;</span><br><span class="line">std::cin &gt;&gt; age; <span class="comment">// 等待用户输入内容后按下回车</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">"You are "</span> &lt;&lt; age &lt;&lt; <span class="string">" years old."</span>;</span><br></pre></td></tr></table></figure><p>上面是一个非常简单的小程序，首先输出文字提示用户输入内容，然后读取用户输入的内容到变量age中，最后输出。  </p><p>同样涉及到了右移<code>&gt;&gt;</code>运算符。与左移相反，把这类比于提取操作就ok。  </p><hr><p><em>有关命名空间</em></p><p>Namespace，或者叫命名空间，在上面的程序中使用<code>std::</code>进行表示。<br>现在我们先不过多讨论这一部分，而是先记住在<code>cin</code>和<code>cout</code>之前，带着<code>std::</code>命名空间声明就好。</p><p><br></p><hr><p>下面是一个用到上述所有内容，编写的一个简单的问好小程序：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    std::string name; <span class="comment">// 定义一个叫做"name"的变量</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">"Please enter your name: "</span>;</span><br><span class="line">    std::cin &gt;&gt; name; <span class="comment">// 读取用户输入，存储到name中</span></span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">"Hello, "</span> &lt;&lt; name &lt;&lt; <span class="string">"!"</span>; <span class="comment">// 输出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在你可以试试编译这个程序并运行。程序会首先输出”Please enter your name: “。输入任何文本后回车，程序会输出一段向你问好的语句。  </p><p><code>std::string name</code>定义了一个类型为<code>string</code>的变量。有关变量的内容马上就来。  </p><p><br></p><hr><h3 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h3><p>正如你所想的那样，变量就像是一个容器，可以用来存储信息。而数据类型则是定义了一个容器会存储什么样的信息。  </p><p>每一个变量都会有一个名称，这个名称是你作为用户定义的。同时你也必须要声明该变量的数据类型。  </p><p>数据类型用来声明该变量存储了了什么类型的数据。下面是一些常见的数据类型： </p><ul><li><strong><code>int</code> (整数)</strong>：顾名思义，用来存储整数。例如”-1”, “0”, “5”, “100”</li><li><strong><code>double</code> (浮点数)</strong>：浮点数基本上可以被理解为带小数点的数字。</li><li><strong><code>char</code> (字符)</strong>：用来存储单个字符。字母，数字符号什么的都可以。例如’a’, ‘B’等等。<u>单个字符会被引用在单引号<code>''</code>中，而并非双引号。</u></li><li><strong><code>bool</code> (布尔值)</strong>：存储两个状态：True 和 False。</li><li><strong><code>string</code> (字符串)</strong>：用来存储字符序列。比如一个单词或一个句子。例如”Hello”或者”C++”。<u>与字符不同点在于，字符串会被引用在双引号中。</u><br>  格外注意，如果我们想要使用字符串，一定要记得引用头文件<code>#include &lt;string&gt;</code>！  </li></ul><p><br></p><hr><p>在C++中定义变量挺简单的说是：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">double</span> price;</span><br><span class="line"><span class="type">char</span> initial;</span><br><span class="line"><span class="type">bool</span> isRaining;</span><br><span class="line">std::string name;</span><br></pre></td></tr></table></figure><p>先写要定义的数据类型，随后声明你想要的变量名。  </p><p>变量名有以下命名规则：  </p><ul><li>变量名的第一个字符必须是<strong>字母或下划线</strong>。</li><li>变量名只能包含三种字符：<strong>大小写字母</strong>，<strong>数字</strong>和<strong>下划线</strong>。  </li><li>不能与C++预留名称冲突。差不多是不能与C++声明过的变量重名。  </li></ul><p>同时注意，变量名<strong>区分大小写</strong>，所以<code>radius</code>和<code>Radius</code>, <code>RADIUS</code>是三个不同的变量。  </p><p><br></p><hr><p>如何为变量赋值？我们可以选择在定义变量的同时为它们声明一个初始值：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> age = <span class="number">30</span>;</span><br><span class="line"><span class="type">double</span> price = <span class="number">19.99</span>;</span><br><span class="line"><span class="type">char</span> initial = <span class="string">'D'</span>;</span><br><span class="line"><span class="type">bool</span> isRaining = <span class="literal">false</span>;</span><br><span class="line">std::string name = <span class="string">"Alice"</span>;</span><br></pre></td></tr></table></figure><p>或者也可以直接调用变量名，然后为其赋值：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">30</span>;</span><br><span class="line">price = <span class="number">19.9</span></span><br><span class="line">initial = <span class="string">'D'</span>;</span><br><span class="line">isRaining = <span class="literal">false</span>;</span><br><span class="line">name = <span class="string">"Alice"</span>;</span><br></pre></td></tr></table></figure><p><br></p><hr><p>差不多理解了？下面是一个包含我们介绍过的数据类型的小程序。试试看能不能读懂是什么意思：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> numberOfStudents = <span class="number">25</span>;</span><br><span class="line">    <span class="type">double</span> averageGrade = <span class="number">85.5</span>;</span><br><span class="line">    <span class="type">char</span> gradeLetter = <span class="string">'B'</span>;</span><br><span class="line">    <span class="type">bool</span> isPass = <span class="literal">true</span>;</span><br><span class="line">    std::string courseName = <span class="string">"Introduction to C++"</span>;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">"Course: "</span> &lt;&lt; courseName &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"Number of students: "</span> &lt;&lt; numberOfStudents &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"Average grade: "</span> &lt;&lt; averageGrade &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"Grade letter: "</span> &lt;&lt; gradeLetter &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"Pass status: "</span> &lt;&lt; (isPass ? <span class="string">"Pass"</span> : <span class="string">"Fail"</span>) &lt;&lt; std::endl; <span class="comment">// 逻辑判断，后面会提到的！</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><code>std::endl</code>是”end line”的意思。这个命令会让光标移动到下一行。<br>至于<code>?</code>运算符，我们后面会提到有关它的内容。</p><p><br></p><hr><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>除了定义一个变量，你也可以定义一个常量。<br>有时我们需要一个在程序中永远也不会，同时也不应该会改变的值。这就是常量的作用所在。  </p><p>常量类似于一个变量，但是常量的值<strong>一旦定义无法更改</strong>。这是一个固定值。  </p><p>你可以使用这样的方式声明一个常量：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> DAYS_IN_WEEK = <span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14159</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> YES_CHAR = <span class="string">'Y'</span>;</span><br><span class="line"><span class="type">const</span> std::string GREETING_MESSAGE = <span class="string">"Welcome!"</span>;</span><br></pre></td></tr></table></figure><ul><li><code>const</code>:  这个关键字告诉编译器“这是一个常量，它的值不应该被改变”。</li><li>变量名 (例如<code>DAYS_IN_WEEK</code>, <code>PI</code>): 为常量命名，我们通常用大写字母并用下划线分隔单词，以便于识别它们是常量。这是一个约定。</li><li>值 (例如后面的<code>7</code>, <code>3.14159</code>): 注意<strong>定义常量时必须同时为它定义一个初始值</strong>。</li></ul><p><br></p><hr><blockquote><p><em>但是我在Python编程中没有什么常量的概念啊？！</em></p></blockquote><p>在程序中使用<code>const</code>，有助于我们编写更安全，更有效的代码，同时也增加了代码的可读性。将一个变量声明为<code>const</code>，基本上就告诉编译器，这个变量是不可改的。<br>如果编译器在后期发现有语句尝试更改该值，则会返回错误。这避免了有时意外更改某些值的危险情况。  </p><p>至于为什么Python没有开箱即用的常量概念，有一部分的原因为Python设计之初是一个动态类型的解释型语言。变量类型在运行时的时候才会进行检查，并调用解释器逐行执行代码。<br>相比C++，Python更强调程序的自由和灵活性。但不代表我们无法在Python中使用常量，相反我们一般使用“惯例和约定”。<br>在Python中，我们一般也全部使用全部大写的变量名来声明常量，与C++一样。不过区别在于，没有什么会阻止我们更改这个变量的值——这仅仅是一个约定罢了（  </p><p><br></p><hr><p>老规矩我们直接上例子：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14159</span>; <span class="comment">// 将pi声明为常量...</span></span><br><span class="line">  <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">"Enter the radius of the circle: "</span>;</span><br><span class="line">  std::cin &gt;&gt; radius;</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> circumference = <span class="number">2</span> * PI * radius; <span class="comment">// ...然后调用pi</span></span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">"The circumference is: "</span> &lt;&lt; circumference &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>还记得我刚才说过的，更改常量的值可能会报错嘛：  </p><p>如果你将程序改成这样，在声明<code>PI</code>之后尝试更改<code>PI</code>的值：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14159</span>;</span><br><span class="line">  <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">"Enter the radius of the circle: "</span>;</span><br><span class="line">  std::cin &gt;&gt; radius;</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> circumference = <span class="number">2</span> * PI * radius;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Change the value of PI and see what will happen</span></span><br><span class="line">  PI = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">"The circumference is: "</span> &lt;&lt; circumference &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>试着运行一下，按理讲程序会报错。<br>这就是使用常量的好处了。能够有效保证某些定义好的量不被意外更改。  </p><p><br></p><hr><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>C++里有不少运算符。一个一个看吧：  </p><h4 id="数学运算符"><a href="#数学运算符" class="headerlink" title="数学运算符"></a>数学运算符</h4><p>数学运算符顾名思义，我觉得是数学运算符：看起来像数学运算符，用起来也是数学运算符。</p><ul><li><strong><code>+</code>：加法</strong></li><li><strong><code>-</code>：减法</strong></li><li><strong><code>*</code>：乘法</strong></li><li><strong><code>/</code>：除法</strong><ul><li><em>注意！</em>：<strong>如果你将两个整数相除，结果则依然会是整数</strong>，小数部分会被截取。举个例子：<br><code>5 / 2</code>的结果是<code>2</code>，而不是<code>2.5</code>。如果我们想要输出小数，可以考虑使用两个浮点数做运算。例如<code>5.0 / 2.0</code>，输出为<code>2.5</code>。  </li></ul></li><li><strong><code>%</code>：取模</strong></li></ul><p><br></p><hr><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>比较运算符会比较两个传入值，随后输出布尔类型的值，也就是<code>true</code>或者<code>false</code>：  </p><ul><li><strong><code>==</code>：等于</strong>。用于检验两个值是否相等</li><li><strong><code>!=</code>：不等于</strong></li><li><strong><code>&lt;</code>：小于</strong></li><li><strong><code>&gt;</code>: 大于</strong></li><li><strong><code>&lt;=</code>：小于等于</strong></li><li><strong><code>&gt;=</code>：大于等于</strong></li></ul><p><br></p><hr><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>这里牵扯到逻辑运算，与，或，非那堆东西：</p><ul><li><strong><code>&amp;&amp;</code>：与运算</strong>。如果两个传入值都是<code>true</code>，则返回<code>true</code>。</li><li><strong><code>||</code>：或运算</strong>。如果两个传入值存在<code>true</code>，则返回<code>true</code>。</li><li><strong><code>!</code>：非运算</strong>。输出相反的<code>true</code>和<code>false</code>结果。</li></ul><p><br></p><hr><p>搞不懂的话试试运行这个程序吧：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="type">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> num2 = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">"Arithmetic Operators:"</span> &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; num1 &lt;&lt; <span class="string">" + "</span> &lt;&lt; num2 &lt;&lt; <span class="string">" = "</span> &lt;&lt; (num1 + num2) &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; num1 &lt;&lt; <span class="string">" - "</span> &lt;&lt; num2 &lt;&lt; <span class="string">" = "</span> &lt;&lt; (num1 - num2) &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; num1 &lt;&lt; <span class="string">" * "</span> &lt;&lt; num2 &lt;&lt; <span class="string">" = "</span> &lt;&lt; (num1 * num2) &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; num1 &lt;&lt; <span class="string">" / "</span> &lt;&lt; num2 &lt;&lt; <span class="string">" = "</span> &lt;&lt; (num1 / num2) &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; num1 &lt;&lt; <span class="string">" % "</span> &lt;&lt; num2 &lt;&lt; <span class="string">" = "</span> &lt;&lt; (num1 % num2) &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">"Comparison Operators:"</span> &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; num1 &lt;&lt; <span class="string">" == "</span> &lt;&lt; num2 &lt;&lt; <span class="string">" is "</span> &lt;&lt; (num1 == num2) &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; num1 &lt;&lt; <span class="string">" != "</span> &lt;&lt; num2 &lt;&lt; <span class="string">" is "</span> &lt;&lt; (num1 != num2) &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; num1 &lt;&lt; <span class="string">" &lt; "</span> &lt;&lt; num2 &lt;&lt; <span class="string">" is "</span> &lt;&lt; (num1 &lt; num2) &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; num1 &lt;&lt; <span class="string">" &gt; "</span> &lt;&lt; num2 &lt;&lt; <span class="string">" is "</span> &lt;&lt; (num1 &gt; num2) &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; num1 &lt;&lt; <span class="string">" &lt;= "</span> &lt;&lt; num2 &lt;&lt; <span class="string">" is "</span> &lt;&lt; (num1 &lt;= num2) &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; num1 &lt;&lt; <span class="string">" &gt;= "</span> &lt;&lt; num2 &lt;&lt; <span class="string">" is "</span> &lt;&lt; (num1 &gt;= num2) &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">"Logical Operators:"</span> &lt;&lt; std::endl;</span><br><span class="line">  <span class="type">bool</span> isTrue = <span class="literal">true</span>;</span><br><span class="line">  <span class="type">bool</span> isFalse = <span class="literal">false</span>;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">"true &amp;&amp; false is "</span> &lt;&lt; (isTrue &amp;&amp; isFalse) &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">"true || false is "</span> &lt;&lt; (isTrue || isFalse) &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">"!true is "</span> &lt;&lt; (!isTrue) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="运算顺序"><a href="#运算顺序" class="headerlink" title="运算顺序"></a>运算顺序</h4><p>顺序如下：</p><ol><li><strong><code>()</code></strong>：与数学一样，我们首先计算括号。</li><li><strong><code>!</code></strong>：非运算</li><li><strong><code>*, /, %</code></strong>：乘除和取模运算</li><li><strong><code>+， -</code></strong>：加减运算</li><li><strong><code>==, !=, &lt;, &gt;, &lt;=, &gt;=</code></strong>：比较运算符</li><li><strong><code>&amp;&amp;</code></strong>：与运算</li><li><strong><code>||</code></strong>：或运算</li><li><strong><code>=</code></strong>：赋值符。(<em>顺序为从右往左。赋值语句我们之后再说</em>)</li></ol><p><br></p><hr><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><p>有时我们想要将一个数据类型转换到另一种数据类型。C++为我们提供了两种转换方式，分别为<strong>隐式转换 (Implicit conversion)</strong>和<strong>显式转换 (Explicit conversion)</strong>。  </p><h4 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h4><p>当我们使用隐式转换时，C++则会自动将你的值从一种类型转换到另一种类型。通常我们想要将“较小”的数据类型转换到“较大”的数据类型时，并没有数据损失时，会使用隐式转换：  </p><p>比如我们想要将<code>int</code>转换到<code>double</code>：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> integerValue = <span class="number">10</span>;</span><br><span class="line"><span class="type">double</span> doubleValue = integerValue; <span class="comment">// 在这里应用了隐式转换</span></span><br><span class="line">std::cout &lt;&lt; doubleValue &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>看第二行，C++自动将整数<code>10</code>转换到了double<code>10.0</code>。这个值被赋予给了<code>doubleValue</code>变量。<br>这里使用隐式转换是安全的，因为这里实际上没有牵扯任何数据损失。  </p><p><br></p><p>再举个例子吧：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> intResult;</span><br><span class="line"><span class="type">double</span> doubleValue1 = <span class="number">5.5</span>;</span><br><span class="line"><span class="type">int</span> intValue2 = <span class="number">3</span>;</span><br><span class="line">intResult = doubleValue1 + intValue2; <span class="comment">// double向int的隐式转换么，我看不太行</span></span><br><span class="line"><span class="type">double</span> doubleResult = doubleValue1 + intValue2; <span class="comment">// 但是我们可以从int隐式转换到double</span></span><br><span class="line">std::cout &lt;&lt; doubleResult &lt;&lt; std::endl; <span class="comment">// 输出为 8.5</span></span><br><span class="line">std::cout &lt;&lt; intResult &lt;&lt; std::endl; <span class="comment">// 会出错，因为你无法将double值赋予到int变量中...</span></span><br></pre></td></tr></table></figure><p>在 <code>doubleResult = doubleValue1 + intValue2;</code> 中，intValue2 在加法之前被隐式转换为 double，因此结果为 double。<br>但是，如果不进行显式转换，则不能直接将 double 赋值给 intResult，因为这会丢失小数部分。</p><p>再看一下<code>intResult</code>。这一行会在编译时出现问题，因为如果尝试将 double 结果分配给 int 变量而没有进行显式转换，C++ 会将其捕获为编译时错误。</p><p>一会我们来探讨什么叫显式转换。</p><p><br></p><hr><h4 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h4><p>当您想要强制转换数据类型，或者当 C++ 不会隐式执行转换时（<em>例如，从“较大”类型转换为“较小”类型，这可能会丢失信息</em>），我们则需要使用显式类型转换，也称为”Type Casting”。  </p><p>我们可以选择使用比较经典的，C语言样式的显式转换：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> price = <span class="number">29.99</span>;</span><br><span class="line"><span class="type">int</span> integerPrice = (<span class="type">int</span>)price <span class="comment">// 使用C语言样式显式转换double到int</span></span><br><span class="line">std::cout &lt;&lt; integerPrice &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>或者我们也可以使用比较现代的C++样式进行显式转换。理论来讲这种方式会更加安全，也看起来更干净：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> price = <span class="number">29.99</span>;</span><br><span class="line"><span class="type">int</span> integerPrice = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(price); <span class="comment">// 使用static_cast显式转换double到int</span></span><br><span class="line">std::cout &lt;&lt; integerPrice &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>两种方法都会输出<code>29</code>。因为我们从“较大”的数据类型通过显式转换变成了“较小”的数据类型，所以你可以发现小数部分被整个切掉了。  </p><p><br></p><p>也可以通过显式转换将<code>char</code>转换到<code>int</code>：  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> myChar = <span class="string">'A'</span>;</span><br><span class="line"><span class="type">int</span> asciiValue = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(myChar);</span><br><span class="line"><span class="type">char</span> backToChar = <span class="built_in">static_cast</span>&lt;<span class="type">char</span>&gt;(<span class="number">65</span>); <span class="comment">// 'A'的ASCII值是65</span></span><br><span class="line">std::cout&lt;&lt; <span class="string">"ASCII value of "</span> &lt;&lt; myChar &lt;&lt; <span class="string">" is "</span> &lt;&lt; asciiValue &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">"Character for ASCII 65 is "</span> &lt;&lt; backToChar &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p><br></p><hr><p>为你提供示例小程序，看懂了就基本上代表你这块直接毕业了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="type">int</span> integerNumber = <span class="number">15</span>;</span><br><span class="line">  <span class="type">double</span> doubleNumber = <span class="number">7.8</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> implicitConversion = integerNumber; <span class="comment">// 隐式转换，int → double</span></span><br><span class="line">  <span class="type">int</span> explicitConversion = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(doubleNumber); <span class="comment">// 显式转换，double → int</span></span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">"Original integer: "</span> &lt;&lt; integerNumber &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">"Implicitly converted to double: "</span> &lt;&lt; implicitConversion &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">"Original double: "</span> &lt;&lt; doubleNumber &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">"Explicitly converted to int: "</span> &lt;&lt; explicitConversion &lt;&lt; std::endl; <span class="comment">// 注意小数位的数据丢失</span></span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> characterA = <span class="string">'A'</span>;</span><br><span class="line">  <span class="type">int</span> asciiValueOfA = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(characterA); <span class="comment">// char → int</span></span><br><span class="line">  <span class="type">char</span> charFromAscii = <span class="built_in">static_cast</span>&lt;<span class="type">char</span>&gt;(<span class="number">66</span>);       <span class="comment">// int → char (ASCII码 66 对应 'B')</span></span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">"Character: "</span> &lt;&lt; characterA &lt;&lt; <span class="string">", ASCII value: "</span> &lt;&lt; asciiValueOfA &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">"ASCII value: 66, Character: "</span> &lt;&lt; charFromAscii &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><br></p><hr><h2 id="程序编译与运行"><a href="#程序编译与运行" class="headerlink" title="程序编译与运行"></a>程序编译与运行</h2><p>首先我假设你应该会点Python，因为这是修1340之前的必修课（差不多吧）。即使你没学过Python，那如果你是来自西恩大陆，中学期间的计算机课也给你介绍过一些常见Python用法了。  </p><p>C++需要编译器来编译程序，然后处理器才能运行你的C++程序。如果你之前用过Python，你大概对编译器这个概念很陌生。反倒可能听说过解释器这么个东西。  </p><p>与Python不同，<strong>C++是一种编译语言</strong>。你的处理器无法直接理解C++代码，但是处理器可以理解机器码，这是一种由 0 和 1 组成的非常低级的语言。<br>编译器充当“翻译官”的角色。它将人类可读的C++代码转换为计算机可以直接执行的机器代码。这样你的处理器就能运行了。</p><p>而<strong>Python是一种解释语言</strong>，靠的是解释器。当你运行Python程序时，解释器会逐行读取 Python 代码并直接执行。<br>通常不需要担心将代码编译为机器代码的单独步骤（<em>尽管 Python 确实会进行一些后台编译以转换为字节码，但这与 C++ 编译有本质上的不同不同</em>）。  </p><p><br></p><p>编译程序带来的好处很明显。通常编译程序比解释程序的运行速度快的多，因为编译器只需要编译一次，把你的代码转换成机器码就ok。通常这样生成的机器码经过高度优化，所以处理器可以直接快速执行。这就是为什么C++经常被用来编写对性能要求较高的程序，比如游戏开发，操作系统等。  </p><p>另一个好处是编译可以产生一个独立的可执行文件。比如在Windows上的exe文件。我们可以无需编译器，也无需源代码，来直接运行程序。比较利于程序的分发。  </p><p><br></p><hr><h3 id="g-编译器"><a href="#g-编译器" class="headerlink" title="g++编译器"></a>g++编译器</h3><p>简单过一下如何在Linux环境下编译C++源代码：</p><ol><li><p>定位工作目录和文件，首先你需要找到你要编译的C++源代码。</p></li><li><p>在命令行中运行：  </p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ my_program.cpp -o my_program</span><br></pre></td></tr></table></figure><p>使用<code>g++</code>调用g++编译器，<code>my_program.cpp</code>是你要编译的源文件。<br><code>-o</code>这个flag允许你在下一个参数定义编译输出文件的文件名。在这个例子中名字就是<code>my_program</code>。  </p><ol><li>最后运行。定位到文件当前的目录后直接输入下面的命令即可运行：  </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./my_program</span><br></pre></td></tr></table></figure><p>注意不是<code>my_program.cpp</code>，这是你的源代码，不是编译后的程序。  </p><p><br></p><hr><h3 id="阅读错误信息"><a href="#阅读错误信息" class="headerlink" title="阅读错误信息"></a>阅读错误信息</h3><p>很多小白当运行程序时，或者编译程序时碰到了问题，爆了一堆错误信息，他们一般选择看都不看。  </p><p>孩子们这不对，这些文字中会包含非常有用的信息。  </p><p>如果你的程序编译失败了，那么就会返回编译错误。语法错误，变量类型错误，引用错误等等都可能会导致编译失败，进而出现错误信息：</p><p>比如下面的这个情况是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  std::cout &lt;&lt; <span class="string">"Hello, World!"</span> &lt;&lt; std::endl  <span class="comment">// 这里末尾没带分号</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>相似的程序会爆这样的问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello.cpp: In function 'int main()':</span><br><span class="line">hello.cpp:5:5: error: expected ';' before 'return'</span><br><span class="line">     return 0</span><br><span class="line">     ^~~~~~</span><br><span class="line">     ;</span><br></pre></td></tr></table></figure><p><code>expected ';' before return</code>，错误理由已经写在这里了，我们忘了插入分号了。</p><p>哦对了在C++中编写程序记得在每行末尾带引号。  </p><p><br></p><p>或者这种：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  std::string message = <span class="string">"Hello"</span>;</span><br><span class="line">  <span class="type">int</span> number = <span class="number">123</span>;</span><br><span class="line">  std::string combined = message + number; <span class="comment">// 数据类型错误！</span></span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; combined &lt;&lt; std::endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>相似的程序会爆这样的问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type_error.cpp: In function 'int main()':</span><br><span class="line">type_error.cpp:6:14: error: invalid operands of types 'std::string' and 'int' to binary 'operator+'</span><br><span class="line"> std::string message = "Hello" + 123;</span><br><span class="line">                     ^~~~~~~~~~~~~</span><br></pre></td></tr></table></figure><p>属于当时我们提到的数据类型错误。我们没有进行显示转换，就尝试使用<code>+</code>运算符把<code>std::string</code>类型的变量和<code>int</code>加在一起。这是不能被实现的。  </p><p>还有一种引用错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  value = <span class="number">10</span>; <span class="comment">// value 在被使用之前没有被声明</span></span><br><span class="line">  std::cout &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>相似的程序会爆这样的问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">declaration_error.cpp: In function 'int main()':</span><br><span class="line">declaration_error.cpp:5:5: error: 'undeclaredVariable' was not declared in this scope</span><br><span class="line"> undeclaredVariable = 10;</span><br><span class="line"> ^~~~~~~~~~~~~~~~~~</span><br></pre></td></tr></table></figure><p>这里的问题是编译器根本找不到<code>undeclaredVariable</code>是什么玩意。用变量之前记得先声明！</p><p><br></p><hr><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><p>控制流 (Control Flow)，简而言之就是决定某些指令何时执行，按何种顺序执行的一种概念。<br>目前为止我们写过的程序都是线性的，只会按照从上到下一种方向执行。我们可以引入控制流，让我们的程序更灵活，更强大。  </p><p>我打算介绍下面两种主要的控制流类别：</p><ul><li><strong>分支 (Branching)</strong>：涉及在程序中做出决策。<br>人话讲：“如果此条件为真，则执行这组指令；否则，执行其他操作（或者什么也不做）”。<br>我们将介绍 <code>if</code>、<code>if-else</code> 和 <code>switch</code> 语句。</li></ul><ul><li><strong>循环 (Looping)</strong>：也叫做迭代，涉及多次重复代码块。<br>人话为：“只要此条件为真，就继续执行这组指令”，或者：“执行这组指令一定次数”。<br>这里我们介绍 <code>while</code>和 <code>for</code> 循环。我们还将介绍可以修改循环行为的 <code>break</code> 和 <code>continue</code> 语句。</li></ul><p><br></p><hr><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;自学ENGG1340写的笔记&lt;br&gt;</summary>
    
    
    
    <category term="CS" scheme="http://naughtychas.github.io/categories/CS/"/>
    
    
    <category term="笔记" scheme="http://naughtychas.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算机" scheme="http://naughtychas.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Exam Notes for ENGG 1330</title>
    <link href="http://naughtychas.github.io/2024/12/11/Exam%20Notes%20for%20ENGG1330/"/>
    <id>http://naughtychas.github.io/2024/12/11/Exam%20Notes%20for%20ENGG1330/</id>
    <published>2024-12-11T08:11:05.000Z</published>
    <updated>2024-12-11T08:17:07.747Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Exam notes for ENGG 1330<br><span id="more"></span></p></blockquote><h1 id="ENGG-1330-Exam-Notes"><a href="#ENGG-1330-Exam-Notes" class="headerlink" title="ENGG 1330 Exam Notes"></a>ENGG 1330 Exam Notes</h1><h2 id="Lecture-2"><a href="#Lecture-2" class="headerlink" title="Lecture 2"></a>Lecture 2</h2><h3 id="Variable-and-Identifiers"><a href="#Variable-and-Identifiers" class="headerlink" title="Variable and Identifiers"></a>Variable and Identifiers</h3><ul><li><p>To get a type of a variable, use <code>type(&lt;variable&gt;)</code>. The output would be: <code>&lt;class '&lt;typeclass&gt;'&gt;</code>, like <code>&lt;class 'int'&gt;</code> indicating integers.</p></li><li><p>Identifiers cannot:</p><ul><li><strong>Begin with numbers</strong></li><li><strong>Be keywords</strong></li><li>include characters other than <strong>underscore, numbers and letters</strong></li></ul></li><li><p>Identifiers are: <strong>Case sensitive</strong></p></li></ul><hr><h3 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Operator</th><th style="text-align:center">Name</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">Addition</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">Subtraction</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">Multiplication</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">Division</td><td style="text-align:center">Regular division.</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">Modulo</td><td style="text-align:center">return remainder</td></tr><tr><td style="text-align:center">**</td><td style="text-align:center">Exponent</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">//</td><td style="text-align:center">Floor Division</td><td style="text-align:center">return rounded result</td></tr></tbody></table></div><hr><h2 id="Lecture-3"><a href="#Lecture-3" class="headerlink" title="Lecture 3"></a>Lecture 3</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul><li><p>Method <code>list.insert(&lt;index&gt;, &lt;content&gt;)</code>, which:</p><ul><li>\<index\> position count as the position of the available slot, starting from the 1 slot before the 1st element in the list as index 0.</index\></li><li>\<content\> content will be inserted.</content\></li></ul></li><li><p>Method <code>list.remove(&lt;index&gt;)</code>, which:</p><ul><li><index> position of the element will be removed.</index></li></ul></li><li><p>Method <code>list.clear()</code>, which will clear the list.</p></li></ul><hr><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Used to store elements which has no redundancy. Elements inside set has no order, and unique.</p><ul><li><p>Method <code>set.add(&lt;element&gt;)</code>, which:</p><ul><li><element> element to be added to the set.</element></li></ul></li><li><p>Method <code>set.remove(&lt;element&gt;)</code>, which:</p><ul><li><element> element to be deleted.</element></li><li><em>If <element> does not exist, using <code>set.remove()</code> will raise KeyError.</element></em></li></ul></li><li><p>Method <code>set.discard(&lt;element&gt;)</code>, which:</p><ul><li><element> element to be deleted.</element></li><li><em>If <element> does not exist, using <code>set.discard()</code> will NOT raise KeyError.</element></em></li></ul></li></ul><hr><h2 id="Lecture-4"><a href="#Lecture-4" class="headerlink" title="Lecture 4"></a>Lecture 4</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>Strings are <strong>Immutable datatypes</strong>. A string, once created, can never be changed.</p><h4 id="Workarounds-to-“modify”-a-string"><a href="#Workarounds-to-“modify”-a-string" class="headerlink" title="Workarounds to “modify” a string:"></a>Workarounds to “modify” a string:</h4><ol><li><p><strong>Convert to a list, modify, and convert back to a string</strong>:</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"hello"</span></span><br><span class="line">s_list = <span class="built_in">list</span>(s)  <span class="comment"># Convert string to list</span></span><br><span class="line">s_list[<span class="number">0</span>] = <span class="string">'H'</span>  <span class="comment"># Modify the list</span></span><br><span class="line">s = <span class="string">''</span>.join(s_list)  <span class="comment"># Convert list back to string</span></span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># Output: 'Hello'</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Use string slicing and concatenation</strong>:</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"hello"</span></span><br><span class="line">s = <span class="string">'H'</span> + s[<span class="number">1</span>:]  <span class="comment"># Modify the first character</span></span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># Output: 'Hello'</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Use string methods to create a new string</strong>:</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"hello"</span></span><br><span class="line">s = s.replace(<span class="string">'h'</span>, <span class="string">'H'</span>)  <span class="comment"># Use replace method to create a new string</span></span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># Output: 'Hello'</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="Strings-Escape-characters"><a href="#Strings-Escape-characters" class="headerlink" title="Strings Escape characters"></a>Strings Escape characters</h3><p>Strings are immutable data types.</p><div class="table-container"><table><thead><tr><th style="text-align:center">Characters</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:center"><code>\n</code></td><td style="text-align:left">Newline</td></tr><tr><td style="text-align:center"><code>\t</code></td><td style="text-align:left">Horizontal Tab</td></tr><tr><td style="text-align:center"><code>\'</code></td><td style="text-align:left">Single Quote (转义)</td></tr><tr><td style="text-align:center"><code>\"</code></td><td style="text-align:left">Double Quote  (转义)</td></tr><tr><td style="text-align:center"><code>\\</code></td><td style="text-align:left">Backslash</td></tr></tbody></table></div><hr><h3 id="String-Operations"><a href="#String-Operations" class="headerlink" title="String Operations"></a>String Operations</h3><ul><li>Use <code>+</code> to add two string together.</li><li><p>Two text literals next to each other will be automatically combined:</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = (<span class="string">'Combining'</span> <span class="string">'literals'</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure></li><li><em>Or it’s totally fine if these two literals has no space between them.</em></li></ul></li><li><p>Multiplying a string by 0 or a negative integer results in an empty string:</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Hello"</span> * <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># Output: ''</span></span><br></pre></td></tr></table></figure></li><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Hello"</span> * -<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># Output: ''</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Membership Test in strings:</p><ul><li>Use <code>in</code> to check if a substring exists in a string.<ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Hello, World!"</span></span><br><span class="line">result = <span class="string">"Hello"</span> <span class="keyword">in</span> s</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># Output: True</span></span><br></pre></td></tr></table></figure></li></ul></li><li>Use <code>not in</code> to check if a substring does not exist in a string.<ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">      s = <span class="string">"Hello, World!"</span></span><br><span class="line">      result = <span class="string">"Hi"</span> <span class="keyword">not</span> <span class="keyword">in</span> s</span><br><span class="line">      <span class="built_in">print</span>(result)  <span class="comment"># Output: True</span></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment">### String Comparison</span></span><br><span class="line"></span><br><span class="line">- You can use `&gt;`, `&lt;`, `&lt;=`, `&gt;=`, `==`, `!=` to compare two strings. Python compares strings lexicographically based on the Unicode code points of characters. For example:</span><br><span class="line"></span><br><span class="line">- Comparing the size of strings:</span><br><span class="line">  ```python</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"apple"</span> &gt; <span class="string">"banana"</span>)  <span class="comment"># Output: False, because 'a' has a lower Unicode code point than 'b'</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"apple"</span> &lt; <span class="string">"banana"</span>)  <span class="comment"># Output: True</span></span><br><span class="line"></span><br><span class="line">- Comparing the equality of strings:</span><br><span class="line">  ```python</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"apple"</span> == <span class="string">"apple"</span>)  <span class="comment"># Output: True</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"apple"</span> != <span class="string">"banana"</span>)  <span class="comment"># Output: True</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Comparing the size and equality of strings:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"apple"</span> &lt;= <span class="string">"banana"</span>)  <span class="comment"># Output: True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"apple"</span> &gt;= <span class="string">"apple"</span>)  <span class="comment"># Output: True</span></span><br></pre></td></tr></table></figure></li><li><p>If one string is a prefix of another, the shorter string is considered smaller:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"app"</span> &lt; <span class="string">"apple"</span>)  <span class="comment"># Output: True, because "app" is a prefix of "apple"</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="String-Functions"><a href="#String-Functions" class="headerlink" title="String Functions"></a>String Functions</h3><ul><li><p><code>len(str)</code>: Returns the length of the string.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Hello, World!"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s))  <span class="comment"># Output: 13</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>str.lower()</code>: Converts the string to lowercase.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Hello, World!"</span></span><br><span class="line"><span class="built_in">print</span>(s.lower())  <span class="comment"># Output: hello, world!</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>str.upper()</code>: Converts the string to uppercase.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Hello, World!"</span></span><br><span class="line"><span class="built_in">print</span>(s.upper())  <span class="comment"># Output: HELLO, WORLD!</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>str.strip()</code>: Removes whitespace from both ends of the string.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"   Hello, World!   "</span></span><br><span class="line"><span class="built_in">print</span>(s.strip())  <span class="comment"># Output: Hello, World!</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>str.split()</code>: Splits the string into a list.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Hello, World!"</span></span><br><span class="line"><span class="built_in">print</span>(s.split())  <span class="comment"># Output: ['Hello,', 'World!']</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>str.join(iterable)</code>: Joins the elements of the iterable into a single string.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">'Hello'</span>, <span class="string">'World'</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">' '</span>.join(words))  <span class="comment"># Output: Hello World</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>str.replace(old, new)</code>: Replaces occurrences of a substring.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Hello, World!"</span></span><br><span class="line"><span class="built_in">print</span>(s.replace(<span class="string">"World"</span>, <span class="string">"Python"</span>))  <span class="comment"># Output: Hello, Python!</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>str.find(sub)</code>: Finds the position of a substring, returns -1 if not found.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Hello, World!"</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">"World"</span>))  <span class="comment"># Output: 7</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>str.startswith(prefix)</code>: Checks if the string starts with the specified prefix.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Hello, World!"</span></span><br><span class="line"><span class="built_in">print</span>(s.startswith(<span class="string">"Hello"</span>))  <span class="comment"># Output: True</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>str.endswith(suffix)</code>: Checks if the string ends with the specified suffix.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Hello, World!"</span></span><br><span class="line"><span class="built_in">print</span>(s.endswith(<span class="string">"World!"</span>))  <span class="comment"># Output: True</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>ord(char)</code>: Returns the Unicode code point for a given character.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">'A'</span>))  <span class="comment"># Output: 65</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">'a'</span>))  <span class="comment"># Output: 97</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">'0'</span>))  <span class="comment"># Output: 48</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>chr(code)</code>: Returns the character that represents the specified Unicode code point.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">65</span>))  <span class="comment"># Output: 'A'</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">97</span>))  <span class="comment"># Output: 'a'</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">48</span>))  <span class="comment"># Output: '0'</span></span><br><span class="line"></span><br><span class="line">- `<span class="built_in">str</span>.isalnum()`: Checks <span class="keyword">if</span> <span class="built_in">all</span> characters <span class="keyword">in</span> the string are alphanumeric.</span><br><span class="line">  - Example:</span><br><span class="line">    ```python</span><br><span class="line">    s1 = <span class="string">"Hello123"</span></span><br><span class="line">    s2 = <span class="string">"Hello 123"</span></span><br><span class="line">    <span class="built_in">print</span>(s1.isalnum())  <span class="comment"># Output: True</span></span><br><span class="line">    <span class="built_in">print</span>(s2.isalnum())  <span class="comment"># Output: False</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>str.isalpha()</code>: Checks if all characters in the string are alphabetic.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">"Hello"</span></span><br><span class="line">s2 = <span class="string">"Hello123"</span></span><br><span class="line"><span class="built_in">print</span>(s1.isalpha())  <span class="comment"># Output: True</span></span><br><span class="line"><span class="built_in">print</span>(s2.isalpha())  <span class="comment"># Output: False</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>str.isdecimal()</code>: Checks if all characters in the string are decimal characters.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">"123"</span></span><br><span class="line">s2 = <span class="string">"123.45"</span></span><br><span class="line"><span class="built_in">print</span>(s1.isdecimal())  <span class="comment"># Output: True</span></span><br><span class="line"><span class="built_in">print</span>(s2.isdecimal())  <span class="comment"># Output: False</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>str.capitalize()</code>: Capitalizes the first character of the string and converts the rest to lowercase.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"hello, world!"</span></span><br><span class="line"><span class="built_in">print</span>(s.capitalize())  <span class="comment"># Output: 'Hello, world!'</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">"PYTHON programming"</span></span><br><span class="line"><span class="built_in">print</span>(s.capitalize())  <span class="comment"># Output: 'Python programming'</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="Lecture-5"><a href="#Lecture-5" class="headerlink" title="Lecture 5"></a>Lecture 5</h2><h3 id="Id"><a href="#Id" class="headerlink" title="Id"></a>Id</h3><p>In Python, the <code>id()</code> function is used to get the unique identifier of an object. This identifier is unique and constant for the object during its lifetime.</p><ul><li><strong>Description</strong>: Returns the unique identifier of an object.</li><li><strong>Return Value</strong>: An integer representing the unique identifier of the object.</li></ul><h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h4><ul><li>Getting the id of an object:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  a = <span class="number">10</span></span><br><span class="line">  b = <span class="number">10</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">id</span>(a))  <span class="comment"># Output: Unique identifier of object a</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">id</span>(b))  <span class="comment"># Output: Unique identifier of object b, usually the same as a because integers are immutable and cached</span></span><br><span class="line"></span><br><span class="line">**Important Concepts**</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Uniqueness of Objects:</span><br><span class="line"></span><br><span class="line">  - The identifier returned by <span class="built_in">id</span>() <span class="keyword">is</span> unique <span class="keyword">and</span> constant <span class="keyword">for</span> the <span class="built_in">object</span> during its lifetime.</span><br><span class="line">  - Example:</span><br><span class="line">    ```python</span><br><span class="line">    a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(a))  <span class="comment"># Output: Unique identifier of object a</span></span><br><span class="line">    a.append(<span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>(a))  <span class="comment"># Output: Same unique identifier, because a is still the same object</span></span><br></pre></td></tr></table></figure></li></ul><ol><li><p>Mutability and Immutability:</p><ul><li>For immutable objects (like integers, strings, tuples), Python may return the same identifier for new objects with the same value because these objects are cached and reused.</li><li>For mutable objects (like lists, dictionaries), even if the content is the same, new objects will have different identifiers.</li><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a) == <span class="built_in">id</span>(b))  <span class="comment"># Output: True, because the integer object 10 is cached and reused</span></span><br><span class="line"></span><br><span class="line">c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">d = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(c) == <span class="built_in">id</span>(d))  <span class="comment"># Output: False, because c and d are different list objects</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Object Lifetime:</p><ul><li>The identifier of an object is unique and constant during its lifetime. When the object is destroyed, its identifier may be reassigned to a new object.</li><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">id_a = <span class="built_in">id</span>(a)</span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b) == id_a)  <span class="comment"># May output True, because id_a may be reassigned to the new object b</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><p><strong>Common Pitfalls</strong></p><ol><li><p>Immutable Object Caching:</p><ul><li>For immutable objects (like integers, strings, tuples), Python caches and reuses some common values, which means that two objects with the same value may have the same id.</li><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a) == <span class="built_in">id</span>(b))  <span class="comment"># Output: True, because the integer 10 is cached and reused</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Small Integer Caching:</p><ul><li>Python caches and reuses small integers (usually between -5 and 256), so their id values are always the same.</li><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">256</span></span><br><span class="line">b = <span class="number">256</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a) == <span class="built_in">id</span>(b))  <span class="comment"># Output: True, because 256 is within the cache range</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">257</span></span><br><span class="line">d = <span class="number">257</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(c) == <span class="built_in">id</span>(d))  <span class="comment"># Output: False, because 257 is outside the cache range</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>String Interning:</p><ul><li>Python caches and reuses short and common strings.</li><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">"hello"</span></span><br><span class="line">s2 = <span class="string">"hello"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s1) == <span class="built_in">id</span>(s2))  <span class="comment"># Output: True, because the string "hello" is cached and reused</span></span><br><span class="line"></span><br><span class="line">s3 = <span class="string">"hello, world!"</span></span><br><span class="line">s4 = <span class="string">"hello, world!"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s3) == <span class="built_in">id</span>(s4))  <span class="comment"># Output: May be True or False, depending on the implementation</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Different id for Mutable Objects:</p><ul><li>For mutable objects (like lists, dictionaries), even if the content is the same, new objects will have different id values.</li><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(list1) == <span class="built_in">id</span>(list2))  <span class="comment"># Output: False, because list1 and list2 are different objects</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Object Lifetime:</p><ul><li>When an object is destroyed, its id may be reassigned to a new object.</li><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">id_a = <span class="built_in">id</span>(a)</span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b) == id_a)  <span class="comment"># May output True, because id_a may be reassigned to the new object b</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="Value-Assignment-and-Aliasing"><a href="#Value-Assignment-and-Aliasing" class="headerlink" title="Value Assignment and Aliasing"></a>Value Assignment and Aliasing</h3><ul><li>When you assign a mutable object (like a list, dictionary, or set) to another variable, both variables will reference the same object. This is called aliasing.</li><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list2 = list1  <span class="comment"># list2 is an alias for list1</span></span><br><span class="line">list2.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)  <span class="comment"># Output: [1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(list2)  <span class="comment"># Output: [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="FileIO"><a href="#FileIO" class="headerlink" title="FileIO"></a>FileIO</h3><p>Python provides a set of built-in functions for file operations, including opening files, reading files, writing files, and closing files.</p><h4 id="Opening-a-File"><a href="#Opening-a-File" class="headerlink" title="Opening a File"></a>Opening a File</h4><p>Use the <code>open()</code> function to open a file. The <code>open()</code> function returns a file object and takes two main parameters: the filename and the mode.</p><ul><li><p><strong>Modes</strong>:</p><ul><li><code>'r'</code>: Read mode (default).</li><li><code>'w'</code>: Write mode. If the file exists, it will be overwritten; if the file does not exist, a new file will be created.</li><li><code>'a'</code>: Append mode. If the file exists, new data will be appended to the end; if the file does not exist, a new file will be created.</li><li><code>'b'</code>: Binary mode.</li><li><code>'t'</code>: Text mode (default).</li><li><p><code>'+'</code>: Read and write mode.</p></li><li><p>Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Open a file for writing</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">'example.txt'</span>, <span class="string">'w'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Writing-to-a-File"><a href="#Writing-to-a-File" class="headerlink" title="Writing to a File"></a>Writing to a File</h4><p>Use the file object’s <code>write()</code> method or <code>writelines()</code> method to write content to the file.</p><ul><li><p><code>write()</code> method: Writes a single string to the file.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.write(<span class="string">'Hello, World!\n'</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>writelines()</code> method: Writes a list of strings to the file.</p><ul><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lines = [<span class="string">'First line\n'</span>, <span class="string">'Second line\n'</span>, <span class="string">'Third line\n'</span>]</span><br><span class="line">file.writelines(lines)</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h4 id="Closing-a-File"><a href="#Closing-a-File" class="headerlink" title="Closing a File"></a>Closing a File</h4><p>Use the file object’s <code>close()</code> method to close the file. Closing the file ensures that all buffered content is written to the file and releases the file resource.</p><p>Example: <code>file.close()</code></p><p>Using the <code>with</code> statement can automatically handle opening and closing files, ensuring that the file is properly closed after its suite finishes.</p><p>For instance:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'example.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">'Hello, World!\n'</span>)</span><br><span class="line">    lines = [<span class="string">'First line\n'</span>, <span class="string">'Second line\n'</span>, <span class="string">'Third line\n'</span>]</span><br><span class="line">    file.writelines(lines)</span><br><span class="line"><span class="comment"># The file is automatically closed here</span></span><br></pre></td></tr></table></figure><hr><h3 id="Random-Module"><a href="#Random-Module" class="headerlink" title="Random Module"></a>Random Module</h3><p>The <code>random</code> module in Python provides functions to generate random numbers and perform random operations.</p><ol><li><p><strong><code>random.random()</code></strong>:</p><ul><li>Returns a random float number between 0.0 and 1.0.</li><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.random())  <span class="comment"># Output: A random float between 0.0 and 1.0</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>random.randint(a, b)</code></strong>:</p><ul><li>Returns a random integer N such that <code>a &lt;= N &lt;= b</code>.</li><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(random.randint(<span class="number">1</span>, <span class="number">10</span>))  <span class="comment"># Output: A random integer between 1 and 10 (inclusive)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>random.choice(seq)</code></strong>:</p><ul><li>Returns a random element from the non-empty sequence <code>seq</code>.</li><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">choices = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'cherry'</span>]</span><br><span class="line"><span class="built_in">print</span>(random.choice(choices))  <span class="comment"># Output: A random element from the list</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>random.shuffle(seq)</code></strong>:</p><ul><li>Shuffles the sequence <code>seq</code> in place.</li><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deck = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">random.shuffle(deck)</span><br><span class="line"><span class="built_in">print</span>(deck)  <span class="comment"># Output: The list shuffled in place</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>random.sample(population, k)</code></strong>:</p><ul><li>Returns a list of <code>k</code> unique elements chosen from the population sequence or set.</li><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line"><span class="built_in">print</span>(random.sample(numbers, <span class="number">3</span>))  <span class="comment"># Output: A list of 3 unique random elements from the list</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>random.uniform(a, b)</code></strong>:</p><ul><li>Returns a random float number N such that <code>a &lt;= N &lt;= b</code>.</li><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(random.uniform(<span class="number">1.0</span>, <span class="number">10.0</span>))  <span class="comment"># Output: A random float between 1.0 and 10.0</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>random.gauss(mu, sigma)</code></strong>:</p><ul><li>Returns a random float number from a Gaussian distribution with mean <code>mu</code> and standard deviation <code>sigma</code>.</li><li>Example:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(random.gauss(<span class="number">0</span>, <span class="number">1</span>))  <span class="comment"># Output: A random float from a Gaussian distribution with mean 0 and standard deviation 1</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="Built-ins"><a href="#Built-ins" class="headerlink" title="Built-ins"></a>Built-ins</h3><p><strong><code>sorted()</code> Function</strong></p><p>The <code>sorted()</code> function in Python is used to sort an iterable and return a new sorted list. The <code>sorted()</code> function does not modify the original object but returns a new sorted list.</p><ul><li><strong>Description</strong>: Sorts an iterable and returns a new sorted list.</li><li><strong>Syntax</strong>: <code>sorted(iterable, key=None, reverse=False)</code><ul><li><code>iterable</code>: The iterable to be sorted (e.g., list, tuple, string, etc.).</li><li><code>key</code>: A function to extract a comparison key from each element (default is <code>None</code>).</li><li><code>reverse</code>: A boolean value. If <code>True</code>, the sorted list is reversed (or sorted in descending order). Default is <code>False</code>.</li></ul></li></ul><h4 id="Examples-1"><a href="#Examples-1" class="headerlink" title="Examples"></a>Examples</h4><ol><li><p><strong>Sorting a list</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   numbers = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">   sorted_numbers = <span class="built_in">sorted</span>(numbers)</span><br><span class="line">   <span class="built_in">print</span>(sorted_numbers)  <span class="comment"># Output: [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> **Sorting <span class="keyword">in</span> descending order**:</span><br><span class="line"></span><br><span class="line">    ```python</span><br><span class="line">    sorted_numbers_desc = <span class="built_in">sorted</span>(numbers, reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(sorted_numbers_desc)  <span class="comment"># Output: [9, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Sorting a string</strong>:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"hello"</span></span><br><span class="line">sorted_s = <span class="built_in">sorted</span>(s)</span><br><span class="line"><span class="built_in">print</span>(sorted_s)  <span class="comment"># Output: ['e', 'h', 'l', 'l', 'o']</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Sorting using the <code>key</code> parameter</strong>:</p><ul><li><p>Sorting by string length:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">"banana"</span>, <span class="string">"pie"</span>, <span class="string">"Washington"</span>, <span class="string">"book"</span>]</span><br><span class="line">sorted_words = <span class="built_in">sorted</span>(words, key=<span class="built_in">len</span>)</span><br><span class="line"><span class="built_in">print</span>(sorted_words)  <span class="comment"># Output: ['pie', 'book', 'banana', 'Washington']</span></span><br></pre></td></tr></table></figure></li><li><p>Sorting by a dictionary key:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">students = [</span><br><span class="line">    {<span class="string">'name'</span>: <span class="string">'John'</span>, <span class="string">'age'</span>: <span class="number">25</span>},</span><br><span class="line">    {<span class="string">'name'</span>: <span class="string">'Jane'</span>, <span class="string">'age'</span>: <span class="number">22</span>},</span><br><span class="line">    {<span class="string">'name'</span>: <span class="string">'Dave'</span>, <span class="string">'age'</span>: <span class="number">23</span>}</span><br><span class="line">]</span><br><span class="line">sorted_students = <span class="built_in">sorted</span>(students, key=<span class="keyword">lambda</span> x: x[<span class="string">'age'</span>])</span><br><span class="line"><span class="built_in">print</span>(sorted_students)</span><br><span class="line"><span class="comment"># Output: [{'name': 'Jane', 'age': 22}, {'name': 'Dave', 'age': 23}, {'name': 'John', 'age': 25}]</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Exam notes for ENGG 1330&lt;br&gt;</summary>
    
    
    
    <category term="CS" scheme="http://naughtychas.github.io/categories/CS/"/>
    
    
    <category term="笔记" scheme="http://naughtychas.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算机" scheme="http://naughtychas.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>AL CS 题目总结</title>
    <link href="http://naughtychas.github.io/2024/02/25/AL%20CS%20%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://naughtychas.github.io/2024/02/25/AL%20CS%20%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/</id>
    <published>2024-02-25T01:35:28.000Z</published>
    <updated>2025-01-26T12:47:11.894Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录A-Level CS真题中的知识点与总结<br><span id="more"></span></p></blockquote><h1 id="PART-ONE：理论基础"><a href="#PART-ONE：理论基础" class="headerlink" title="PART ONE：理论基础"></a><strong>PART ONE：理论基础</strong></h1><h1 id="第一章：数据的表示"><a href="#第一章：数据的表示" class="headerlink" title="第一章：数据的表示"></a><strong>第一章：数据的表示</strong></h1><p>Analogue data: <strong>Data values that are variable</strong>.</p><p><br></p><blockquote><p>* File header of a bitmapped image is:</p><ul><li><strong>Data about the bitmap image</strong></li></ul></blockquote><p><br></p><p>扩展到所有file header的题目：file header可以是 “<strong>Data about the [file type here]</strong>“.</p><p><br></p><hr><blockquote><p>* The image is scanned with an image resolution of 1024 × 512 pixels and a colour depth of 8 bits per pixel.<br>  Calculate an estimate for the file size, giving your answer in <u>mebibytes</u>. Show your working</p><ul><li><p>1024 × 512 × 8  = 524288 × 8 = 4194304 bit</p><p>4194304 bit = 524288 byte = 512 KiB = 0.5 MiB</p></li></ul></blockquote><p>出现没有给出像素存储大小的题目，默认为一个字节。</p><p><br></p><p>byte, kilobyte, megabyte, gigabyte (或者Byte, KB, MB, GB)以<strong>1000</strong>一进位。</p><p>而byte, kibibyte, mebibyte, gibibyte (或者Byte, KiB, MiB, GiB)以<strong>1024</strong>一进位。</p><p>上题中的换算过程中，除的就是1024。</p><p><br></p><hr><p>BCD的设计之初就是使用4个bit表示一个0-9的数字，一般来说用来进行高精度运算，或者显示使用。<br>所以说判断一个数字无法使用BCD来表示，要么就是这个数字大于9，要么就是把一个byte拆成两个nibble发现每一个nibble的大小都大于9。</p><p>One’s complement不需要再反转每一位后再加一。</p><p><br></p><hr><blockquote><p>* Identify one method of lossless compression that can be used to compress the bitmap image and describe how the method will &gt; reduce the file size.</p><ul><li><p>Use <strong>Run-length coding</strong></p></li><li><p>Replace <strong>sequences</strong> of the <strong>same colour pixel</strong> with colour code and number of identical pixels.</p></li></ul></blockquote><p><br></p><p>后来发现实际上Run-length coding也可以被用于压缩位图。  </p><p>拓展到所有的题目，run-length coding就可以这样作答：  </p><p><strong>Replace sequences of the same [element] with that character and a number of identical [elements].</strong></p><p>其中的[element]替换为文件中重复的内容。比如重复的字符。</p><p><br></p><hr><h2 id="Character-Set"><a href="#Character-Set" class="headerlink" title="Character Set"></a><strong>Character Set</strong></h2><p>ASCII can represent <strong>128</strong> characters.</p><p><em>7 bits → 2<sup>7</sup> = 128</em></p><p>Extended ASCII can represent <strong>256</strong> characters.</p><p><em>8 bits → 2<sup>8</sup> = 256</em></p><p><br></p><p>* Describe what is meant by a character set:</p><ul><li>All the characters that the computer can use or represent</li><li>Each character has a unique binary number</li></ul><p><br></p><hr><h2 id="Binary-Coded-Decimal-BCD"><a href="#Binary-Coded-Decimal-BCD" class="headerlink" title="Binary Coded Decimal(BCD)"></a><strong>Binary Coded Decimal(BCD)</strong></h2><blockquote><p>* State benefits of using Binary Coded Decimal(BCD) to represent values.</p><ul><li>straightforward to convert between BCD and denary numbers</li><li>… less complex for programmers to decode and encode</li><li>easier for digital equipment to display output information</li><li>can represent monetary values exactly</li></ul></blockquote><p><br></p><hr><h2 id="Overflow"><a href="#Overflow" class="headerlink" title="Overflow"></a><strong>Overflow</strong></h2><blockquote><p>* State how an overflow can occur when adding two binary integers.</p><ul><li>The result is a larger number than can be stored in the given number of bits.</li><li>The result is greater than 255</li></ul></blockquote><p><br></p><hr><h2 id="Vector-graphs"><a href="#Vector-graphs" class="headerlink" title="Vector graphs"></a><strong>Vector graphs</strong></h2><blockquote><p>Property: <strong>data about the shapes</strong><br>Drawing list: <strong>the list which stores the command required to draw each object</strong></p></blockquote><p><br></p><hr><h2 id="Wave-files"><a href="#Wave-files" class="headerlink" title="Wave files"></a><strong>Wave files</strong></h2><blockquote><p>* Describe reasons why sound is closer to the original when higher sample rate is used</p><ul><li>Smaller time gaps between samples</li><li>Makes the digital sound more accurate</li><li><strong>Smaller quantisation errors</strong></li></ul></blockquote><p>最后这条是个采分点，一定要加上。</p><p><br></p><hr><h2 id="Compression"><a href="#Compression" class="headerlink" title="Compression"></a><strong>Compression</strong></h2><p>* Why RLE may not reduce the file size of a bitmap image?</p><ul><li>RLE stores a colour and the number of times it occurs consecutively</li><li>An image may not have many sequences of the same colour</li><li>It would need to store the colour and the number of repeat so an extra 1 is added to non-consecutive pixels.</li></ul><p><br></p><hr><h1 id="第二章：通信与网络技术"><a href="#第二章：通信与网络技术" class="headerlink" title="第二章：通信与网络技术"></a><strong>第二章：通信与网络技术</strong></h1><h2 id="P2P"><a href="#P2P" class="headerlink" title="P2P"></a><strong>P2P</strong></h2><blockquote><p>* Describe the key features of a peer-to-peer network</p><ul><li>All computers are of equal status</li><li><p>Each computer provides access to resources and data<br>…or / data is distributed</p></li><li><p>Computers can communicate and share resources</p></li><li>Each computer is responsible for its own security</li></ul></blockquote><p><br></p><blockquote><p>* Describe drawbacks of the peer-to-peer network:</p><ul><li><p><strong>Reduced security / no central management of security</strong><br>…only as secure as the weakest computer on the network<br>…each computer is at risk from viruses from other computers</p></li><li><p><strong>No central management of backup</strong><br>…if the data from one computer is not backed up it is lost to all of the computers</p></li><li><p><strong>No central management of files/software</strong><br>…consistency may be difficult to maintain<br>…each computer may have different software from the others</p></li><li><p><strong>Individual computers may respond slower</strong><br>…because they can be accessed by other computers</p></li><li><p>The connection can only be established if <strong>all the involved computers has to be switched on</strong>.<br>…so the files may not be always available</p></li></ul></blockquote><p><br></p><hr><h2 id="Mesh-network"><a href="#Mesh-network" class="headerlink" title="Mesh network"></a><strong>Mesh network</strong></h2><blockquote><p>* What is a mesh topology?</p><ul><li>All computers directly connected to at least one other device</li><li>There are multiple routes to get to the destination</li><li>Computers acts as relays</li></ul></blockquote><p><br></p><blockquote><p>* Give advantages of using mesh topology.</p><ul><li>If a line or a node goes down there are other available routes</li><li>Improved security as data is not being sent over a dedicated connection or a single line (bus)</li><li>New nodes can be added without interference with current nodes</li><li>No collisions</li></ul></blockquote><p><br></p><hr><h2 id="Subnetting"><a href="#Subnetting" class="headerlink" title="Subnetting"></a><strong>Subnetting</strong></h2><p>* Describe reasons why subnetting is used in a network</p><ul><li><p>To improve the security of the LAN</p><ul><li>so that devices will not receive unintended data</li></ul></li><li><p>To make the network management easier</p><ul><li>because faults can be isolated more efficiently</li></ul></li><li><p>To improve the network performance</p><ul><li>by dividing data between local segments</li></ul></li></ul><hr><h2 id="IP-Addresses"><a href="#IP-Addresses" class="headerlink" title="IP Addresses"></a><strong>IP Addresses</strong></h2><p><strong>IPV4</strong>:</p><ul><li>Contains <strong>4</strong> groups of digits</li><li>Each group is represented in <strong>8</strong> bits</li><li>Separated by <strong>Full stops</strong></li></ul><p><strong>IPV6</strong>:</p><ul><li>Contains <strong>6</strong> groups of digits</li><li>Each group is represented in <strong>16</strong> bits</li><li>Separated by <strong>::</strong></li></ul><p><br></p><hr><h2 id="CSMA-CD"><a href="#CSMA-CD" class="headerlink" title="CSMA/CD"></a><strong>CSMA/CD</strong></h2><blockquote><ul><li>A workstation listens to the communication channel</li><li>… data is only sent when the channel is free</li><li>Because there is more than one computer connected to the same transmission medium</li><li>… two workstations can start to transmit at the same time, causing a collision</li><li>If collision happens, the workstations send a <strong>jamming signal</strong></li><li>… and each waits a random amount of time before attempting to resend</li></ul></blockquote><p><br></p><hr><h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a><strong>Router</strong></h2><blockquote><p>* The router has a wireless access point (WAP) to allow the devices to connect wirelessly.<br>  Identify three functions of the router in this network.</p><ul><li>To receive packets from the devices or Internet</li><li>To route the packets to their destination</li><li>To find the destination of the packets</li><li>To assign private IP addresses to devices on LAN</li><li>To store a routing table</li><li>To find a most efficient path to the destination</li><li>To maintain a table of MAC and IP addresses</li></ul></blockquote><p><br></p><hr><p><br></p><p><strong>Hub</strong> directs each packet to all devices attached to it.</p><p><br></p><hr><h2 id="Cloud-computing"><a href="#Cloud-computing" class="headerlink" title="Cloud computing"></a><strong>Cloud computing</strong></h2><blockquote><p><strong>Accessing a service/files/software on a remote server</strong>.</p><p>* Give some advantages and disadvantages of accessing both &gt; software and data using cloud computing.</p><p>Advantages:</p><ul><li>Cloud storage can be free (for small quantities)</li><li>Can access data from any computer with an Internet access</li><li>Data can be easily shared</li><li>Security could be better</li></ul><p>Disadvantages:</p><ul><li>Can only access the cloud when there is an Internet access</li><li>It takes time to download or upload data when needed</li><li>It could be more expensive in the long term</li></ul><p>* State what is meant by a public cloud and a private cloud.</p><ul><li><p>Public cloud</p><ul><li>Computing services offered by 3rd party provider over the public Internet</li><li>Available to anyone with the appropriate equipment</li></ul></li><li><p>Private cloud</p><ul><li>Computing services offered either over the Internet or a private internal network</li><li>Only available to select users no the general public</li></ul></li></ul></blockquote><p><br></p><blockquote><p>* Describe disadvantages of storing data on a public cloud compared to storing data on a server in a Local Area Network(LAN).</p><ul><li><p>There could be a possible loss of control unlike the LAN</p><ul><li>because the data is stored on someone else’s infrastructure</li><li>reliance on external agency to complete tasks</li></ul></li><li><p>Requirements reliable Internet connection</p></li><li>Increased recurring costs</li></ul></blockquote><p><br> </p><hr><h2 id="Ethernet"><a href="#Ethernet" class="headerlink" title="Ethernet"></a><strong>Ethernet</strong></h2><blockquote><p>* Describe what is meant by Ethernet</p><ul><li>A protocol suite </li><li>for data transmission in wired cables</li><li>uses CSMA/CD for collision detection</li><li>Data is transmitted in frames</li></ul></blockquote><p><br></p><hr><h2 id="Purpose-of-hardware"><a href="#Purpose-of-hardware" class="headerlink" title="Purpose of hardware"></a><strong>Purpose of hardware</strong></h2><p>Switch:</p><ul><li>Allow to or more devices to communicate with one another</li><li>To connect individual devices to each other</li><li>To receive transmissions and forward them to their destination.</li></ul><p>Bridge:</p><ul><li>To connect two LANs with the same protocol</li><li>To transmit data between two networks with the same protocol</li></ul><hr><h2 id="Use-of-LAN"><a href="#Use-of-LAN" class="headerlink" title="Use of LAN"></a><strong>Use of LAN</strong></h2><blockquote><p>* Why in a single building it is better to set up LAN rather than WAN?</p><ul><li>Small geographical area</li><li>No leasing to external structures</li></ul></blockquote><p>主要要点是不需要依赖上级的网络基础设施。</p><p><br></p><hr><h2 id="Wireless-Network-Interface-Card-WNIC"><a href="#Wireless-Network-Interface-Card-WNIC" class="headerlink" title="Wireless Network Interface Card(WNIC)"></a><strong>Wireless Network Interface Card(WNIC)</strong></h2><blockquote><p>* Describe the functions of a WNIC.</p><ul><li>Provide interface to wireless network as an antenna</li><li>Receives analog radio waves and convert then into binaries</li><li>Checks incoming transmissions for correct MAC/IP address and ignore transmissions not intended for it.</li><li>Encrypt / encode the data</li><li>Decrypt / decode the data</li><li>Takes digital input and converts to analog waves and send them out with an antenna.</li></ul></blockquote><p><br></p><h2 id="Wireless-Access-Point-WAP"><a href="#Wireless-Access-Point-WAP" class="headerlink" title="Wireless Access Point(WAP)"></a><strong>Wireless Access Point(WAP)</strong></h2><blockquote><ul><li>Hardware component that provides radio communication from the central device to nodes on the network.</li></ul></blockquote><p><br></p><hr><h1 id="第三章：硬件"><a href="#第三章：硬件" class="headerlink" title="第三章：硬件"></a><strong>第三章：硬件</strong></h1><blockquote><p>* Describe what is meant by an embedded system.</p><ul><li>Microcontroller <strong>within a larger system</strong> which performs <strong>one specific task</strong>.</li></ul></blockquote><p><br></p><p>电阻式触摸屏没有5层那么多。一般来讲在AL计算机里，电阻式触摸屏只有两层。</p><p><br></p><p>* Describe how data is transmitted through a USB port</p><ul><li>1 bit transferred at a time</li><li>Can be synchronous or asynchronous</li></ul><p><br></p><hr><h2 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a><strong>RAM</strong></h2><blockquote><p>* Describe using DynamicRAM instead of Static RAM</p><ul><li>Dynamic RAM has lower cost per unit</li><li>When a fast access speed is not needed</li><li>More data can be stored per chip</li></ul></blockquote><p><br></p><p>* Explain why Static RAM is used in the laptop instead of Dynamic RAM</p><ul><li>Static RAM has faster access time<ul><li>because it does noe need to be refreshed</li><li>used on the CPU for improvement of CPU cache speed</li></ul></li></ul><p><br></p><hr><h1 id="第四章：逻辑门与逻辑电路"><a href="#第四章：逻辑门与逻辑电路" class="headerlink" title="第四章：逻辑门与逻辑电路"></a><strong>第四章：逻辑门与逻辑电路</strong></h1><p>画逻辑门图像时，如果两条线相交，<strong>需要在交点处画点 .</strong>。如果条件中出现了0和1，那么<strong>条件为0的那一个对应项加一个<code>NOT</code></strong>。</p><p><br></p><hr><h1 id="第五章：处理器基本原理"><a href="#第五章：处理器基本原理" class="headerlink" title="第五章：处理器基本原理"></a><strong>第五章：处理器基本原理</strong></h1><h2 id="Von-Neumann-model"><a href="#Von-Neumann-model" class="headerlink" title="Von Neumann model"></a><strong>Von Neumann model</strong></h2><p>Stored program concept: <strong>Instructions and data are stored in the same memory space</strong>.</p><p>Parts of the Von Neumann model:</p><ul><li>Registers</li><li>Buses</li><li>Control Unit(CU)</li><li>Arithmetic and Logic Unit(ALU)</li><li>Immediate Access Store(IAS)</li><li>System clock</li></ul><p><br></p><hr><h2 id="Buses"><a href="#Buses" class="headerlink" title="Buses"></a><strong>Buses</strong></h2><blockquote><p>* Identify types of signals that a control bus can transfer</p><ul><li>Timing</li><li>Interruption</li><li>Read</li><li>Write</li></ul></blockquote><p><br></p><blockquote><p>* Explain how control unit, system clock and control bus operate to transfer data between the components of the computer system.</p><ul><li>The system clock will give out timing signals<ul><li>which are being sent on the control bus</li><li>to sync all the other system components</li></ul></li><li>The control unit initiates data transfer<ul><li>by generating signals that are sent on the control bus to other components</li></ul></li></ul></blockquote><p><br></p><blockquote><p>* Describe the roles of the address bus, the data bus and buffers in the process of writing data to the optical disc reader/writer</p><ul><li><p>Buffer:</p><ul><li>Temporarily holds data until it is ready to be transmitted to the device</li></ul></li><li><p>Address Bus:</p><ul><li>Carries the address of the data to be written to the device.</li></ul></li><li><p>Data Bus:</p><ul><li>All data to be written to the device is carried on the databus.</li></ul></li></ul></blockquote><p><br></p><p>* How the laser printer makes use of a buffer.</p><ul><li>The print instructions and data are being sent into the buffer</li><li>The data is transferred from the buffer to the printer at the printer’s speed.<ul><li>allow users to continue use the laptop.</li><li>instead of waiting for response of the slow printer</li></ul></li><li>When the buffer is empty an interrupt is sent to the laptop</li></ul><p><br></p><hr><hr><h2 id="Fetch-Execute-cycle"><a href="#Fetch-Execute-cycle" class="headerlink" title="Fetch-Execute cycle"></a><strong>Fetch-Execute cycle</strong></h2><blockquote><p>* Complete the following descriptions of internal components of a computer by writing the missing terms.</p><ul><li><p>The <strong>Control Bus</strong> transmits the signals to coordinate events based on the electronic pulses of the <strong>system clock</strong>.</p></li><li><p>The <strong>data bus</strong> carries data to the components, while the <strong>address bus</strong> carries the address where data needs to be written to or read from.</p></li><li><p>The <strong>Arithmetic Logic Unit / ALU</strong> performs mathematical operations and logical comparisons.</p></li></ul></blockquote><p><br></p><blockquote><p>* Define the role of registers in the Fetch-Execute cycle.</p><ul><li>Program Counter (PC) holds the <u>address</u> of the next instruction and the <u>contents</u> will be incremented.</li><li>Memory Address Register (MAR) holds the address to fetch the data from PC.</li><li>Memory Data Register (MDR) holds the data at the address in the MAR.</li><li>the fetched instructions will be transferred to Current Instruction Register (CIR) for decoding and execution.</li></ul></blockquote><p><br></p><h2 id="F-E-Cycle-and-Interruption"><a href="#F-E-Cycle-and-Interruption" class="headerlink" title="F-E Cycle and Interruption"></a><strong>F-E Cycle and Interruption</strong></h2><blockquote><p>* Describe when interrupts are detected in the F-E cycle and how the interrupts are handled.</p><ul><li>Interruption will be detected <u>at the start/end of the F-E cycle</u>.</li><li>the priority will be checked.</li><li>if the priority is low then continue F-E cycle</li><li>if else, the current process will be stored on a stack</li><li>the location of the interruption will be detected</li><li>an appropriate ISR will be called to handle the interrupt</li><li>when the ISR finished, check for further interrupts and return to step 1</li><li>otherwise load data from the stack and continue the process</li></ul></blockquote><p><br></p><blockquote><p>* Describe the purpose of an interrupt in a computer system.</p><ul><li>to <strong>send a signal</strong> from a device or process</li><li>… seeking the attention of the processor</li></ul></blockquote><p><br></p><blockquote><p>* State two causes of a software interrupt</p><ul><li>Division by zero</li><li>Attempt to access an invalid memory location</li><li>Array index out of bounds</li><li>stack overflow</li></ul></blockquote><p><br></p><hr><h2 id="Register"><a href="#Register" class="headerlink" title="Register"></a><strong>Register</strong></h2><p>Program Counter(PC): <strong>Store the address of the next instruction to be fetched</strong></p><p>Memory Address Register(MAR): <strong>store the address of the memory location currently being read from</strong></p><p>Index Register(IX): <strong>To store a value that is added to an address to give another address</strong> or <strong>Store a value used for indexed addressing</strong>.</p><p>Status Register(SR): <strong>Store bits that are either set or cleared which can be referenced individually</strong>.</p><p><br></p><blockquote><p>* Describe the purpose of the Control Unit(CU) in a CPU</p><ul><li>to coordinate the actions of other components in the CPU</li><li>to send / receive control signals along the control bus</li><li>to manage the execution of the instructions</li><li>to control the communication between the components of the CPU</li></ul></blockquote><p><br></p><hr><h2 id="Register-transfer-notation"><a href="#Register-transfer-notation" class="headerlink" title="Register transfer notation"></a><strong>Register transfer notation</strong></h2><blockquote><p>    <code>MAR ⬅ [PC]</code>, The <strong>contents</strong> of the PC are copied to the MAR</p><p>    <code>PC ⬅ [PC] + 1;</code>, <strong>Address</strong> in PC in incremented</p><p>    <code>MDR ⬅ [[MAR]]</code>, The data held in MAR is copied to the MAR</p><p>    <code>CIR ⬅ [MDR]</code></p></blockquote><p>注意了，一定是MAR中的内容传输到MDR！有且仅有这一步是带双括号的。</p><p><br></p><hr><blockquote><p>* How clock speed impact the speed of the computer?</p><ul><li>Each <u>instruction</u> in executed on a clock pulse.<br>…so the clock speed dictates the number of <u>instructions</u> that can be run per second</li><li>The faster the clock speed the more <u>instructions</u> can be run per second.</li></ul></blockquote><p><br></p><p>见到clock speed，就需要结合<strong>instruction</strong>答题。</p><p><br></p><hr><hr><h1 id="第六章：汇编语言程序设计"><a href="#第六章：汇编语言程序设计" class="headerlink" title="第六章：汇编语言程序设计"></a><strong>第六章：汇编语言程序设计</strong></h1><p><br></p><p>LSR 和 LSL 分别是向右和向左逻辑移位。</p><p>假设我们逻辑移位的位数为n：</p><p>向右逻辑移位会使得值变小，或者说：<strong>The value will be divided by 2<sup>n</sup></strong>.<br>向左逻辑移位会使得值变大，或者说：<strong>The value will be multiply by 2<sup>n</sup></strong>.</p><p><br></p><p>Trace table里面如果有指令对内存地址中的值做了处理，但是值没有更新。这种情况下就不需要在表格中再写一遍了。</p><p><br></p><hr><h1 id="第七章：控制与监控系统"><a href="#第七章：控制与监控系统" class="headerlink" title="第七章：控制与监控系统"></a><strong>第七章：控制与监控系统</strong></h1><blockquote><p>* A fridge has to control the temperature of a chamber between 4 to 6 degree Celsius.<br>  Explain why the system in the refrigerator is a control and not a monitoring system.</p><ul><li><em>Control system is</em> <strong>system uses feedback</strong>.</li><li>Since the microcontroller has to turn on the cooling system depending on the environment, the system is a control system &gt; because <strong>it causes action</strong>.</li></ul></blockquote><p><br></p><hr><blockquote><p>* Explain the importance of feedback in a control system.</p><ul><li>to ensure the system operates with the given criteria</li><li>… by enabling system output to affect subsequent system input</li><li>… thus allowing conditions to be <u>automatically</u> adjusted</li></ul></blockquote><hr><h1 id="第八章：系统软件"><a href="#第八章：系统软件" class="headerlink" title="第八章：系统软件"></a><strong>第八章：系统软件</strong></h1><h2 id="Operating-system"><a href="#Operating-system" class="headerlink" title="Operating system"></a><strong>Operating system</strong></h2><blockquote><p>* Identify key management tasks that the Operating System will perform.</p><ul><li>Memory management</li><li>File management</li><li>Security management</li><li>Hardware / device / resources management</li><li>Input/Output management</li><li>Process management</li><li>error checking and recovery</li><li>provision of a platform for software</li><li>provision of a user interface</li></ul></blockquote><p><br></p><blockquote><p>* Describe the key management tasks of an operating system.</p><ul><li><p>Memory management</p><ul><li>Controls the movement of the data between RAM, processor, VM</li><li>allocates memory to processes</li></ul></li><li><p>File management</p><ul><li>Creates files/folders</li><li>Renames file/folders</li></ul></li><li><p>Security management</p><ul><li>Creates accounts/passwords</li><li>Provide/upgrade firewalls / anti-malware</li></ul></li><li><p>Hardware management</p><ul><li>Receives data from input devices</li><li>sends data to output device</li><li>Use of device drivers</li></ul></li><li><p>Process management</p><ul><li>Decides which process to run next</li><li>Supports multitasking</li></ul></li></ul></blockquote><p><br></p><hr><h2 id="Process-management"><a href="#Process-management" class="headerlink" title="Process management"></a><strong>Process management</strong></h2><blockquote><p>* Describe how the Operating System manages processes in the computer</p><ul><li>Decide which order to run the processes</li><li>Manages which resources that the process requires</li><li>Prevents interference between processes</li><li>Allow multi-tasking</li><li>Handling priorities and interruptions</li></ul></blockquote><p><br></p><hr><h2 id="Device-management"><a href="#Device-management" class="headerlink" title="Device management"></a><strong>Device management</strong></h2><blockquote><p>* Describe how the OS manages the peripheral hardware devices of the computer.</p><ul><li>Installs hardware drivers<ul><li>to allow communication between computer and devices</li></ul></li><li>Sends data and receives data to and from an input device / output device</li><li>Handles buffers<ul><li>to ensure smooth transfer between devices that transmit and receive at different speeds</li></ul></li><li>Manage interrupts</li></ul></blockquote><p><br></p><hr><h2 id="File-management"><a href="#File-management" class="headerlink" title="File management"></a><strong>File management</strong></h2><blockquote><p>* Describe the file management tasks that an Operating System performs</p><ul><li>Storage space is divided into file allocation units</li><li>Space is allocated too particular file</li><li>Create directory structures</li><li>Specifies the logical method od the file storage</li><li>Provides file naming conventions</li></ul></blockquote><p><br></p><hr><h2 id="Memory-management"><a href="#Memory-management" class="headerlink" title="Memory management"></a><strong>Memory management</strong></h2><blockquote><p>* Describe the ways in which memory management organises and allocates Random Access Memory (RAM).</p><ul><li>RAM is assigned into blocks</li><li>dynamic allocation of RAM to processes</li><li>reclaims unused blocks of RAM</li><li>prevents two process occupying the same area of RAM at the same time</li><li>moves data from secondary storage when needed</li></ul></blockquote><p><br></p><hr><h2 id="System-clock"><a href="#System-clock" class="headerlink" title="System clock"></a><strong>System clock</strong></h2><blockquote><p>* Describe the purpose of the system clock</p><ul><li>sync operations bu creating time signals</li><li>to keep track of the date and time</li><li>to process operations in the correct order</li></ul></blockquote><p><br></p><hr><h2 id="Compiler-and-Interpreter"><a href="#Compiler-and-Interpreter" class="headerlink" title="Compiler and Interpreter"></a><strong>Compiler and Interpreter</strong></h2><blockquote><p>* Drawbacks of using a compiler compared to an interpreter:  </p><ul><li>large amount of source code takes time to compile</li><li>errors cannot be corrected in real-time</li><li>the program will not run if there are any errors</li><li>cannot easily test specific sections of the source code</li></ul></blockquote><p><br></p><blockquote><p>* Why high-level language programs might be partially compiled and partially interpreted:</p><ul><li>partially compiled programs <strong>can be used on different platforms</strong> as they are <strong>interpreted to run</strong>.</li><li>code is <strong>optimised for the CPU</strong> as the <strong>machine code is generated at run time</strong>.</li></ul></blockquote><p><br></p><blockquote><p>* Advantages for programmers to use Interpreters and Compilers:</p><ul><li><p><strong>Interpreters</strong></p><ul><li>Allow the developers to make real-time changes<ul><li>so the program can be tested at each stage</li><li>the effects of the changes can be seen immediately</li></ul></li><li>The developers can test the program even if it is not complete<ul><li>so small parts of the program can be tested without testing the whole program</li></ul></li></ul></li><li><p><strong>Compilers</strong></p><ul><li>The developer can debug multiple errors simultaneously</li><li>Produces an executable file<ul><li>so that developer can test the program multiple times without recompiling</li></ul></li></ul></li></ul></blockquote><p><br></p><hr><h2 id="Program-library"><a href="#Program-library" class="headerlink" title="Program library"></a><strong>Program library</strong></h2><blockquote><p>* Describe how a program library can be used while writing a computer program.</p><ul><li>Program libraries store pre-written functions and routines</li><li>The program library can be imported to the program</li><li>The routines can be call in the program</li></ul></blockquote><p><br></p><blockquote><p>* Explain the benefits to the programmer of using program libraries.</p><ul><li>Save programming and testing time as code does not have to re-written from scratch.</li><li>Code is already tested so it is more robust.</li><li>If there is an update in the library routine the program will be updated automatically.</li><li>can perform complex calculations that the programmer may not be able to do.</li></ul></blockquote><p><br></p><hr><h2 id="Dynamic-Link-Library-DLL"><a href="#Dynamic-Link-Library-DLL" class="headerlink" title="Dynamic Link Library(DLL)"></a><strong>Dynamic Link Library(DLL)</strong></h2><blockquote><p>* State benefits to a programmer of using Dynamic Link Library(DLL) files.</p><ul><li>Memory requirements for program are reduced as dynamic link library is loaded only once</li><li>The executable file size is smaller because the executable does not contain all the library routines</li><li>Maintenance not needed to be done by the programmer because the DLL is separate from the program</li><li>No need to recompile the main program when changes are made to DLL because changes correction to the DLL file code are done independently of the main program</li></ul></blockquote><p><br></p><hr><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a><strong>Buffer</strong></h2><blockquote><p>* Explain the purpose of buffer in a computer system using one example.</p><ul><li>To act as a temporary storage before it is used by the receiving device</li><li><p>to allow processes to operate at different speeds</p></li><li><p>video buffer when streaming videos</p></li><li>keyboard buffer when performing data entry</li><li>printer buffer used when data is transferred from a computer to printer</li></ul></blockquote><p><br></p><hr><h2 id="Embedded-system"><a href="#Embedded-system" class="headerlink" title="Embedded system"></a><strong>Embedded system</strong></h2><blockquote><p>* Explain the reasons why ROM is used in an embedded system</p><ul><li>ROM is used to store data that no change</li><li>data must be stored even when the device is without power</li><li>to store boot up instructions</li></ul></blockquote><p><br></p><blockquote><p>* Explain what is an embedded system.</p><ul><li>Dedicated to one task</li><li>Does not require much processing power</li><li>Built into a larger system</li><li>Contains firmware that cannot be easily updated</li><li>The system does not have its own operating system</li><li>An embedded system must contain a processor, memory and I/O capability</li></ul></blockquote><p><br></p><hr><h2 id="Utility-software"><a href="#Utility-software" class="headerlink" title="Utility software"></a><strong>Utility software</strong></h2><p>Back-up software: </p><ul><li>Make copy of data <strong>at regular intervals</strong>.</li><li>So that if it is lost it can be retrieved.</li></ul><p>Defragmentation software:</p><ul><li>Make individual files to free space together</li><li>Improve disk access times</li></ul><p><br></p><blockquote><p>* Why a hard disk formatter is needed for the new disk.</p><ul><li>Disk needs to be initialized</li><li>Disk need to be error-checked</li><li>A new file system needs to be generated on the disk</li><li>The file allocation table needs to be set up</li></ul></blockquote><p><br></p><hr><h1 id="第九章：安全、隐私和数据完整性"><a href="#第九章：安全、隐私和数据完整性" class="headerlink" title="第九章：安全、隐私和数据完整性"></a><strong>第九章：安全、隐私和数据完整性</strong></h1><h2 id="Data-security-integrity-privacy"><a href="#Data-security-integrity-privacy" class="headerlink" title="Data security, integrity, privacy"></a><strong>Data security, integrity, privacy</strong></h2><p>Data security: <strong>Protects data against loss</strong>.</p><p>Data privacy: <strong>Protects data against unauthorised access</strong>.</p><p>Data integrity: <strong>Ensuring the consistency / accuracy of the data</strong>.</p><p><br></p><h2 id="Data-validation-verification"><a href="#Data-validation-verification" class="headerlink" title="Data validation, verification"></a><strong>Data validation, verification</strong></h2><p>Data validation: <strong>Validation checks that data is reasonable / sensible</strong>.</p><p>Data verification: <strong>Verification checks that data is the same as the original</strong>.</p><p><br></p><hr><h2 id="Types-of-validation-check"><a href="#Types-of-validation-check" class="headerlink" title="Types of validation check:"></a><strong>Types of validation check:</strong></h2><ul><li><strong>Presence check:</strong> 样式检查，用来检查输入的内容是否是空的。  </li><li><strong>Format check:</strong> 格式检查，来检查输入的数据是否符合要求的格式(比如日期的格式就必须是 dd/mm/yyyy )。</li><li><strong>Length check:</strong> 长度检查，用来检查数据是否符合应有的长度。比如说用来检查输入的电话号码是否是11位。</li><li><strong>Range check:</strong> 范围检查，用来检查输入的数据是否在合法范围内。</li><li><strong>Limit check:</strong> 限制检查，检查输入的数据是否突破了一个阈值。</li><li><strong>Type check:</strong> 数据形式检查，用来检查输入的数据形式是否合法。(比如说构成日期的每一位数据都必须是正整数，不能是小数。)</li><li><strong>Existence check:</strong> 存在性检查，检查输入的内容是否已经出现过，或者检查输入的内容是否在一个列表内。比如说在同一个文件夹下将一个文件重命名成另一个文件的样子会报错，是因为存在Existence check。</li></ul><p><br></p><hr><h2 id="Threats"><a href="#Threats" class="headerlink" title="Threats"></a><strong>Threats</strong></h2><p>* Difference between pharming and phishing</p><ul><li><p>Difference:</p><ul><li>Pharming is malicious code that redirects to a fake website. Phishing uses an email to prompt user action</li><li>Pharming is automatic. Phishing requires user action</li></ul></li><li><p>Similarity:</p><ul><li>Both try to obtain financial or personal information</li><li>Both are a false representation of an official organization</li><li>Both make use of fake websites</li></ul></li></ul><p><br></p><hr><h1 id="第十章：道德与所有权"><a href="#第十章：道德与所有权" class="headerlink" title="第十章：道德与所有权"></a><strong>第十章：道德与所有权</strong></h1><blockquote><p>* Describe what is meant by copyright.</p><ul><li>The <strong>formal and legal rights</strong> to ownership.</li><li>Protects against <strong>unauthorised</strong> reproduction of work.</li><li>Provides for legal right of redress</li></ul></blockquote><p><br></p><blockquote><p>* Explain benefits to a programmer of distributing a program using a shareware license</p><ul><li>Users can trial the program and give constructive feedback</li><li>More people might try the program because the trial is free of charge</li><li>Allow bugs to be founded and corrected on a wide range of computer</li><li>The programmer may get income if users purchased the program</li><li>Allow the program be protected by copyright.</li></ul></blockquote><p><br></p><hr><h2 id="About-ethics"><a href="#About-ethics" class="headerlink" title="About ethics"></a><strong>About ethics</strong></h2><blockquote><p>* Describe the benefits of joining a professional ethical body.</p><ul><li><p>Has ethical guidelines to follow<br>… so clients / other staff know the standards being applied<br>… so he does not have to decide what is ethical it’s written down</p></li><li><p>Clients / staff know other person in the group is reputable<br>… recognition of his skills / knowledge<br>… there might be requirements for entry</p></li><li><p>They provide help and support<br>… for instance if he needs legal advice</p></li><li><p>They run training courses<br>… to keep his skills up-to-date</p></li></ul></blockquote><p><br></p><blockquote><p>* A person is unfamiliar with the IDE he is required to use. Describe the ways in which this person can act ethically in this situation.</p><ul><li>He can tell the manager he has not used it</li><li>He can perform his own research on how to use it</li><li>He can explain to the manager that he needs additional training</li><li>He can ask for a mentor </li><li>He can practice at home before starting</li></ul></blockquote><p><br></p><blockquote><p>* Why hiding bugs from other group member is unethical?</p><ul><li><p>He did not act in best interest of product<br>… because the product might fail because he did not report the error</p></li><li><p>He did not act in best interest of clients<br>… because if the product does not work then they have been let down because he did not report the error</p></li><li><p>He did not act in best interest of the profession<br>… he is letting his profession down because he did not report the error</p></li><li><p>He did not act in best interest of the company<br>… not correcting the error could lead to later problems</p></li></ul></blockquote><p><br></p><hr><blockquote><p>* Describe why it is important for a developer in a software developer team acts ethically in relation to her team members.</p><ul><li>To make sure the team members feel valued</li><li>To get the best work out of the team</li><li>To enable them to work well together</li><li>To enable them to create the best product for the client</li></ul></blockquote><p><br></p><hr><blockquote><p>* Describe how computer would use Artificial Intelligence (AI) to play a board game (e.g. chess).</p><ul><li>The decision making algorithms of the game will be stored.</li><li>The AI program is trained, by playing many times.</li><li>AI will look (ahead) at possible moves<br>…analyse the pattern pf past choices<br>…and choose the move most likely to be successful</li><li>Computer could learn how to improve // learn from previous mistakes<br>…by storing the positive/negative result of choices<br>…and changing its future choices.</li></ul></blockquote><p><br></p><hr><blockquote><p><strong>Characteristics of software</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">Statement</th><th style="text-align:center">Free Software Foundation</th><th style="text-align:center">Open Source Initiative</th><th style="text-align:center">Shareware</th><th style="text-align:center">&gt; Commercial Software</th></tr></thead><tbody><tr><td style="text-align:center">The user can edit the source code</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">The user <strong>must</strong> always pay before being able to use the software</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">The user can redistribute the software</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">The user always gets a trial period</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">√</td></tr></tbody></table></div></blockquote><p><br></p><hr><h1 id="第十一章：数据库"><a href="#第十一章：数据库" class="headerlink" title="第十一章：数据库"></a><strong>第十一章：数据库</strong></h1><blockquote><p>* Explain why relational database is usually better than a file-based database.</p><ul><li><p>Flat file has <strong>more data redundancy</strong>.<br>…because the same data is stored many times.</p></li><li><p>Flat file has <strong>worst data integrity</strong>.<br>…because duplicate data might be stored differently.<br>(when data is updated in one place, it is not updated everywhere)</p></li><li><p>Hard to perform <strong>complex searches</strong>.<br>…because a new program built for searching data has to be written each time depending on searching requirement.</p></li><li><p>Flat-file could have <strong>lack of privacy</strong>.<br>…as user views cannot easily be implemented.</p></li><li><p>There is a <strong>program-data dependency</strong> with flat-files.<br>…because any changes to the structure of the flat-files means the program that access to the data has to be re-written.</p></li></ul></blockquote><p><br></p><hr><blockquote><p>* Describe the ways in which access rights can be used to protect the data in a database from unauthorised access.</p><ul><li><p>Access rights give managers access to different elements<br>… by having different accounts / logins<br>… which have different access rights</p></li><li><p>Specific <strong>views</strong> can be assigned to himself and to the managers<br>… managers can only see the data for their own shops</p></li></ul></blockquote><p><br></p><hr><p>如果一个表包含另一个表的主键，注意包含的意思是即便这个主键在另一个表内不是键也可以，那么这个包含另一个表主键的表就是关系的维护者，进而这个表表示的就是多，另一个表就是一。</p><p><br></p><hr><h2 id="Data-dictionary"><a href="#Data-dictionary" class="headerlink" title="Data dictionary"></a><strong>Data dictionary</strong></h2><blockquote><p>* Describe the purpose and contents of the data dictionary in the DBMS</p><ul><li>Data dictionary <strong>stores metadata of the database</strong> / stores information about the data stored.</li><li>table name</li><li>field name</li><li>data type</li><li>type of validation</li><li>Primary key</li><li>Foreign key</li><li>relationships</li></ul></blockquote><p><br></p><hr><h2 id="Logical-schema"><a href="#Logical-schema" class="headerlink" title="Logical schema"></a><strong>Logical schema</strong></h2><blockquote><p>* Describe what is meant by a Logical schema:  </p><ul><li>is the <strong>overview of a database structure</strong>, a model of a database that is not specific to one DBMS.</li><li>models the problem and situations</li><li>by using methods like E-R diagrams.</li></ul></blockquote><p><br></p><hr><h2 id="Query-processor"><a href="#Query-processor" class="headerlink" title="Query processor"></a><strong>Query processor</strong></h2><blockquote><p>* Describe the purpose of a query processor in a DBMS</p><ul><li>Allow users to enter criteria</li><li>searches for the data that meets the entered criteria</li><li>organises the results to be displayed to the user</li></ul></blockquote><p><br></p><hr><h2 id="Data-integrity-in-DBs"><a href="#Data-integrity-in-DBs" class="headerlink" title="Data integrity in DBs"></a><strong>Data integrity in DBs</strong></h2><ul><li>Validation and verification rules</li><li>If one table is updated all the tables are updated.</li></ul><p><br></p><blockquote><p>* Why referential integrity is important in a DB?</p><ul><li>Make sure that data is consistent</li><li>Make sure all the data is up-to-date</li><li>Make sure all the foreign key has a correspond primary key</li><li>Make sure queries can return accurate results</li></ul></blockquote><p><br></p><hr><h2 id="Common-definitions-about-database"><a href="#Common-definitions-about-database" class="headerlink" title="Common definitions about database:"></a><strong>Common definitions about database:</strong></h2><p>Field: <strong>A column /  attribute in a table.</strong></p><p>       <em>For instance:</em><br>      <em>CUSTOMER(<u>CustomerID</u>, FirstName, LastName, DateOfBirth, Email)</em><br>      <em>A field is <b>CustomerID</b> in the table <b>CUSTOMER</b></em></p><p><br></p><p>Entity: <strong>Anything that data can be stored about.</strong></p><p>       <em>For instance: A customer in the last example table.</em></p><p><br></p><p>Primary Key: <strong>The unique attribute used to identify the record</strong>.</p><p><br></p><p>Foreign Key: <strong>An attribute which is linked to primary key in other table.</strong></p><p>       <em>No hints will be provided as this is too basic.</em></p><p><br></p><p>Secondary key: <strong>a candidate key that has not been chosen as the primary key.</strong></p><p><br></p><p>Tuple: <strong>A single row in a table</strong>.</p><p>       <em>No hints will be provided as this is too basic.</em></p><p><br></p><hr><h2 id="Composite-primary-key"><a href="#Composite-primary-key" class="headerlink" title="Composite primary key"></a><strong>Composite primary key</strong></h2><blockquote><p>* Explain why the table has a composite primary key</p><ul><li>Neither key uniquely identifies each tuple by itself.</li><li>One element cannot appear in the same file twice so together they are unique.</li></ul></blockquote><p><br></p><hr><h2 id="Access-rights"><a href="#Access-rights" class="headerlink" title="Access rights"></a><strong>Access rights</strong></h2><blockquote><p>* Describe the ways in which access rights can be used to protect the data in the database from unauthorised access.</p><ul><li>Access rights give managers access to different elements</li><li>… by having <strong>different accounts</strong></li><li>… which have <strong>different access rights</strong>, (read only, no access, read and write)</li><li>Specific views can be assigned to himself and to the managers</li><li>… e.g. managers can only see the data for their own shops.</li></ul></blockquote><p>简单来讲就是分级别的账户管理。</p><hr><h2 id="Conditions-to-3-normal-forms"><a href="#Conditions-to-3-normal-forms" class="headerlink" title="Conditions to 3 normal forms:"></a><strong>Conditions to 3 normal forms:</strong></h2><blockquote><p>3NF: All fields in all tables are <strong>dependent fully on the primary key</strong> and <strong>no other partial dependencies.</strong></p></blockquote><p><br></p><p>上面的是满足三个范式的描述，分开的描述如下：</p><blockquote><p>1NF: <strong>No repeating groups</strong>.<br>2NF: <strong>No partial dependencies</strong>, fully dependent on the primary key.<br>3NF: <strong>No non-key dependencies</strong>.</p></blockquote><hr><h2 id="Data-Definition-Language-DDL-manipulation"><a href="#Data-Definition-Language-DDL-manipulation" class="headerlink" title="Data Definition Language (DDL) manipulation."></a><strong>Data Definition Language (DDL) manipulation.</strong></h2><blockquote><p><em>RENTAL(<u>RentalID</u>, CustomerID, HouseID, MonthlyCost, DepositPaid)</em></p><p>* Complete the following Data Definition Language (DDL) statement tp define the table RENTAL.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> RENTAL(</span><br><span class="line">    RentalID <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    CustomerID <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    HouseID <span class="type">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    MonthlyCost <span class="type">REAL</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    DepositPaid <span class="type">BOOLEAN</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (RentalID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></blockquote><p><br></p><blockquote><p>* Write an SQL script to count the number of films that were released in Jan. 2022</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(FilmID)</span><br><span class="line"><span class="keyword">FROM</span> FILM_FACT</span><br><span class="line"><span class="keyword">WHERE</span> ReleaseDate <span class="operator">=</span> "January 2022";</span><br></pre></td></tr></table></figure></blockquote><p>SQL语句结尾记得加上分号。</p><p><br></p><p>可变长度字符串使用<code>VARCHAR</code>数据类型表示。字符串的长度需要在括号中定义。</p><p>浮点型使用<code>REAL</code>数据类型表示。与<code>VARCHAR</code>不同，<code>REAL</code>不需要在括号中定义长度。</p><p><br></p><hr><h2 id="Data-Manipulation-Language-DML-manipulation"><a href="#Data-Manipulation-Language-DML-manipulation" class="headerlink" title="Data Manipulation Language (DML) manipulation"></a><strong>Data Manipulation Language (DML) manipulation</strong></h2><blockquote><p><em>CUSTOMER(<u>CustomerID</u>, FirstName, LastName, DateOfBirth, Email)</em><br><em>HOUSE(<u>HouseID</u>, HouseNumber, Road, Town, Bedrooms, Bathrooms)</em><br><em>RENTAL(<u>RentalID</u>, CustomerID, HouseID, MonthlyCost, DepositPaid)</em></p><p>* Write a Data Manipulation Language (DML) script to return the first name and last name of all customers who have not paid their deposit. If a customer has not paid their deposit, the value of <code>DepositPaid</code> will be <code>No</code>.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FirstName, LastName</span><br><span class="line"><span class="keyword">FROM</span> CUSTOMER, RENTAL</span><br><span class="line"><span class="keyword">WHERE</span> DepositPaid <span class="operator">=</span> <span class="string">'No'</span></span><br><span class="line"><span class="keyword">AND</span> RENTAL.CustomerID <span class="operator">=</span> CUSTOMER.CustomerID;</span><br></pre></td></tr></table></figure></blockquote><p><br></p><blockquote><p>* Complete a DML statement to include the information in the table CAR.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> CAR</span><br><span class="line"><span class="keyword">VALUES</span> ("123AA","Tiger","Lioness",<span class="number">10500</span>,"12BSTREET")</span><br></pre></td></tr></table></figure></blockquote><p>插入数据使用INSERT INTO, VALUES。</p><p><br></p><blockquote><p>* Complete the DML statements to return the number of cars for sale in each shop.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span> (RegistrationNumber)</span><br><span class="line"><span class="keyword">FROM</span> CAR</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ShopID</span><br></pre></td></tr></table></figure></blockquote><p>见到了each，就大概率需要分组输出了<br>分组输出就要先选择输出对象，然后使用GROUP BY约束分组条件。</p><p><br></p><hr><h2 id="Structured-Query-Language-SQL-scripts"><a href="#Structured-Query-Language-SQL-scripts" class="headerlink" title="Structured Query Language (SQL) scripts"></a><strong>Structured Query Language (SQL) scripts</strong></h2><blockquote><p>* A database has the following structure:</p><p>       <em>STUDENT(<u>StudentID</u>, FirstName, LastName)</em><br>       <em>TEST(<u>TestID</u>, Description, TotalMarks)</em><br>       <em>STUDENT_TEST(<u>StudentID</u>, <u>TestID</u>, Mark)</em></p><p>Sample data to be stored in the table <em>STUDENT_TEST</em> is shown:</p><div class="table-container"><table><thead><tr><th style="text-align:center">StudentID</th><th style="text-align:center">TestID</th><th style="text-align:center">Mark</th></tr></thead><tbody><tr><td style="text-align:center">12</td><td style="text-align:center">A1</td><td style="text-align:center">50</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">P10</td><td style="text-align:center">100</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">A1</td><td style="text-align:center">75</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">P10</td><td style="text-align:center">60</td></tr></tbody></table></div><p><strong>Write a Structured Query Language (SQL) script to create the table STUDENT_TEST.</strong></p><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> STUDENT_TEST(</span><br><span class="line">  StudentID <span class="type">INTEGER</span>,</span><br><span class="line">  TestID <span class="type">VARCHAR</span>,</span><br><span class="line">  Mark <span class="type">INTEGER</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(StudentID, TestID),</span><br><span class="line">  <span class="keyword">FOREIGN</span> KEY(TestID) <span class="keyword">REFERENCES</span> TEST(TestID),</span><br><span class="line">  <span class="keyword">FOREIGN</span> KEY(StudentID) <span class="keyword">REFERENCES</span> STUDENT(StudentID),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><p>* Write a Structured Query Language (SQL) script to find the average mark of students in test A7.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Mark) <span class="keyword">FROM</span> STUDENT_TEST <span class="keyword">WHERE</span> TestID <span class="operator">=</span> "A7"</span><br></pre></td></tr></table></figure></blockquote><p><br></p><blockquote><p>* Complete the SQL script to return the number of devices stored in the database for the staff member with the first name “Ali” and the last name “Khan”.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(STAFF.StaffID)</span><br><span class="line"><span class="keyword">FROM</span> STAFF</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> DEVICE</span><br><span class="line"><span class="keyword">ON</span> STAFF.StaffID <span class="operator">=</span> DEVICE.StaffID</span><br><span class="line"><span class="keyword">WHERE</span> STAFF.FirstName <span class="operator">=</span> <span class="string">'Ali'</span></span><br><span class="line"><span class="keyword">AND</span> STAFF.LastName <span class="operator">=</span> <span class="string">'Khan'</span>;</span><br></pre></td></tr></table></figure></blockquote><p><code>INNER JOIN</code>的格式是 INNER JOIN, ON<br>如果需要并列WHERE条件可以使用AND比较符。</p><p><br></p><blockquote><p>* Complete the SQL script to display the total number of photographs that have been taken using a camera ID starting with <code>CAN</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(PhotoID)</span><br><span class="line"><span class="keyword">FROM</span> PHOTO_DATA</span><br><span class="line"><span class="keyword">WHERE</span> CameraID <span class="keyword">LIKE</span> "CAN%";</span><br></pre></td></tr></table></figure></blockquote><p>首先见到数number就使用COUNT语句。<br>其次，部分匹配搜索约束语句使用 <code>LIKE "___%"</code>，百分号表示之后的内容可以不匹配。</p><p><br></p><p>* Write an SQL script to include two new fields in <code>CAMERA_DATA</code> to store the number of photographs currently on the camera and the date the camera was last used.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> CAMERA_DATA</span><br><span class="line"><span class="keyword">ADD</span> Number_Of_Photos <span class="type">INTEGER</span></span><br><span class="line"><span class="keyword">ADD</span> Lastused <span class="type">DATE</span>;</span><br></pre></td></tr></table></figure><p>向表内加入attribute的格式是<code>ADD &lt;attribute_name&gt; &lt;data_type&gt;</code></p><p><code>&lt;attribute_name&gt;</code>与<code>&lt;data_type&gt;</code>之间不需要加<code>TYPE</code>。</p><p><br></p><hr><h1 id="PART-TWO：基本问题的解决与编程技能"><a href="#PART-TWO：基本问题的解决与编程技能" class="headerlink" title="PART TWO：基本问题的解决与编程技能"></a><strong>PART TWO：基本问题的解决与编程技能</strong></h1><h1 id="第十二章：算法设计与解决问题"><a href="#第十二章：算法设计与解决问题" class="headerlink" title="第十二章：算法设计与解决问题"></a><strong>第十二章：算法设计与解决问题</strong></h1><h1 id="第十三章：数据类型与结构"><a href="#第十三章：数据类型与结构" class="headerlink" title="第十三章：数据类型与结构"></a><strong>第十三章：数据类型与结构</strong></h1><h1 id="第十四章：编程与数据的表示"><a href="#第十四章：编程与数据的表示" class="headerlink" title="第十四章：编程与数据的表示"></a><strong>第十四章：编程与数据的表示</strong></h1><h1 id="第十五章：软件开发"><a href="#第十五章：软件开发" class="headerlink" title="第十五章：软件开发"></a><strong>第十五章：软件开发</strong></h1><h1 id="PART-THREE-进阶理论"><a href="#PART-THREE-进阶理论" class="headerlink" title="PART THREE: 进阶理论"></a><strong>PART THREE: 进阶理论</strong></h1><h1 id="第十六章：数据的表示"><a href="#第十六章：数据的表示" class="headerlink" title="第十六章：数据的表示"></a><strong>第十六章：数据的表示</strong></h1><p>User defined datatype:</p><blockquote><p>Data type constructed by the programmer<br>Data type that references at least one other datatype<br>… the data types can be primitive or user defined.<br>e.g.: class</p></blockquote><p><br></p><hr><p>Enumerated data type: </p><ul><li>a list of possible data values</li><li>The values defined here have an implied order of values to allow comparisons to be made.</li></ul><p><code>DECLARE &lt;identifier&gt; = (&lt;value1&gt;, &lt;value2&gt;, ..., &lt;valuen&gt;)</code></p><hr><p><code>DECLARE AccessionNumber : ARRAY[1:NumberOfCopies] OF INTEGER</code></p><p><br></p><hr><p>Files:</p><p>Serial files:</p><ul><li>Contains records that have no defined order.</li><li>Can be used for:<ul><li>Batch processing</li><li>Backing up data on magnetic tape</li><li>Banks record transactions involving customer accounts everytimg there is a transaction</li></ul></li></ul><p>Sequential files:</p><ul><li>Has records that are ordered and is suited for long term storage of data and thus is considered an alternative to a database.</li></ul><p>Direct access / random access files:</p><ul><li>Access isn’t defined by a sequential reading of the file.</li><li>Well suited for larger files as it takes longer to access sequentially.</li></ul><p><br></p><hr><h1 id="第十七章：通讯及互联网技术"><a href="#第十七章：通讯及互联网技术" class="headerlink" title="第十七章：通讯及互联网技术"></a><strong>第十七章：通讯及互联网技术</strong></h1><h2 id="Circuit-switching-and-Packet-switching"><a href="#Circuit-switching-and-Packet-switching" class="headerlink" title="Circuit switching and Packet switching:"></a>Circuit switching and Packet switching:</h2><blockquote><p>Circuit switching:</p><ul><li>A dedicated circuit</li><li>circuit is established before transmission starts</li><li>data is transferred using the whole bandwidth</li><li><p>all data is transferred over the same route</p></li><li><p>Advantage: data arrive in order do not need to be rearranged</p></li><li>Disadvantage: nobody else can use the same circuit even it is idle</li></ul><p>Packet switching:</p><ul><li>data is split into packets</li><li>each packet is given its own route</li><li>the routing for a packet depends on the congestion</li><li><p>packets may not arrive in order</p></li><li><p>Advantage: packets can be rerouted if there are any problems</p></li><li>Disadvantage: time taken to reassemble packets at the destination</li></ul></blockquote><p><br></p><hr><p>Protocol: A set of rules governing communication between computers</p><p>MAC Address: A unique number assigned to each device’s networking hardware across the world</p><p>IP Address: A unique number assigned to each node/networking device in a network</p><hr><h2 id="Layer-of-Networking"><a href="#Layer-of-Networking" class="headerlink" title="Layer of Networking:"></a>Layer of Networking:</h2><p>Application: Encode the data being sent</p><p>Network/Internet: Adds IP addresses stating where the data is from and where it is going</p><p>Link: Adds MAC address information to specify which hardware device the message came from and which hardware device the message is going to</p><p>Physical: Enables the successful transmission of data between devices</p><p><br></p><hr><h2 id="Transmission-Protocols"><a href="#Transmission-Protocols" class="headerlink" title="Transmission Protocols:"></a>Transmission Protocols:</h2><p>HTTP: Handles transmission of data to and from a website.</p><p>FTP: Handles transmission of files across a network.</p><p>POP3: Handles the receiving of emails.</p><p>SMTP: Handles the sending of emails.</p><p><br></p><hr><h2 id="Transport-Layer-Security-TLS"><a href="#Transport-Layer-Security-TLS" class="headerlink" title="Transport Layer Security (TLS)"></a>Transport Layer Security (TLS)</h2><p>Purpose: </p><ul><li>Provide for secure communication over a network</li><li>maintain data integrity</li><li>add an additional layer of security</li><li>Provides improved security of SSL</li></ul><p><br></p><hr><h2 id="Topologies"><a href="#Topologies" class="headerlink" title="Topologies"></a>Topologies</h2><p>Bus topology: A network topology in which each workstation is connected to a main cable (backbone).</p><p>Star topology: A network topology in which each workstation is connected to a central node</p><p>Wireless networks: A computer network that uses wireless data connections between its network components</p><p><br></p><hr><h2 id="Devices"><a href="#Devices" class="headerlink" title="Devices"></a>Devices</h2><p>Switch: Allows different networks to connect</p><p>Router: Directs the incoming packets</p><p>Servers: Provides a medium for the storage, sharing of usage of files and applications for its users</p><p>Network Interface Cards(NICs): Consists of the electronic circuitry required to communicate with other networks and devices</p><p><br></p><hr><h2 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h2><p>Ethernet: An array of networking technologies and systems used in local area networks (LAN), where computers are connected within a primary physical space.</p><p><br></p><hr><h1 id="第十八章：硬件与虚拟机"><a href="#第十八章：硬件与虚拟机" class="headerlink" title="第十八章：硬件与虚拟机"></a><strong>第十八章：硬件与虚拟机</strong></h1><h2 id="Virtual-memory"><a href="#Virtual-memory" class="headerlink" title="Virtual memory"></a><strong>Virtual memory</strong></h2><blockquote><p>* Explain what is meant by virtual memory.</p><ul><li>A place on secondary storage used to extend the size of the RAM.<br>… so the CPU can access to larger size of the RAM</li><li>Only when the data is required to be in the main memory will be swapped from virtual memory to the main memory</li><li>Virtual memory is created temporarily.</li></ul></blockquote><p><br></p><hr><h2 id="CISC-amp-RISC"><a href="#CISC-amp-RISC" class="headerlink" title="CISC & RISC"></a><strong>CISC &amp; RISC</strong></h2><blockquote><p>* Describe what is meant by RISC processors:</p><ul><li>Uses simple instructions</li><li>Uses <u>fixed length</u> instructions</li><li>Instructions only require <u>one clock cycle</u></li><li>Uses <u>many</u> registers</li><li>Hardwire CU</li></ul></blockquote><p><br></p><blockquote><p>* Describe what is meant by CISC processors:</p><ul><li>Uses <u>many instruction formats</u></li><li>Uses <u>variable length instructions</u></li><li>Makes use of different addressing modes</li><li>Uses <u>few registers</u></li><li>Has a <u>large instruction set</u></li><li>Requires complex circuits</li><li>Instructions may <u>requires many clock cycles</u>.</li></ul></blockquote><p><br></p><p>Pipelining:</p><ul><li>Instruction level parallelism</li><li>Used extensively in RISC processor based systems to reduce the time taken to run processes</li><li>Multiple registers are employed.</li></ul><p><br></p><hr><h2 id="Parallel-processing"><a href="#Parallel-processing" class="headerlink" title="Parallel processing"></a>Parallel processing</h2><p>SISD:</p><ul><li>Single instruction single data stream</li><li>Found in the early computers</li><li>Contains multiple processors, which have their own memory</li></ul><p><br></p><p>SIMD:</p><ul><li>Single instruction multiple data stream</li><li>Found in array processors</li><li>Contains multiple processors, which have their own memory</li></ul><p><br></p><p>MISD:</p><ul><li>Multiple Instruction Single data stream</li><li>Used to sort large quantities of data</li><li>Contains multiple processors which process the same data</li></ul><p><br></p><p>MIMD:</p><ul><li>Multiple Instruction Multiple Data</li><li>Found in modern personal computers</li></ul><p><br></p><p>Massively parallel computers:</p><ul><li>Computers that contain vast amounts of processing power</li><li>Has a bus structure to support multiple processors and a network infrastructure to support multiple ‘Host’ Conputers</li><li>Commonly used to solve highly complex mathematical problems</li></ul><p><br> </p><hr><h1 id="第十九章：逻辑门与布尔代数"><a href="#第十九章：逻辑门与布尔代数" class="headerlink" title="第十九章：逻辑门与布尔代数"></a><strong>第十九章：逻辑门与布尔代数</strong></h1><h2 id="Boolean-Algebra"><a href="#Boolean-Algebra" class="headerlink" title="Boolean Algebra"></a>Boolean Algebra</h2><div class="table-container"><table><thead><tr><th style="text-align:center">Identity / Law</th><th style="text-align:center">AND form</th><th style="text-align:center">OR form</th></tr></thead><tbody><tr><td style="text-align:center">Identity</td><td style="text-align:center"><code>1.A = A</code></td><td style="text-align:center"><code>0 + A = A</code></td></tr><tr><td style="text-align:center">Null</td><td style="text-align:center"><code>0.A = 0</code></td><td style="text-align:center"><code>1 + A = 1</code></td></tr><tr><td style="text-align:center">Idempotent</td><td style="text-align:center"><code>A.A = A</code></td><td style="text-align:center"><code>A + A = A</code></td></tr><tr><td style="text-align:center">Inverse</td><td style="text-align:center"><code>A.Ā = 0</code></td><td style="text-align:center"><code>A + Ā = 1</code></td></tr><tr><td style="text-align:center">Commutative</td><td style="text-align:center"><code>A.B = B.A</code></td><td style="text-align:center"><code>A + B = B + A</code></td></tr><tr><td style="text-align:center">Associative</td><td style="text-align:center"><code>(A.B).C = A.(B.C)</code></td><td style="text-align:center"><code>(A + B) + C = A + (B + C)</code></td></tr><tr><td style="text-align:center">Distributive</td><td style="text-align:center"><code>A + B.C = (A + B).(A + C)</code></td><td style="text-align:center"><code>A.(B + C) = A.B + A.C</code></td></tr><tr><td style="text-align:center">Absorption</td><td style="text-align:center"><code>A.(A + B) = A</code></td><td style="text-align:center"><code>A + A.B = A</code></td></tr><tr><td style="text-align:center">De Morgan’s</td><td style="text-align:center"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="13.617ex" height="2.523ex" role="img" focusable="false" viewBox="0 -1033 6018.7 1115"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mrow"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(750,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(1194.7,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g><g data-mml-node="mo" transform="translate(0,648)"><svg width="1953.7" height="237" x="0" y="148" viewBox="488.4 148 1953.7 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(5.861,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(2231.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mover" transform="translate(3287.2,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(0,648)"><svg width="750" height="237" x="0" y="148" viewBox="187.5 148 750 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(2.25,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(4259.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mover" transform="translate(5259.7,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(0,615)"><svg width="759" height="237" x="0" y="148" viewBox="189.8 148 759 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(2.277,1)"></path></svg></g></g></g></g></svg></mjx-container></td><td style="text-align:center"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="13.617ex" height="2.523ex" role="img" focusable="false" viewBox="0 -1033 6018.7 1115"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mrow"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(972.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1972.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g><g data-mml-node="mo" transform="translate(0,648)"><svg width="2731.4" height="237" x="0" y="148" viewBox="682.9 148 2731.4 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(8.194,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(3009.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mover" transform="translate(4065,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(0,648)"><svg width="750" height="237" x="0" y="148" viewBox="187.5 148 750 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(2.25,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(4815,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mover" transform="translate(5259.7,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(0,615)"><svg width="759" height="237" x="0" y="148" viewBox="189.8 148 759 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(2.277,1)"></path></svg></g></g></g></g></svg></mjx-container></td></tr><tr><td style="text-align:center">Double Complement</td><td style="text-align:center"><code>̿A = A</code></td><td style="text-align:center"><code>̿A = A</code></td></tr></tbody></table></div><p><br></p><hr><p>Half-Adder: A logic circuit that adds two bits together and outputs their sum.</p><p><br></p><hr><h1 id="第二十章：系统软件"><a href="#第二十章：系统软件" class="headerlink" title="第二十章：系统软件"></a><strong>第二十章：系统软件</strong></h1><h2 id="Multitasking"><a href="#Multitasking" class="headerlink" title="Multitasking"></a>Multitasking</h2><p>Process states:</p><ul><li><strong>Ready</strong>: New process arrived at the memory and the PCB is created</li><li><strong>Running</strong>: Has CPU access</li><li><strong>Blocked</strong>: Cannot progress until some event has occurred</li></ul><p><br></p><hr><h2 id="Virtual-Memory"><a href="#Virtual-Memory" class="headerlink" title="Virtual Memory"></a>Virtual Memory</h2><ul><li>No need for all pages to be in the memory</li><li><p>CPU address space thus larger than physical space</p><ul><li>Address resolved by memory management unit</li></ul></li><li><p>Benefits:</p><ul><li>Not all of the program has to be in memory at once</li><li>Large programs can be run with or without large physical memory</li></ul></li><li><p>Process:</p><ul><li>All pages on disk initially</li><li>One / more loaded into memory when process is ‘ready’</li><li>Pages replaced from disk when needed<ul><li>Can be done with FIFO queue or usage-statistics based algorithm</li></ul></li></ul></li></ul><p><br></p><p>Disk thrashing: Perpetual loading / unloading of pages due to a page from disk immediately requiring the page it replaced.</p><p><br></p><hr><h2 id="Backus-Naur-Form"><a href="#Backus-Naur-Form" class="headerlink" title="Backus Naur Form"></a>Backus Naur Form</h2><p><code>&lt;Identifier&gt;::=&lt;Letter&gt;|&lt;Identifier&gt;&lt;Letter&gt;|&lt;Identifier&gt;&lt;Digit&gt;</code><br><code>&lt;Digit&gt;::=0|1|2|3|4|5|6|7|8|9</code><br><code>&lt;Letter&gt;::=&lt;UpperCaseLetter&gt;|&lt;LowerCaseLetter&gt;</code><br><code>&lt;UpperCaseLetter&gt;::=A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z</code><br><code>&lt;LowerCaseLetter&gt;::=a|b|c|d|e|f|g|h|i|j|K|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z</code></p><p>在巴科斯范式中，<code>|</code>为了分离单独的每一个选项，<code>::=</code>可以被描述成“被定义为”。<br>在上面的例子中，<code>&lt;Identifier&gt;</code>是使用递归的方式定义的。但如果我们要定义的内容无法抽象到这个级别，那么我们也可以使用列举的方式定义内容。  </p><p><br></p><hr><h1 id="第二十一章：数据安全"><a href="#第二十一章：数据安全" class="headerlink" title="第二十一章：数据安全"></a><strong>第二十一章：数据安全</strong></h1><h2 id="Key-and-encryption"><a href="#Key-and-encryption" class="headerlink" title="Key and encryption"></a><strong>Key and encryption</strong></h2><blockquote><p>* What is meant by a private key?</p><ul><li>An unpublished key which has a matched public key</li><li>Will be used with a matched public key to decrypt the data encrypted with that public key.</li></ul></blockquote><p><br></p><blockquote><p>* What is asymmetric encryption?</p><ul><li>Message sent is being encrypted using public key.</li><li>The message is being decrypted using the receiver’s private key.</li></ul><p>* What is symmetric encryption?</p><ul><li>When there is just one key which is used to encrypt and decrypt the information</li><li>The key is shared by the sender and the receiver of a message</li></ul></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a><br></h2><h2 id="Quantum-encryption"><a href="#Quantum-encryption" class="headerlink" title="Quantum encryption"></a><strong>Quantum encryption</strong></h2><blockquote><p>* State benefits of using quantum cryptography</p><ul><li>Integrity of the key once is transferred can be guaranteed</li><li>More secure keys can be exchanged</li><li>Any eavesdropping (<em>窃听</em>) can be identified</li></ul><p>* State drawbacks of using quantum cryptography</p><ul><li>Limited range</li><li>requires dedicated fibre optic line and specialist hardware</li><li>cost of dedicated fibre optic line and specialist hardware is expensive</li><li>polarization of the light may be altered during transmission</li></ul></blockquote><p><br></p><hr><h2 id="Malware"><a href="#Malware" class="headerlink" title="Malware"></a>Malware</h2><p>Worm: runs independently and propagates to other network hosts</p><p>Spyware: collects info &amp; transmits to another system</p><p>Phishing: email from seemingly legit source requesting confidential info</p><p>Pharming: Setting up a bogus website that appears to be legit</p><p><br></p><hr><h1 id="第二十二章：人工智能-AI"><a href="#第二十二章：人工智能-AI" class="headerlink" title="第二十二章：人工智能 (AI)"></a><strong>第二十二章：人工智能 (AI)</strong></h1><h1 id="PART-FOUR-进阶编程技能与问题解决"><a href="#PART-FOUR-进阶编程技能与问题解决" class="headerlink" title="PART FOUR: 进阶编程技能与问题解决"></a><strong>PART FOUR: 进阶编程技能与问题解决</strong></h1><h1 id="第二十三章：算法"><a href="#第二十三章：算法" class="headerlink" title="第二十三章：算法"></a><strong>第二十三章：算法</strong></h1><h2 id="Big-O-notation"><a href="#Big-O-notation" class="headerlink" title="Big O notation"></a><strong>Big O notation</strong></h2><blockquote><p>* Describe the meaning of O(log n) as it applies to a binary search algorithm.</p><ul><li>O(log n) is the time complexity that uses <strong>logarithm time</strong></li><li>The time taken goes up linearly as the number of items rises <strong>exponentially</strong></li><li>O(log n) is the worst case scenario.</li></ul></blockquote><h1 id="第二十四章：递归"><a href="#第二十四章：递归" class="headerlink" title="第二十四章：递归"></a><strong>第二十四章：递归</strong></h1><h1 id="第二十五章：编程范式"><a href="#第二十五章：编程范式" class="headerlink" title="第二十五章：编程范式"></a><strong>第二十五章：编程范式</strong></h1><p>OOP:</p><p>Properties: </p><ul><li>the data items and attributes</li><li>the data types and characteristics</li><li>defined in a class</li></ul><p>Methods:</p><ul><li>the functions and procedures stored in a class which acts on the properties</li></ul><p>Inheritance:</p><ul><li>Methods and properties contained in one class are made to be available to another class</li></ul><p><br></p><hr>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;记录A-Level CS真题中的知识点与总结&lt;br&gt;</summary>
    
    
    
    <category term="CS" scheme="http://naughtychas.github.io/categories/CS/"/>
    
    <category term="笔记" scheme="http://naughtychas.github.io/categories/CS/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CIE" scheme="http://naughtychas.github.io/tags/CIE/"/>
    
    <category term="笔记" scheme="http://naughtychas.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算机" scheme="http://naughtychas.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>A2CS笔记</title>
    <link href="http://naughtychas.github.io/2023/07/01/A2CS%E7%AC%94%E8%AE%B0/"/>
    <id>http://naughtychas.github.io/2023/07/01/A2CS%E7%AC%94%E8%AE%B0/</id>
    <published>2023-07-01T09:18:28.000Z</published>
    <updated>2024-05-20T08:33:25.028Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CS课堂笔记 (A2)<br><span id="more"></span></p></blockquote><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a><strong>写在前面</strong></h1><p>学了一段时间的计算机，觉得继续写这些笔记还是蛮有用的，于是乎就打算继续下去。<br>这次是A2阶段的计算机笔记。<br>和AS部分一样，写下本文的目的是帮助自己更好地学习CS这门科目，因此，希望路过的大佬轻喷。  </p><hr><p>本笔记内容基于《Computer Science for Cambridge International AS &amp; A Level》，剑桥大学出版社出版，教材为第二版，A-Level课程编号为<code>9618</code>。  </p><hr><h1 id="PART-THREE-进阶理论"><a href="#PART-THREE-进阶理论" class="headerlink" title="PART THREE: 进阶理论"></a><strong>PART THREE: 进阶理论</strong></h1><h1 id="第十六章：数据的表示"><a href="#第十六章：数据的表示" class="headerlink" title="第十六章：数据的表示"></a><strong>第十六章：数据的表示</strong></h1><p>崭新的故事从第十六章继续开始了。  </p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><strong>数据类型</strong></h2><p>早在第13章我们介绍过变量的数据类型的概念。具体是：当一个程序在使用变量之前，必须要显示别该变量的数据类型。  </p><p>当时介绍了一些最常用的数据类型，但是在本章我们将会接触一些更深入的数据类型。  </p><p><br></p><h3 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a><strong>内置数据类型</strong></h3><p><strong>内置数据类型 (Built-in data types)</strong>，顾名思义，就是已经默认集成在编译器中的数据类型，是<strong>被编程语言预先定义的数据类型</strong>。一般来说，这些数据类型被认为成执行数据操作最快的类型。  </p><p>比如说在Python里面，内置数据类型就有这些：str, int, float等。  </p><p>这些数据类型具体的操作，值分配的操作全部由编程语言定义。  </p><p><br></p><hr><h3 id="用户定义的数据类型"><a href="#用户定义的数据类型" class="headerlink" title="用户定义的数据类型"></a><strong>用户定义的数据类型</strong></h3><p>和内置数据类型相对立的，就是可以由用户定义的数据类型。</p><p>一般来说，“用户”通常是使用操作系统提供“用户界面”的人：“用户”是向正在运行的程序提供输入并从其接收输出的人。然而在编写程序时，程序员就成为了编程语言所指的“用户”。名词 <strong>用户定义的数据类型(User-defined data types)</strong> 中的“用户”就是指程序员们。  </p><p>这种数据类型是由用户在程序中根据需要所定义的，以便根据幼存储相同或者不同类型的数据类型。  </p><p>尽管用户定义的数据类型不是内置数据类型，但是只有在编程语言提供对该类型构造的支持情况下，才可以使用某种特定的用户定义数据类型。  </p><article class="message is-info"><div class="message-body"><b>User-defined data type: where the programmer includes the definition in the program.</b></div></article> <p><br></p><hr><h3 id="非复合数据类型"><a href="#非复合数据类型" class="headerlink" title="非复合数据类型"></a><strong>非复合数据类型</strong></h3><p><strong>非复合数据类型 (Non-composite data types)</strong> 是不引用其他数据类型的数据类型。也就是说，这些数据类型的定义没有用到其他的数据类型。  </p><p>某些用户定义的数据类型也有可能是非符合的数据类型。  </p><article class="message is-info"><div class="message-body"><b>Non-composite data type: a data type defined without reference to another data type.</b></div></article> <p><br></p><hr><h3 id="枚举数据类型"><a href="#枚举数据类型" class="headerlink" title="枚举数据类型"></a><strong>枚举数据类型</strong></h3><p><strong>枚举数据类型 (Enumerated data type)</strong>是用户定义的数据类型，它是根据有序值列表定义的。 </p><p>同时，它是一种非复合数据类型。</p><p>简单举一个例子就很好理解了：这里使用Python来定义一个数据类型<code>Color</code>:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from enum import Enum</span><br><span class="line"></span><br><span class="line">class Color(Enum):</span><br><span class="line">    RED = 1</span><br><span class="line">    GREEN = 2</span><br><span class="line">    BLUE = 3</span><br><span class="line"></span><br><span class="line">print(Color.RED)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行了<code>print(Color.RED)</code>之后，会输出<code>1</code>。因为<code>RED</code>定义的值正好为<code>1</code>。  </p><p>我们通过上面的代码定义了一个名叫<code>Color</code>的枚举数据类型，其中包含三个值：<code>RED</code>,<code>GREEN</code>和<code>BLUE</code>。  </p><p>需要注意的是，枚举数据类型中定义的值是有序的，这意味着枚举数据类型具有隐含的值顺序。</p><article class="message is-info"><div class="message-body"><b>Enumerated data type: a non-composite user-defined data type for which the definition identifies all possible values.</b></div></article> <p><br></p><hr><h3 id="复合用户定义数据类型"><a href="#复合用户定义数据类型" class="headerlink" title="复合用户定义数据类型"></a><strong>复合用户定义数据类型</strong></h3><p>开始变复杂了。  </p><p><strong>复合用户定义数据类型 (Composite user-defined data types)</strong>具有引用至少一种其他类型的定义。  </p><p>复合用户定义数据类型有两个非常重要的实例：  </p><ol><li><p>在第十三章介绍过的<strong>记录数据类型 (Record data type)</strong>是描述值和变量的数据类型。这是程序员定义的数据类型，允许程序员定义新的记录类型。这允许程序员们使用精确匹配特定程序的数据要求的组件来创建并记录数据类型。Python不支持这样的数据类型。  </p></li><li><p><strong>类 (Class)</strong>是面向对象编程中用于对象的数据类型。换句话说，类是创建对象(或者特定数据结构)，提供窗台初始值，以及行为实现的蓝图。  </p></li></ol><p>下面的代码就是在Python中的一个类：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Person:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    def say_hello(self):</span><br><span class="line">        print(f"Hello, my name is {self.name} and I am {self.age} years old.")</span><br><span class="line"></span><br><span class="line">person = Person("John", 25)</span><br><span class="line">person.say_hello()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这里我们定义了一个名叫<code>Person</code>的类，其中包含两个子变量：<code>name</code>和<code>age</code>，和一个子函数<code>say_hello()</code>。  </p><p><br></p><hr><h3 id="指针数据类型"><a href="#指针数据类型" class="headerlink" title="指针数据类型"></a><strong>指针数据类型</strong></h3><p>在计算机编程中，<strong>指针 (Pointer)</strong>是一个存储另一个变量的内存地址的变量。<strong>指针数据类型 (Pointer data type)</strong>是用于声明指针变量的数据类型。  </p><p>在AS部分学的链表(Linked list)<strong>不是</strong>一个指针数据类型。因为链表是一种包含指向其他节点的指针的数据结构。不是指针数据类型的原因是它存储的不是内存地址的变量。  </p><p><br></p><hr><p><br></p><p>学学伪代码：  </p><p>当需要使用指针的时候，就可以使用这个符号声明：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TYPE</span><br><span class="line">TIntegerPointer ← ^Integer</span><br></pre></td></tr></table></figure><p>定义了<code>TIntegerPointer</code>的数据类型是整形的指针。  </p><p>我们也可以这么写：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE MyIntegerPointer : TIntegerPointer</span><br></pre></td></tr></table></figure><p>这是一个不需要使用插入符 (^) 的方法。  </p><p><br></p><p><br></p><p>接下来我们来定义一些数据：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DECLARE Number1, Number2 : INTEGER</span><br><span class="line">Number1 ← 100</span><br><span class="line"></span><br><span class="line">MyIntegerPointer ← @Number1</span><br></pre></td></tr></table></figure><p>最后一行代码向指针变量赋了值。变量<code>MyIntegerPointer</code>现在存储着<code>Number1</code>的地址。   </p><p>然后我们可以使用下面的这种方法为<code>Number2</code>赋予一个<code>200</code>的值：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Number2 ← MyIntegerPointer^ * 2</span><br></pre></td></tr></table></figure><p><br></p><article class="message is-info"><div class="message-body"><b>Pointer variable: one for which the value is the address in memory of a different variable.</b></div></article> <p><br></p><hr><h3 id="集合数据类型"><a href="#集合数据类型" class="headerlink" title="集合数据类型"></a><strong>集合数据类型</strong></h3><p>计算机科学中也存在集合的定义：<strong>集合是一种抽象数据类型，可以存储某些值，没有任何特定的顺序，并且没有重复的值。</strong>  </p><p><strong>集合数据类型 (Set data type)</strong>与大多数其他集合类型不同，通常不是从集合中检索特定元素，而是测试集合中的成员资格值，可以说是将一整个整体来进行处理(?)</p><p><br></p><article class="message is-info"><div class="message-body"><b>Set: a collection of data items that lacks any structure;contains no duplicates and has a number of defined operations that can be performed on it.</b></div></article> <p><br></p><p>常用的操作有这些：  </p><ul><li>检查集合中是否存在某个值</li><li>添加新的数据值</li><li>删除现有的数据值</li><li>将一个集合添加到另一个集合当中</li></ul><p><br></p><hr><p>Python的其中一个亮点就和集合数据类型有关。在Python中，处理集合数据类型十分方便。  </p><p>下面是在Python中操作集合数据类型的一些实例：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 创建一个集合</span><br><span class="line">my_set = {1, 2, 3}</span><br><span class="line"></span><br><span class="line"># 向集合中添加一个值</span><br><span class="line">my_set.add(4)</span><br><span class="line"></span><br><span class="line"># 从集合中剔除一个值</span><br><span class="line">my_set.remove(3)</span><br><span class="line"></span><br><span class="line"># 检查值是否在集合内</span><br><span class="line">if 2 in my_set:</span><br><span class="line">    print("2 is in the set")</span><br><span class="line"></span><br><span class="line"># ---- 华丽的分割线 ------</span><br><span class="line"></span><br><span class="line"># 创建两个集合</span><br><span class="line">set1 = {1, 2, 3}</span><br><span class="line">set2 = {3, 4, 5}</span><br><span class="line"></span><br><span class="line"># 两个集合的并集</span><br><span class="line">union_set = set1.union(set2)</span><br><span class="line">print(union_set) # 输出为: {1, 2, 3, 4, 5}</span><br><span class="line"></span><br><span class="line"># 两个集合的交集</span><br><span class="line">intersection_set = set1.intersection(set2)</span><br><span class="line">print(intersection_set) # 输出为: {3}</span><br><span class="line"></span><br><span class="line"># 两个集合的差</span><br><span class="line">difference_set = set1.difference(set2)</span><br><span class="line">print(difference_set) # 输出为: {1, 2}</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><hr><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a><strong>文件管理</strong></h2><p>在日常计算机使用中，会遇到各种各样的文件类型，例如图形文件、文字处理文件、电子表格文件等。<br>无论文件类型如何，内容都使用特定的二进制代码存储，从而保证文件的正常使用。  </p><p>这里就出现了新东西：<strong>二进制文件 (Binary file)</strong>和<strong>记录 (Record)</strong>  </p><p>二进制文件是包含二进制格式信息的文件，二进制格式是 0 和 1 的序列。二进制文件用于以计算机可以读取但人类不易理解的格式存储数据。二进制文件的示例包括可执行文件、图像文件和音频文件。</p><p>记录是一种包含一个或多个字段的数据结构，每个字段包含一条数据。记录用于以易于访问和操作的方式存储和组织数据。在计算机科学中，记录通常用于表示数据库和其他数据存储系统中的数据。</p><article class="message is-info"><div class="message-body"><b>Binary file: a file designed for storing data to be used by a computer program.</b><br><b>Record: a collection of fields containing data values.</b></div></article> <p><br></p><hr><h3 id="串行文件"><a href="#串行文件" class="headerlink" title="串行文件"></a><strong>串行文件</strong></h3><p><strong>串行文件 (Serial file)</strong>是一种包含信息的文件类型，<strong>信息按其发生的顺序记录在文件中。</strong>  </p><p>它还可以用来记录文件信息。在这种情况下，文件信息将按照它们在串行文件中保存的顺序列出。所以说：信息或文件基本上是按时间顺序记录的。  </p><p><br></p><hr><h3 id="顺序文件"><a href="#顺序文件" class="headerlink" title="顺序文件"></a><strong>顺序文件</strong></h3><p><strong>顺序文件 (Sequential files)</strong>是根据某些键值排序的文件。顺序文件主要用于文件命中率较高的应用场景中。 <em>#文件命中率衡量计算机系统或程序性能的重要参数,它可以反应计算机在访问存储器时的效率。</em>  </p><p>顺序文件的一个示例是包含有关公司员工信息的文件。<br>该文件可以根据员工的姓氏进行排序，以便将具有相同姓氏的所有员工分组在一起。这将使根据姓氏搜索员工变得更加容易。</p><p><br></p><hr><h3 id="直接访问文件"><a href="#直接访问文件" class="headerlink" title="直接访问文件"></a><strong>直接访问文件</strong></h3><p><strong>直接访问文件 (Direct-access file)</strong> 有时候也被称之为<strong>随机访问文件 (Random-access files)</strong>。和内存一样，随机性表明我们可以访问文件中的任何记录，或者在任何位置写入内容，而无需按照顺序依行读取文件。在使用这种文件时，我们可以直接访问文件的某个区块。  </p><p><br></p><p>另一种方法是在将记录输入直接访问文件时使用散列算法。</p><p>如果每条记录中有一个数字关键字段，则可以使用一种简单的哈希算法。<br>该算法选择一个合适的数字并将该数字除以关键字段中的值。 然后，该除法的余数标识文件中用于存储该记录的地址。<br>如果合适的数字是与文件的预期大小相似的质数，则效果最佳。</p><p>我们举一个简单的计算例子：我们使用关键字段中的 4 位值来说明文件中的地址，其中 1000 用于除数。 以下代表三种计算，其中余数代表地址：  </p><p>0045 / 1000 余数为45<br>2005 / 1000 余数为5<br>3000 / 1000 余数为5</p><p>从这些计算中可以看出两个事实。<br>第一个事实是，计算出的地址没有任何顺序，具体取决于关键字段中的值。<br>第二个事实是，不同的关键字段值可以产生相同的余数，因此在文件中产生相同的地址。</p><p>正因为相同的地址可能产生，所以当同一个地址被使用的时候，可能会发生冲突。<br>哈希算法的职责是尽可能平均地分配地址，从而最大限度地减少冲突的可能性。  </p><p>但是哈希算法也不是万能的，无论再怎么平均分配，冲突必定出现。所以说如果冲突出现，我们有以下这些解决方案：  </p><ul><li>使用顺序搜索来查找计算出的地址后是否有空闲地址。</li><li>在文件末尾保留一些溢出地址。</li><li>创建一个可以从每个地址访问的链接列表。</li></ul><p><br></p><hr><h3 id="文件访问"><a href="#文件访问" class="headerlink" title="文件访问"></a><strong>文件访问</strong></h3><p>一旦我们选择了文件组织，并将文件中注入了数据，我们就需要考虑下如何使用这些文件，如何访问这些数据。  </p><p>对于<strong>串行文件</strong>来说，正常的方法是逐条读取文件。但是说如果需要再其中的一个字段中搜索特定的一个值，唯一的办法就是从头开始读取记录，直到我们找到了我们的目标。  </p><p>如果我们需要在<strong>顺序文件</strong>寻找特定值的话，可能也需要像串行文件一样进行搜索。但是，如果我们已知包含所需数据的关键字段，那么直接读取关键字段就可以了。  </p><p><strong>直接访问文件</strong>的话，首先需要将关键字段的值提供给哈希算法进行计算。</p><p><br></p><hr><h3 id="文件类型的选择"><a href="#文件类型的选择" class="headerlink" title="文件类型的选择"></a><strong>文件类型的选择</strong></h3><p><strong>串行文件</strong>特别适合批处理或者备份磁带上的数据，因为串行文件中的数据是与时间相关的。  </p><p>如果我们需要快速访问一个大文件中的单个记录，就需要使用<strong>直接访问文件</strong>。比如说需要登录一个具有许多用户的系统，在这种情况下，用户登录时用于检查密码的文件就应该是直接访问的。  </p><p><strong>顺序文件</strong>特别适用与从文件的一次搜索中获得多个记录的应用程序。一个例子是家谱：我们可以对所有特定家族名称的所有记录进行搜索。  </p><p><br></p><hr><h2 id="实数"><a href="#实数" class="headerlink" title="实数"></a><strong>实数</strong></h2><p>在计算机中，实数是带有小数部分的数。  </p><p>当我们在一个二进制系统中写下一个实数的值，并需要存储下来的话，我们有多个选择：我们可以选择简单的表示法，也可以使用指数表示法(科学计数法)。  </p><p>比如说，数字’25.3’可以写成：  </p><p>       <code>.253 * 10^2</code> 或 <code>2.53 * 10^1</code> 或 <code>25.3 * 10^0</code> 或 <code>253 * 10^-1</code></p><p>就对于’25.3’来说，直接表达是最好的存储方案。<br>但如果数字非常大或非常小，就需要尽可能地使用科学计数法。  </p><p><br></p><hr><h3 id="浮点-amp-定点表示法"><a href="#浮点-amp-定点表示法" class="headerlink" title="浮点&定点表示法"></a><strong>浮点&amp;定点表示法</strong></h3><p>在计算机系统中，我们只能是有二进制码来存储实数。其中的一种方法就是使用<strong>定点表示法 (Fixed-point representation)</strong>。  </p><p>在定点表示法中，首先需要确定总位数。其中总位数中的一部分位来表示整数部分，其余的位表示小数部分。  </p><p>另一种方法就是使用<strong>浮点表示法 (Floating-point representation)</strong>。所有使用浮数都可以改写成下面这种形式：  </p><p>         <code>±M × R^E</code></p><p>其中，有效的位数由<code>±M</code>表示，我们叫做<strong>尾数 (Mantissa)</strong>。<code>E</code>表示指数。浮点数中的 “指数 “并不代表原数的整数部分。相反，它表示在确定浮点表示数的值时，基数（在计算机系统中通常为 2）所升高的整数幂。  </p><p>一般来说基数<code>R</code>不会存储进这个浮点数内，因为<code>R</code>有一个隐含值“2”。具体原因是我们在使用二进制表示数字时逢2进一。    </p><article class="message is-info"><div class="message-body"><b>Floating-point representation: a representation of real numbers that stores a value for the mantissa and a value for the exponent.</b></div></article> <p><br></p><p><em>p.s. mantissa是尾数的意思。</em></p><p><br></p><hr><p>我们来举例子了解一下两种表示法之间的区别：  </p><p>对于定点表示法来说，在一个字节内，我们可以使用最高的有效位作为符号位，然后再使用接下来的五位表示整数部分。这就会为小数部分的表示留下两个位。  </p><p>下表给出了一些比较重要的非零值：</p><div class="table-container"><table><thead><tr><th style="text-align:left">描述</th><th style="text-align:center">二进制码</th><th style="text-align:center">(对应的)十进制数</th></tr></thead><tbody><tr><td style="text-align:left">最大的正值</td><td style="text-align:center"><code>011111 11</code></td><td style="text-align:center">31.75</td></tr><tr><td style="text-align:left">最小的正值</td><td style="text-align:center"><code>000000 01</code></td><td style="text-align:center">0.25</td></tr><tr><td style="text-align:left">绝对值最小的负值</td><td style="text-align:center"><code>100000 01</code></td><td style="text-align:center">-0.25</td></tr><tr><td style="text-align:left">绝对值最大的负值</td><td style="text-align:center"><code>111111 11</code></td><td style="text-align:center">-31.75</td></tr></tbody></table></div><p><br></p><p>浮点表示法的话，我们可以使用4个位来表示尾数，然后再使用另外的4位表示指数。每一个位都使用2的补码来表示。<br>其中，指数存储为有符号的整数，尾数存储为定点实数。  </p><p>那么我们应该如何确定哪一位是二进制点。</p><p>下面的表格给出了使用4位来表示尾数的两个选项：<br>在每种情况下，我们都选择了等价的二进制点，</p><div class="table-container"><table><thead><tr><th style="text-align:center">First bit pattern</th><th style="text-align:center">Real value in denary</th></tr></thead><tbody><tr><td style="text-align:center"><code>011 1</code></td><td style="text-align:center"><code>3.5</code></td></tr><tr><td style="text-align:center"><code>011 0</code></td><td style="text-align:center"><code>3.0</code></td></tr><tr><td style="text-align:center"><code>010 1</code></td><td style="text-align:center"><code>2.5</code></td></tr><tr><td style="text-align:center"><code>101 0</code></td><td style="text-align:center"><code>-3.0</code></td></tr><tr><td style="text-align:center"><code>100 1</code></td><td style="text-align:center"><code>-3.5</code></td></tr><tr><td style="text-align:center"><code>100 0</code></td><td style="text-align:center"><code>-4.0</code></td></tr></tbody></table></div><p><br></p><div class="table-container"><table><thead><tr><th style="text-align:center">First bit pattern</th><th style="text-align:center">Real value in denary</th></tr></thead><tbody><tr><td style="text-align:center"><code>0 111</code></td><td style="text-align:center"><code>0.875</code></td></tr><tr><td style="text-align:center"><code>0 110</code></td><td style="text-align:center"><code>0.75</code></td></tr><tr><td style="text-align:center"><code>0 101</code></td><td style="text-align:center"><code>0.625</code></td></tr><tr><td style="text-align:center"><code>1 010</code></td><td style="text-align:center"><code>-0.75</code></td></tr><tr><td style="text-align:center"><code>1 001</code></td><td style="text-align:center"><code>-0.875</code></td></tr><tr><td style="text-align:center"><code>1 000</code></td><td style="text-align:center"><code>-1.0</code></td></tr></tbody></table></div><p><br></p><div class="table-container"><table><thead><tr><th style="text-align:center">First bit pattern</th><th style="text-align:center">Real value in denary</th></tr></thead><tbody><tr><td style="text-align:center"><code>0111</code></td><td style="text-align:center"><code>7</code></td></tr><tr><td style="text-align:center"><code>0110</code></td><td style="text-align:center"><code>6</code></td></tr><tr><td style="text-align:center"><code>0101</code></td><td style="text-align:center"><code>5</code></td></tr><tr><td style="text-align:center"><code>1010</code></td><td style="text-align:center"><code>-6</code></td></tr><tr><td style="text-align:center"><code>1001</code></td><td style="text-align:center"><code>-7</code></td></tr><tr><td style="text-align:center"><code>1000</code></td><td style="text-align:center"><code>-8</code></td></tr></tbody></table></div><p><br></p><p>浮点表示法的特殊值如下表所示：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">描述</th><th style="text-align:center">二进制码</th><th style="text-align:center">(对应的)十进制数</th></tr></thead><tbody><tr><td style="text-align:left">最大的正值</td><td style="text-align:center"><code>0 111 0111</code></td><td style="text-align:center">0.875 × 2^7 = <strong>112</strong></td></tr><tr><td style="text-align:left">最小的正值</td><td style="text-align:center"><code>0 001 1000</code></td><td style="text-align:center">0.125 × 2^(-8) = <strong>1/2048</strong></td></tr><tr><td style="text-align:left">绝对值最小的负值</td><td style="text-align:center"><code>1 111 1000</code></td><td style="text-align:center">-0.125 × 2^(-8) = <strong>-1/2048</strong></td></tr><tr><td style="text-align:left">绝对值最大的负值</td><td style="text-align:center"><code>1 000 0111</code></td><td style="text-align:center">-1 × 2^7 = <strong>-128</strong></td></tr></tbody></table></div><p><em>p.s. 上课时候有人提出了一个问题：Exponent部分的第一位为什么不是1从而达到最大值？老师的解释是“因为Exponent部分也同样存在符号位，所以最大的正值只能将后三位填充为一。”</em></p><p><br></p><hr><h3 id="精度与标准化"><a href="#精度与标准化" class="headerlink" title="精度与标准化"></a><strong>精度与标准化</strong></h3><p>当使用浮点表示法表示数据时，需要从两个方面着重考虑。  </p><p>首先需要决定使用的总位数，然后还要决定分割线的位置 <em>(表示尾数的位数和表示指数的位数之间的分割线)</em>  </p><p>然而在我们使用的时候只需要选择使用的总位数就可以了。具体的位数分割就会交给浮点处理器来决定。  </p><p>当然这也不代表你没法决定尾数和指数位数的数量了：一般来说，增加尾数位数可以提供更高的精度，但是同样会减少指数位数。如此一来就会减少可以表示的值的范围。  </p><p>所以说为了获取最大精度，我们就必须要标准化浮点数。因为<strong>越多的尾数位数代表着更高的精准度</strong>，所以在考虑提升精度时，要尽可能对表示尾数的位数使用多的位数。  </p><p><strong>将浮点表示法中的数字标准化意味着选择一个指数，以防止在尾数中出现前导零。</strong>。举个例子：<code>0 1000.11</code>并没有标准化：小数点前面一共有5位。如果想要标准化这一串数据，就要将其变成<code>0.100011</code>。小数点向左移动了四位，因此在此情景中指数为4。</p><p><br></p><p>我们可以使用八位浮点表示一个数值。因为要表示正数，十进制表示以2进位。<br>比如说：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">十进制表示</th><th style="text-align:center">浮点二进制表示法</th></tr></thead><tbody><tr><td style="text-align:center"><code>0.125 × 2^4</code></td><td style="text-align:center"><code>0 001 0100</code></td></tr><tr><td style="text-align:center"><code>0.25 × 2^3</code></td><td style="text-align:center"><code>0 010 0011</code></td></tr><tr><td style="text-align:center"><code>0.5 × 2^2</code></td><td style="text-align:center"><code>0 100 0010</code></td></tr></tbody></table></div><p><br></p><p>表示负数也没有问题。这里用-4作为十进制表示的底数：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">十进制表示</th><th style="text-align:center">浮点二进制表示法</th></tr></thead><tbody><tr><td style="text-align:center"><code>-0.25 × 2^4</code></td><td style="text-align:center"><code>1 110 0100</code></td></tr><tr><td style="text-align:center"><code>-0.5 × 2^3</code></td><td style="text-align:center"><code>1 100 0011</code></td></tr><tr><td style="text-align:center"><code>-1.0 × 2^2</code></td><td style="text-align:center"><code>1 000 0010</code></td></tr></tbody></table></div><p><br></p><hr><h3 id="表示法的转换"><a href="#表示法的转换" class="headerlink" title="表示法的转换"></a><strong>表示法的转换</strong></h3><p>在AS部分的第一章，我们讨论了多种将数字转换为不同形式的方法。</p><p>先来看定点二进制表示法。举个例子：4.75转换为定点二进制表示法  </p><p>打眼一看挺简单的：4可以转换为<code>100</code>，.75转化为二进制的<code>.11</code>，所以4.75的定点二进制表示法大概是<code>100.11</code>。但是别忘了正数的首位需要以0开头。这样的话就只添加一个符号位就可以解决问题了。这样，4.75就可以以定点二进制表示法写成<code>0100.11</code>。  </p><p>那么负数怎么办呢？比如说-4.75，就可以先从4.75的表示开始，然后再将它转换成对应的二进制补码：  </p><p>     <code>0100.11</code> 转换为： <code>1011.00</code>（一次补码）<br>     <code>1011.01</code>就是-4.75的二次补码。</p><p>有关于二次补码的内容，可以去AS部分的第一张扒翻一下。  </p><p><br></p><hr><p><br></p><p>转换成浮点就有一些复杂了。在转换之前，我们应该注意：大多数小数部分无法精确地转换为浮点数值。因为二进制小数部分的因数有1/2， 1/4， 1/8， 1/16等等。所以说除非被转换的值正好是这些因数的和，否则无法进行精确的转换。<br>比如说，从0.1到0.9之间的的值中，只有0.5可以被精确的转换。</p><p><br></p><p>转换正值的方法如下：  </p><ol><li>使用我们在AS第一章中描述的方法转换整数部分。</li><li>添加在开头添加符号位</li><li>使用下面的方法转换小数位  </li><li>将整数和小数部分组合起来，并将它们输入到分配用于表示尾数的最高有效位中。</li><li>用零填充尾数的剩余位和指数的位。</li><li>通过改变指数值来调整二进制小数点的位置，以实现归一化的表示。</li></ol><p><br></p><p>第三步提到的方法如下：  </p><p>我们试着转化一下8.75：  </p><ol><li>整数位8转换成<code>1000</code>，然后添加符号位。这样就变成了<code>0 1000</code></li><li>小数部分“.75”可以在二进制中表示为<code>.11</code></li></ol><blockquote><p><strong>将小数转换为二进制时，可以将小数部分乘以2，然后观察得到的整数部分和小数部分。</strong>然后再乘以2直到得到的小数部分等于0。稍后需要将每次乘法结果的整数部分写成等价的二进制数。0.75十进制到二进制的答案是0.11。<br><br>小数部分“0.75”的转换步骤大概是：<br><br>1. <code>0.75 * 2 = 1.5</code>，1.5的整数位包含1，因此位数部分的第一位需要写<code>1</code>。<br>2. 去掉刚才的乘积的整数部分，<code>0.5 * 2 = 1.0</code>。1.0的整数部分包含1，因此尾数部分的第一位需要写<code>1</code>。正因为整数位的1减去后，小数位不包含任何信息，所以转换到此结束。<br><br>所以<code>0.75</code>转化过后就是<code>.11</code>。</p></blockquote><ol><li>该组合给出 <code>0 1000.11</code>，其指数值为零。  </li><li>移动二进制小数点后，我们得到 <code>0.100011</code>，小数点相比原来向左移动了四位，因此在此情景中指数为4其指数值为十进制的4。  </li><li>下一阶段取决于为尾数和指数定义的位数； 如果为尾数分配10位，为指数分配4位，则最终表示为尾数为 <code>0100011000</code>，指数为 <code>0100</code>。</li></ol><p><br></p><hr><h3 id="使用浮点数的问题"><a href="#使用浮点数的问题" class="headerlink" title="使用浮点数的问题"></a><strong>使用浮点数的问题</strong></h3><p>如上所述，将十进制实数值转换为二进制表示形式几乎可以保证一定程度的近似。 用于存储尾数的位数也有限制。</p><p>浮点数用于<strong>涉及重复计算的扩展数学过程</strong>。 例如，在使用大气数学模型的天气预报中，或在经济预测中。 在这样的编程中，在记录每次计算的结果时存在轻微的近似。<br>如果计算重复足够多次，这些所谓的舍入误差可能会变得很大。 防止错误成为严重问题的唯一方法是通过使用更多的尾数位来提高浮点表示的精度。<br>因此，编程语言提供了以“双精度”或“四精度”工作的选项。</p><p>另外，浮点数还可能引发溢出错误条件，因为浮点数能够存储的数字范围有限。</p><p><br></p><hr><h1 id="第十七章：通讯及互联网技术"><a href="#第十七章：通讯及互联网技术" class="headerlink" title="第十七章：通讯及互联网技术"></a><strong>第十七章：通讯及互联网技术</strong></h1><h2 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a><strong>传输方式</strong></h2><p>对于通过互联网进行的通信，有两种可能的方法：<strong>电路交换 (Circuit switching)</strong>或<strong>分组交换 (Packet switching)</strong>。  </p><p><br></p><hr><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a><strong>电路交换</strong></h3><p>电路交换在传统电话系统中运用的比较广泛。  </p><p>电路交换是实现电信网络的一种方法。在这种方法中，两个网络节点通过网络建立专用的通信信道（通过电路），然后才能进行通信。<br>电路的特征决定了信道的带宽，并且这个专用通讯链路会在使用期间一直保持连接。<br>电路交换法师一种面向连接的网络，通过在发送方和接收方之间建立专用路径，提供了有保证的数据传输速率。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB0d939d18b99654b52231aaedd9491e5e?method=download&amp;shareKey=7ca23d690c92033f34eb8055e9f8c426" alt=""></p><p><br></p><p>通过电路交换传输数据的大致流程如下：  </p><ol><li>发送方提供预期的接收方的身份信息  </li><li>由系统来检查接收方是否准备好接收数据  </li><li>如果接收方可以接收数据，那么就会在网络上建立一些连接  </li><li>数据随后被传输</li><li>移除所有的建立的连接</li></ol><p>在这种情况下，我们暂时没有必要对电路交换网络中的每个节点进行定义。<br>节点之间的链路师共享传输介质中的专用信道，可以保证传输的畅通无阻、<br>当连接结束后，随着链路的断开，连接也就明确结束了。<br>不过，对于租用线路数据连接而言，可能会建立永久性的连线。  </p><p><br></p><hr><h2 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a><strong>分组交换</strong></h2><p><strong>分组交换 (Packet-switching)</strong>允许我们再不建立电路的情况下进行数据传输。  </p><p>数据不能以连续的流的形式发送，相反，数据被打包成一个一个数据包内然后被发送出去。  </p><p>数据包由包含传送指令的标头和数据主题构成。这个方法有点像邮政服务发送信件一样，但是要更加复杂。比如说在电路交换那一章的图片仍然可以描述数据包交换，只不过所使用的链路在发送方传输数据包的时候还没有被定义。  </p><p>此外，与电路交换传输所需的功能相比，节点将具有更多扩展的功能。我们将会在下面的一个章节中探讨路由器如何充当节点并且支持数据包的发送与接受。  </p><p><br></p><p>当我们使用分组交换法的时候，网络可以通过两种方式提供服务：<strong>无连接服务 (Connectionless service)</strong> 或者是 <strong>面向连接的服务 (Connection-oriented service)</strong>。  </p><p>对于无连接服务来说，我们在发送数据包的时候不知道接收者是否准备好接受数据包，而且我们无法确认数据包是否会传输成功。  </p><p>在面向连接的服务中，我们发送第一个数据包的目的是为了确认对方是否能够正常的接受数据包。如果收到了确认的话，那么发送方就会发送更多的数据包。如果没有收到确认，那么发送方就会再次尝试发送第一个数据包来确认状态。  </p><p><br></p><hr><h2 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a><strong>传输协议</strong></h2><p>网络协议的基本定义很简单：它是一组规则。但问题是这些规则与什么东西有关呢？  </p><p>在回答这个问题之前，我们应该明白：我们通常所说的“协议”是指的包含许多单独协议的协议栈，因为网络的复杂性需要我们去制定许多单独的协议。<br>另一个复杂因素是：一个协议可能有许多不同的版本。<br>而且通常有一类协议可以用来补充另一类协议的作用。    </p><article class="message is-info"><div class="message-body"><b>Protocol: a set of rules for data transmission which are agreed by sender and receiver.</b></div></article> <p><br></p><p>任何通过网络传输的通信，都必须在发送方和接收方之间商定一套构成协议的传输规则。<br>在最简单的层面上，协议可以规定成正电压代表比特值为1。协议也可以规定发送方不得超过的传输速度。<br>许多规则与信息的格式或信息的组成部分有关。比如说，定义数据包中前40哥字节的格式。  </p><p><br></p><hr><h2 id="协议栈"><a href="#协议栈" class="headerlink" title="协议栈"></a><strong>协议栈</strong></h2><p>对于协议套件而言，协议可以被是认作为协议栈中的层。这一概念设计了多个方面：  </p><ul><li><p>每一层只能接受上一层或者下一层的输入。  </p></li><li><p>相邻的层之间有一个明确的界限，这是层与层之间唯一允许的互动。  </p></li><li><p>一个层由下层的行动提供服务。  </p></li><li><p>除了最底层之外，各层的功能都是由安装的软件创建的。  </p></li><li><p>层可以包括子层。  </p></li><li><p>任何用户交互都将使用与堆栈中最高层相关的协议。  </p></li><li><p>对于硬件的任何直接访问都仅限于堆栈的最底层。  </p></li></ul><p><br></p><hr><h2 id="TCP-IP-协议套件"><a href="#TCP-IP-协议套件" class="headerlink" title="TCP/IP 协议套件"></a><strong>TCP/IP 协议套件</strong></h2><p>TCP/IP是为支持互联网使用二创建的协议套件。<br>TCP/IP可以根据下图所示的模型来进行解释：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBfdae828f6e782a26d5c50baafadfe83a?method=download&amp;shareKey=b16b227c06708c287e7ee21d0263a4cb" alt="">  </p><p>不难看出，TCP/IP协议只占用了这个模型的前三层。</p><p>图中显示了两个终端系统 （<em>最左边和最右边的两列</em>），并且也显示了这两个系统中相应层之间的逻辑连接。<br>一个应用程序可以在一个终端系统上运行，并与另一个终端系统上运行的应用程序建立直接连接。<br>发送端系统上的应用层协议向同一系统上的传输层协议发送信息，然后传输层协议启动一个进程，将相同的信息传送到接收端系统。<br>在接收端系统上，最后阶段是传输层协议将信息传送给应用层协议。  </p><p><br></p><p>TCP/IP协议套件由许多子协议组成，包括以下协议：  </p><ul><li>应用层协议： HTTP SMTP DNS FTP POP3 IMAP</li><li>传输层： TCP UDP SCTP IP</li><li>网络层： IP IGMP ICMP ARP</li></ul><p>选择这些协议是为了说明TCP/IP协议套件包含了应用范围非常广泛的协议，而且这些协议仍然在不断地发展。  </p><p><br></p><hr><h3 id="TCP-传输控制协议"><a href="#TCP-传输控制协议" class="headerlink" title="TCP (传输控制协议)"></a><strong>TCP (传输控制协议)</strong></h3><p><strong>传输控制协议 (Transmission Control Protocol, TCP)</strong>是指TCP协议套件中定义的一个协议。它起源于最初的网络实施，是互联网协议（IP）的补充。因此，整个协议套件通常被称为 TCP/IP。  </p><p>TCP 是面向连接的。客户端和服务器之间必须先建立连接，然后才能发送数据。<br>在建立连接之前，服务器必须监听（被动开放）客户端的连接请求。<br>三方握手（主动打开）、重传和错误检测增加了可靠性，但延长了延迟。  </p><p>（所以如果不需要可靠数据流服务的应用程序可以使用<strong>用户数据报协议 (User Datagram Protocol, UDP)</strong>。它提供的无连接数据报服务优先考虑的是最低延迟，而不是可靠性。）  </p><p>TCP 可避免网络拥塞，不过，TCP 也存在漏洞，包括拒绝服务、连接劫持、TCP 否决和重置攻击。  </p><p><br></p><p>如果在终端系统上运行的应用程序要向不同终端的系统上面发送信息，那么这个应用程序会被收到上面说过的应用层协议所控制。<br>该协议会将用户的数据传送给传输层，然后由传输层运行的TCP协议负责讲信息安全的发送给接收方。  </p><p>TCP协议会创建足够的数据包来容纳所有的数据，而且每一个数据包都会由报头和用户数据组成。  </p><p><br></p><p>除了确保数据的安全传输外，TCP协议还需要确保任何相应都会被引导回应用层级，因此，报文头中的一项内容就是<strong>端口号 (Port number)</strong>。端口号用于标识应用层的协议，比如说，HTTP的端口号就是80。  </p><p>数据包还必须包括接收端系统应用层协议的端口号，虽然说TCP不关心接收端的系统地址。  </p><p>在一个序列里的数据包会包含一个序列号，目的是为了在数据传输的重点能够正确的按照顺序重新组装数据。  </p><p><br></p><p>TCP 协议是面向连接的。一旦网络层向传输层返回确认，表明连接已经建立，TCP 就会发送其他数据包并接收包含确认的响应数据包。而且还可以识别并重新发送丢失的数据包。  </p><p><br></p><hr><h3 id="IP-互联网协议"><a href="#IP-互联网协议" class="headerlink" title="IP (互联网协议)"></a><strong>IP (互联网协议)</strong></h3><p><strong>互联网协议 (Internet Protocol)</strong>是一种协议或者一组规则，用于数据包的路由和寻址，使其能够穿越网络到达它要去的目的地。<br>穿越互联网的数据被分为一个个较小的块，我们之前提到过，叫做数据包。每个数据包的报头都附有IP信息，这些信息有助于</p><p>在网络层中，IP的是能够确保终端连接互联网的一个重要因素。<br>IP协议从传输层接受数据包，然后添加一个报头。报头包含发送方和接收方的IP地址。要找到接收方的IP地址，很可能需要使用DNS服务来找到与用户数据中提供的URL相对应的地址。  </p><p><br></p><p>IP数据包通常被叫做“<strong>数据报 (Datagram)</strong>”。它被发送到数据链路层，然后被发送到不同的协议套件中。  </p><p>数据链路层会把数据报组装成一个“帧”，然后再进行发送。有关这个“帧”的内容下一章我们会进一步解释。  </p><p><br></p><p>IP具有无连接服务的功能，一旦发送了数据包，IP无法知道他是不是真正的到达了目的地。如果IP收到了一个包含对先前发送的数据包的确认数据包，那么它只会把该数据包传递给TCP，自己不会了解其中的内容。  </p><p><br></p><hr><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a><strong>路由器</strong></h3><p>上面的图片显示，数据链路层发送的“帧”在传送之前会到达一个路由器（或者是多个路由器）。在这一阶段，帧的数据报内容会被反馈给IP。现在路由器软件的功能是在传输过程中选择下一个目标主机。  </p><p>用白话来说，当数据从一台设备发送到另一台设备时，会被分解成叫做“帧”的微小单元，然后通过网络发送。这些帧首先会被路由器接受，因为路由器是引导网络数据流的设备。<br>路由器检查包含数据报内的帧内容，并使用路由表来确认数据的下一个目的地。<br>路由表是每个路由器特有的，包含数据通过网络的最佳路径等其他信息。一旦路由器确认了下一个目的地，它就会更新数据报中的地址，然后将其传回数据链路层，由数据链路层继续发送。这一过程在每一个路由器上都会重复运行。  </p><p><br></p><p>作为网络中的一个节点，交换机和路由器的主要区别是在于：当一个帧到达交换机的时候，交换机不做任何的路由操作，而是直接发送数据。交换机在数据链路层运行，但是无法进入网络层。  </p><p><br></p><hr><h2 id="以太网-Ethernet-协议栈"><a href="#以太网-Ethernet-协议栈" class="headerlink" title="以太网(Ethernet)协议栈"></a><strong>以太网(Ethernet)协议栈</strong></h2><p>在AS部分的第二章，我们就已经了解过以太网了。以太网是一套专门为局域网设计的协议，因此它可以在不予互联网或者任何网络连接的本地局域网中运行。<br>但是现在的局域网几乎不可避免地需要与互联网产生链接，所以说局域网的协议套件现在已经添加了对于互联网协议套件的支持。  </p><p><br></p><p>如果我们仔细查看一个终端系统的协议栈(<em>还是上面的那个图</em>)， 你就会发现TCP/IP协议套件占据了五层协议栈的最上面的三层，因此我们可以说，TCP/IP协议套件得到了下面两层的支持。<br>TCP/IP与这两个较低层的功能无关，它的设计目的是能够得到任何可用协议的支持。  </p><p>值得注意的是，有些数据来源只对终端系统使用了4层栈。这种情况下，可能是数据决定只调用完全由软件处理的层，也可能是将TCP/IP的所有支持合并到了同一层中。  </p><p><br></p><hr><p>以太网是最有可能用来提供两个较低层所需功能的协议。从逻辑上来说，以太网套件包括了数据链路层和物理层两个子层，如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB1c778329b108c9457c86bd268d99339b?method=download&amp;shareKey=6006174e1cb318f6cff4dd5c7fc5f809" alt=""></p><p>下面的这几点说明了以太网在支持TCP/IP的时候的功能： </p><ul><li><p><strong>逻辑链路控制(Logic Link Control, LcC)</strong>协议负责与网络层的交互。它管理数据传输并确保数据传输的完整性。不过由于以太网是一种无连接协议，所以它不负责检查传输是否成功发送。  </p></li><li><p><strong>介质访问控制(Medium Access Control, mac)</strong>协议负责组装被称之为“帧”的以太网数据包。其中的两个组成部分是发送器地址和接收器地址。此外，MAC协议还负责启动帧传输，并处理因碰撞(可能因为使用了CSMA/CD)导致的传输失败之后的恢复工作。  </p></li><li><p><strong>物理编码子层（Physical Coding Sublayer, PCS）</strong>,协议负责对准备传输的数据进行编码，或对于收到的数据进行解码。  </p></li><li><p><strong>物理介质附件(Physical Medium Attachment, PMA)</strong>协议负责信号的收发。  </p></li></ul><p><br></p><hr><h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a><strong>MAC地址</strong></h3><p>在以太网中，一个以太网帧使用的地址是物理地址或者MAC地址。<br>MAC地址值分配给网络接口控制器（NIC）的唯一标识符，用作网段内通信的网络地址。这部分的内容同样在AS部分的第二章提到过。简单来说，MAC地址标识一个唯一的网卡。<br>在大多数IEEE 802网络技术（包括以太网，Wi-Fi和蓝牙）中，这种用法都十分常见。  </p><p>迄今为止，定义MAC地址使用的48位可以保证每一个设备都分配到他们自己的MAC地址。不过，除了使用48位方案，现在还有一种64位的替代方案。这种方案已经偶尔使用，但是在将来48位地址不够用的时候就真正派上用场了。  </p><p>48位地址通常使用十六进制标识，比如说：  </p><p>        <code>4A:30:12:24:1A:10</code>  </p><p><br></p><hr><h2 id="与TCP-IP有关的应用层协议"><a href="#与TCP-IP有关的应用层协议" class="headerlink" title="与TCP/IP有关的应用层协议"></a><strong>与TCP/IP有关的应用层协议</strong></h2><h3 id="HTTP-HyperText-Transfer-Protocol"><a href="#HTTP-HyperText-Transfer-Protocol" class="headerlink" title="HTTP (HyperText Transfer Protocol)"></a><strong>HTTP (HyperText Transfer Protocol)</strong></h3><p><strong>超文本传输协议(HyperText Transfer Protocol, HTTP)</strong>，是最重要的应用层协议，因为这是万维网的基础。<br>每次用户使用网络浏览器访问网站的时候都会用到HTTP，但它的功能对用户是隐藏的。换句话说，当你访问一个网站的时候，你的浏览器会向网站的服务器发送一个HTTP请求，而服务器则使用HTTP回应用户网站的内容。这个过程发生在幕后，用户是看不到的。  </p><p>HTTP协议定义了报文的格式。请求信息的第一行是“<strong>请求行 (Request Line)</strong>”，请求行之后还可以加上<strong>标题行 (Header Line)</strong>。所有这些信息都是用ASCII编码。请求行的格式如下：  </p><p>        <code>&lt;Method&gt; &lt;URL&gt; &lt;Version&gt;CRLF</code>  </p><p>其中后面的CR和LF是ASCII的回车和换行符。  </p><p>请求行通常使用GET作为获取方法。不过除了GET方法，还存在其他的获取内容方法。这使得HTTP成为一种适用范围更广的协议，而不仅仅用于网页访问。<br>在使用HTTP的时候，我们必须指定HTTP的版本，因为HTTP发展到现在已经存在了好多版本。  </p><p><br></p><hr><h3 id="电子邮件协议"><a href="#电子邮件协议" class="headerlink" title="电子邮件协议"></a><strong>电子邮件协议</strong></h3><p>发送和接受电子邮件的传统方法如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB2850a0d087d768b07083c5289fe9cd21?method=download&amp;shareKey=acbc8c637f4a495999dfecfde993215b" alt=""></p><p>这其中设计三个单独的客户端到服务器的交互。客户端的电子邮件发件人必须和邮件服务器建立连接，然后该服务器必须变成“客户端”向真正客户端的电子邮件接收者所使用的邮件服务器进行传输。  </p><p><br></p><p>目前存在以下三种主流的电子邮件协议：  </p><p><strong>简单邮件传输协议(Simple Mail Transfer Protocol, SMTP)</strong>，是一种“Push”协议，即用于从一个服务器向另一个服务器发送电子邮件。而<strong>邮局协议版本3 (POP3)</strong>是一种“Pull”协议，即用于从服务器检索电子邮件并下载到客户端计算机。  </p><p>还有一种协议叫做<strong>互联网消息访问协议 (Internet Message Access Protocol, IMAP)</strong>，这是POP3的最新替代方案。POP3是将电子邮件下载到客户端计算机上，但是IMAP允许将电子邮件保存在服务器上，同时客户端也可以访问存储的电子邮件。<br>这意味着如果使用IMAP协议，你可以在任何设备上访问你的邮件。而使用POP3，我们只能从下载邮件的客户端系统访问你的邮件。  </p><p>一般来说，POP3在抵御网络攻击方面可能会更加安全，因为电子邮件都存在客户端计算机的本地。不过使用IMAP存储电子邮件的服务器可能会定期备份，但是本地客户端大概率不会。  </p><p><br></p><hr><h3 id="FTP-文件传输协议"><a href="#FTP-文件传输协议" class="headerlink" title="FTP (文件传输协议)"></a><strong>FTP (文件传输协议)</strong></h3><p><strong>文件传输协议 (File Transfer Protocol, FTP)</strong>是一种标准通信协议，用于在计算机网络中将计算机文件从服务器传输到客户端。  </p><p>FTP 基于客户机-服务器模型架构，在客户机和服务器之间使用独立的控制和数据连接。FTP 用户可以通过明文登录协议（通常以用户名和密码的形式）进行身份验证，但如果服务器配置允许，也可以匿名连接。  </p><p>为了保护用户名和密码并对内容进行加密的安全传输，FTP 通常使用 SSL/TLS (FTPS) 或用 SSH 文件传输协议 (SFTP) 代替。  </p><p><br></p><hr><h2 id="P2P文件共享"><a href="#P2P文件共享" class="headerlink" title="P2P文件共享"></a><strong>P2P文件共享</strong></h2><p><strong>点对点文件共享 (Peer-to-peer file sharing, P2P file sharing)</strong>产生的网络流是互联网使用的主要特征之一。  </p><p>P2P 是一种没有结构和控制机制的架构。点对点既是客户端也是服务器，每个点对点只是一个终端系统。当对等体充当服务器时，它被称为 “种子”。</p><p><br></p><p>在P2P中，BitTorrent协议是最常用的协议，因为它可以快速的共享文件。 BitTorrent 是一种用于点对点文件共享（P2P）的通信协议，它使用户能够以分散的方式在互联网上分发数据和电子文件。要发送或接收文件，用户需要在联网电脑上使用 BitTorrent 客户端。  </p><p>BitTorrent 客户端是实现 BitTorrent 协议的计算机程序。BitTorrent 客户端适用于各种计算平台和操作系统，包括 Rainberry 公司发布的官方客户端。流行的客户端包括 μTorrent、迅雷、Transmission、qBittorrent、Vuze、Deluge、BitComet 和 Tixati等等。</p><p>BitTorrent 跟踪器提供可用于传输的文件列表，并允许客户端查找可传输文件的对等用户（称为 “种子”）。程序员布拉姆-科恩于 2001 年 4 月设计了该协议，并于 2001 年 7 月 2 日发布了第一个可用版本。BitTorrent 协议可用于减少分发大文件对服务器和网络的影响。BitTorrent 协议允许用户加入一个主机 “群”，同时相互上传和下载文件，而不是从单个源服务器下载文件。  </p><p><br></p><p>如果我们决定在终端系统使用BitTorrent，我们需要解决下面这三个基本问题：  </p><ol><li>如何确保计算机能够在网络上找到拥有目标资源的计算机？  </li></ol><blockquote><p>首先每个内容的供应者都提供一个内容描述，叫做torrent。这是一个包含跟踪器 （<em>引导计算机找到内容的服务器</em>）名称和内容块列表的文件。torrent文件比内容至少要小上三个过更多的数量级，因此这样的种子文件更易于我们传播。<br>跟踪器是一个服务器，它的任务是维护正在下载和上传内容的所有其他的终端的列表。  </p></blockquote><ol><li>在这样的对等网络上，如何为所有人提供高速的下载？  </li></ol><blockquote><p>对等网络在下载和上传的过程是同时发生的，但是对等网络必须同时交换数据块列表，来确保优先下载稀有的数据块。只要下载一次稀有的片段，那么这个数据块的稀有程度就会降低。  </p></blockquote><ol><li>每个终端如何鼓励其他的终端提供内容，而不是仅仅使用协议下载文件造福自己？  </li></ol><blockquote><p>在经济中有一个名词叫做”Free-rider”。在这里我们需要对付的就是这类的终端。解决的方法如下：<br>首先一个终端先随机尝试连接其他的终端，然后仅仅向那些提供常规下载的节点传输数据。如果发现有一个节点不下载或者下载速度贼慢，那么这个节点最后就会被“隔离”或者“阻塞”。  </p></blockquote><p><br></p><hr><h1 id="第十八章：硬件与虚拟机"><a href="#第十八章：硬件与虚拟机" class="headerlink" title="第十八章：硬件与虚拟机"></a><strong>第十八章：硬件与虚拟机</strong></h1><h2 id="控制单元"><a href="#控制单元" class="headerlink" title="控制单元"></a><strong>控制单元</strong></h2><p><strong>控制单元 (Control unit, CU)</strong>是计算机中CPU的一个组件，用于指导处理器的运行。它通常使用二进制解码器将编码指令转换为定时和控制信号，从而直到内存，算术逻辑单元(ALU)和IO设备等其他单元的运行。  </p><p>控制单元管理大部分计算机的资源，并直到中央处理器与其他设备之间的数据流。在现在计算机设计中，控制单元通常是中央处理器的内部组成部分，其整体作用和运行方式自推出以来一直没有发生改变。  </p><p><br></p><hr><p>在执行程序时，中央处理器会接收一连串机器码指令。中央处理器内的控制单元有责任确保正确处理每一条机器指令。有两种方法可以设计控制单元，使其发挥功能：  </p><ul><li><p><strong>将控制单元构建为逻辑电路</strong>：这也称为<strong>硬连线控制单元 (Hardwired control unit)</strong>。硬连线控制单元通过逻辑电路将从中央处理器内存接收到的指令转化为控制信号。来自计算机主机内存的指令被发送到指令寄存器，指令寄存器负责识别其“操作码”。随后操作码被传递给指令解码器，指令解码器使用操作码来解释要生成的控制信号。然后，逻辑电路根据任何外部输入和条件代码创建了信号。&lt;/br&gt; &lt;/br&gt;整个过程由系统时钟同步，系统时钟产生有规律的脉冲，在低电平和高电平之间持续切换，形成了0和1。这种控制单元之所以是“硬连线”，是因为他们的逻辑电路是由硬件以逻辑门电路的物理排列。&lt;/br&gt; &lt;/br&gt;硬接线控制单元的一些缺点是成本相对较高，难以用于复杂的操作，而且无法在不进行物理改动的情况下对它进行修改。此外，每个电路只能处理一种形式的指令。不过，硬接线控制单元速度更快，因为每一种指令都由自己指定的电路来完成计算。  </p></li><li><p><strong>使用微编程构建微程序控制单元</strong>：这样的方法叫做<strong>微程序控制单元 (Microprogrammed control unit)</strong>。微编程控制单元采用编程的方法实现。在微程序控制中，微操作是通过执行由微指令组成的程序来实现的。<br> <br> 控制存储器地址寄存器用来指定微指令的地址。控制存储器被用为ROM，其永久存储了左右的控制信息我们一般称为<strong>固件 (Firmware)</strong>。控制寄存器保存从存储器获取的微指令。微指令包含一个控制字，为数据处理器指定一个或者多个微操作。  </p></li></ul><p><br></p><hr><h2 id="CISC和RISC处理器"><a href="#CISC和RISC处理器" class="headerlink" title="CISC和RISC处理器"></a><strong>CISC和RISC处理器</strong></h2><p>处理器的架构是指其物理结构。不过，处理器也有所谓的 “指令集架构”。</p><p>指令集架构涉及到： </p><ul><li>指令集</li><li>指令格式</li><li>寻址模式</li><li>指令可以访问的寄存器</li></ul><p>其中，指令集的选择是区分指令集架构的主要因素。  </p><p><br></p><hr><p>在计算机发展的早期，选择计算机指令集架构的一个重要因素是，该架构是否能够使高级语言编译器的编写变得更加容易。我们现在将这一种架构叫做<strong>复杂指令集计算机 (Complex Instruction Set Computer, CISC)</strong>。</p><p>直到20世纪70年代末期，人们开始对这一理念产生质疑。有人认为，使用<strong>精简指令集计算机 (Reduces Instruction Set Computer, RISC)</strong>会是一种更好的方法。  </p><p><br></p><p>下面介绍一下这两位：  </p><p>CISC和RISC是两种不同类型的计算机体系结构。二者的主要区别在于<strong>中央处理器可执行的指令数</strong>和<strong>执行这些指令所需要的周期数</strong>。  </p><p>CISC试图尽量减少每个程序的指令数，但是代价是这会增加每个指令的周期数。这就意味着CISC处理器一般<u>拥有大量的复杂指令</u>，但是可以在一条指令中执行多种操作。这些指令通常更长，功能更强大，可以用更少的单条指令来完成复杂的任务。  </p><p>现在转过头来看看另一边的RISC。RISC是一种以每个程序的指令数量为代价来减少每条指令周期的方法。这就意味着RISC处理器的<strong>简单指令数量较少</strong>，<strong>只能执行单一的操作</strong>。这样，RISC处理器的指令集就设计的比CISC更简单，更小了。这些指令通常更短更简单，需要更多的单独指令才能完成复杂的任务。  </p><p>这两种方法各有利弊。CISC处理器通常<strong>更容易编程</strong>，因为它们有更强大的指令。但由于每条指令的周期数多，所以运行速度可能会慢一些。RISC处理器由于减少了每条指令的周期数，因此运行的速度普遍较快，但是因为需要更多的单独指令来执行复杂的任务，因此这可能会使得编程的难度直线上升。  </p><article class="message is-info"><div class="message-body"><b>Complex Instruction Set Computer (CISC): a single instruction can be more complex and involve more loading of data from memory.</b><br><b>Reduced Instruction Set Computer (RISC): s single instruction is simpler, requiring minimal loading of data from memory.</b></div></article> <p><br></p><hr><p>下表列出了RISC区别于CISC的一些特征：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">RISC</th><th style="text-align:left">CISC</th></tr></thead><tbody><tr><td style="text-align:left">更少的指令数</td><td style="text-align:left">更多的指令数</td></tr><tr><td style="text-align:left">更简单的指令</td><td style="text-align:left">更复杂的指令</td></tr><tr><td style="text-align:left">指令格式相对简单</td><td style="text-align:left">指令格式复杂</td></tr><tr><td style="text-align:left">尽可能使用单周期指令</td><td style="text-align:left">多周期指令</td></tr><tr><td style="text-align:left">定长指令</td><td style="text-align:left">可变长度指令</td></tr><tr><td style="text-align:left">只对内存地址执行加载和存储指令</td><td style="text-align:left">向内存地址存储多种指令</td></tr><tr><td style="text-align:left">更少的寻址模式</td><td style="text-align:left">更多的寻址模式</td></tr><tr><td style="text-align:left">多个寄存器组</td><td style="text-align:left">更少的寄存器</td></tr><tr><td style="text-align:left">多为<strong>硬连线控制单元</strong></td><td style="text-align:left">多为<strong>微程序控制单元</strong></td></tr><tr><td style="text-align:left">更利于流水线作业</td><td style="text-align:left">不太利于流水线作业</td></tr></tbody></table></div><p>需要注意的是，RISC处理器大多使用硬连线控制单元，而CISC处理器大多使用微编程控制单元。</p><p>指令数量的减少并不是使用RISC的主要驱动力，降低指令的复杂性才是RISC的主要特征。  </p><p>典型的CISC架构包含很多的专用指令，专用指令的设计符合高级编程语言的要求。专用指令需要多次访问内存。与直接访问寄存器相比，访问内存的速度可谓是相当慢。  </p><p>RISC处理器的指令非常简单，因此数据可以存储在寄存器中，并在寄存器中进行操作。除了初始化和资源存储请求之外，无需对存储器进行任何的访问。   </p><p>RISC指令的简单性使得硬连线控制单元的使用更加容易。而许多CISC指令的复杂性使得硬连线控制单元的构建更加复杂，因此我们使用微程序控制单元。  </p><p><br></p><hr><h3 id="流水线作业-Pipelining"><a href="#流水线作业-Pipelining" class="headerlink" title="流水线作业 (Pipelining)"></a><strong>流水线作业 (Pipelining)</strong></h3><p>创建 RISC 处理器的主要驱动力之一，就是为高效流水线提供机会。  </p><p><strong>流水线 (Pipelining)</strong>是一种专门应用于指令执行的并行方式。其他并行形式将在下一节中讨论。  </p><p><em>好像翻译成“流水线”不是很恰当，但是懂我意思就行</em></p><article class="message is-info"><div class="message-body"><b>Pipelining: instruction-level parallelism.</b></div></article> <p><br></p><hr><p>流水线作业的基本原理是第五章中介绍的F-E Cycle可以分为若干阶段。其中的一个形式是“五阶段模型”。要实现流水线操作，处理器的结构必须含有5个独立的单元，这样每个单元就可以单独处理五个阶段中的其中一个阶段。这同样解释了为什么RISC处理器需要许多的寄存器组，因为存在多个处理单元，而每个单元必须需要寄存器来访问将要使用的数据。</p><p>五阶段模型如下表所述：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">时钟周期 →</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:left">Instruction Fetch<br>(指令读取，IF)</td><td style="text-align:center">1.1</td><td style="text-align:center">2.1</td><td style="text-align:center">3.1</td><td style="text-align:center">4.1</td><td style="text-align:center">5.1</td><td style="text-align:center">(6.1)</td><td style="text-align:center">(7.1)</td></tr><tr><td style="text-align:left">Instruction Decode<br>(指令解码，ID)</td><td style="text-align:center"></td><td style="text-align:center">1.2</td><td style="text-align:center">2.2</td><td style="text-align:center">3.2</td><td style="text-align:center">4.2</td><td style="text-align:center">5.2</td><td style="text-align:center">(6.2)</td></tr><tr><td style="text-align:left">Operand Fetch<br>(操作数抓取，OF)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">1.3</td><td style="text-align:center">2.3</td><td style="text-align:center">3.3</td><td style="text-align:center">4.3</td><td style="text-align:center">5.3</td></tr><tr><td style="text-align:left">Instruction Execute<br>(指令执行，IE)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">1.4</td><td style="text-align:center">2.4</td><td style="text-align:center">3.4</td><td style="text-align:center">4.4</td></tr><tr><td style="text-align:left">Result Write Back<br>(结果回写，WB)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">1.5</td><td style="text-align:center">2.5</td><td style="text-align:center">3.5</td></tr></tbody></table></div><p><br></p><p>在上面的表格中，每一行代表流水线中的一个阶段： 指令读取 (IF)、指令解码 (ID)、操作数读取 (OF)、指令执行 (IE) 和结果回写 (WB)，同时每列代表一个时钟周期。单元中的数字代表指令编号和该指令的阶段。例如，”1.1 “表示指令 1 处于 第一步 “IF” 阶段，”2.5 “表示指令 2 处于第五步 “WB” 阶段。  </p><p>解读一下表格：最初只有第一条指令的第一阶段进入了流水线。在第六个时钟周期，当第一个指令已经离开流水线时 <em>（因为不存在第六个流水线阶段）</em>，指令2的最后一步仍在处理，而且指令6才刚刚进入流水线作业 <em>（因为没有第六个流水线阶段，所以第六个指令的流程并没有画在表上。但如果第六个指令需要处理的话，会在第六个时钟周期进入流水线）</em>。</p><p>流水线一旦开始运行，就要处理五个阶段的五条单独指令。特别是在每个时钟周期，都需要完成一条指令的处理工作。如果没有流水线并行作业，那么处理时间将延长五倍。</p><p><br></p><p>在流水线系统中，多条指令在流水线的不同阶段同时处理。当中断发生时，流水线中就会有几条指令尚未执行完毕。<br>有两种解决中断问题的解决方案：  </p><ul><li><p>第一种：<strong>清除最近进入的四条指令的流水线内容，只留下最早进入的指令。</strong>然后，正常的中断处理程序就可以应用于剩余的指令。</p></li><li><p>第二种：<strong>在处理器中构建具有独立程序计数器寄存器的独立单元。</strong>这样就可以在处理中断时为流水线中的所有指令存储当前数据。</p></li></ul><p><br></p><hr><h2 id="基本计算机架构"><a href="#基本计算机架构" class="headerlink" title="基本计算机架构"></a><strong>基本计算机架构</strong></h2><p>描述不同计算机体系结构的一种有效的方法是：考虑指令流的数量和数据流的数量。因此这区分出了四种类型的架构：  </p><p><br></p><hr><h3 id="单指令流单数据流-SISD"><a href="#单指令流单数据流-SISD" class="headerlink" title="单指令流单数据流 (SISD)"></a><strong>单指令流单数据流 (SISD)</strong></h3><p><strong>单指令流单数据流 (Single Instruction Stream Single Data Stream, SISD)</strong>是早期计算机中的典型架构，同样也是早期的微处理器所采用的排列方式。具体来说，SISD代表了包含一个控制单元，一个处理器单元和一个存储器单元的单台计算机的组织结构。所有的指令按照顺序执行，系统内部可能有并行能力，也可能没有。  </p><p>虽说是这样，但是课本上写的是SISD纯粹是顺序性的产物，没有一点点并行性。我们就按照这条来记吧。</p><p><br></p><p>下图展示了如何使用SISD来操作数组中的单个元素：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB30316d3629bca49a5815cbb453ffaab7?method=download&amp;shareKey=3ed3432f2423c78b6885dccd0b2e3c68" alt="">  </p><p>图中给出了一个原始的数组。如果机器需要将这个数组内的元素乘以2，那么SISD就会按照顺序一个一个地处理数组内部的数据，从右到左。换言之，SISD对于数组内每一个元素都执行了相同的“乘以2”的操作。  </p><article class="message is-info"><div class="message-body"><b>SISD: Stands for Single Instruction Stream Single Data stream; a single processor accessing one memory.</b></div></article> <p><br></p><hr><h3 id="单指令流多数据流-SIMD"><a href="#单指令流多数据流-SIMD" class="headerlink" title="单指令流多数据流 (SIMD)"></a><strong>单指令流多数据流 (SIMD)</strong></h3><p><strong>单指令流多数据流 (Single Instruction Stream Multiple Data Stream, SIMD)</strong>所描述的计算机具有多个处理元件，可以<u>同时对多个数据点执行相同的操作</u>。这类计算机利用数据级的并行性，但是不利用它们的并发性。 </p><p>SIMD是一种并行处理方式，也就是多个处理元件同时对多个数据点执行相同操作。这意味着计算机就可以使用相同的指令同时处理多个数据点，而不是一步只能处理一个数据点。这可以大大提升某些类型计算的速度。也就是说，虽然说存在并行计算，但是每个单元在任何给定的时刻都执行完全相同的指令。  </p><p><br></p><hr><p>下图是一个SIMD的图示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB7144d89b55622ba1765c5b94a0c5e21e?method=download&amp;shareKey=1d05101205bb890f3f1a34bb47dd9fde" alt=""></p><p>由图可见，所有在数组中的元素都在同一个指令周期完成了处理，而不像SISD一样每一个元素都需要单独处理。  </p><p><br></p><p>SIMD 的结构通常用图表表示，就像下图一样：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB6215f557d53c58f88328a11754ac405e?method=download&amp;shareKey=2f07fdbe2d15d4e0cc24e974bdcd90c8" alt=""></p><p>在本图中，结构图显示数据流进入了四个单独的组件，这些组件都提供了相同的指令。这些组件被称之为<strong>处理单元(Processing Unit, PU)</strong>，有时这些组件也被称为<strong>处理原件(Processing Element, PE)</strong>。无论使用什么名称，这些组件都全部是ALU，也就是算术逻辑单元。有多个名称的原因是因为实现SIMD有多种方法：  </p><p>第一种实现方法是使用阵列或者向量处理器(Matrix &amp; Vector processors)。他们有一组并行的寄存器，每一个数据流都会被安排一个寄存器。我们可以使用一4位或者128位的大型寄存器，来同时存储多个数值。在这种实现方式中，并行性仅仅内置在一个处理器中，允许这个处理器同时处理多个数据流。</p><p>另一种方法是使用多核处理器。现在大多数的电脑都搭载了多核处理器。比如说使用4核处理器，就代表四个处理器并行工作。在这种情况下，每一个处理器都可能有自己专用的告诉缓存来提供可靠的数据流。</p><article class="message is-info"><div class="message-body"><b>SIMD: Stands for Single Instruction Stream Multiple Data Stream; processing of parallel data input requiring one control unit instructing multiple processing units.</b></div></article> <p><br></p><hr><h3 id="多指令流单数据流-MISD"><a href="#多指令流单数据流-MISD" class="headerlink" title="多指令流单数据流 (MISD)"></a><strong>多指令流单数据流 (MISD)</strong></h3><p><strong>多指令流单数据流 (Multiple Instruction Stream Single Data Stream, MISD)</strong>是一种并行计算架构，其中<u>许多功能单元对同样的数据执行不同的操作。</u>  </p><p>与SIMD相比，MISD的应用就少得多，因为MISD通常更适合常用的数据并行技术。具体来说，他们可以更好的扩展和使用计算资源。话虽这么讲，MISD也是有应用的，比如说用于航天飞机的飞行控制计算机。大家也知道航天方面的数据计算是不容有失的，-在这种情况下，使用 MISD 架构可将多条指令应用于同一数据流，从而提供冗余并提高系统的可靠性。</p><article class="message is-info"><div class="message-body"><b>MISD: Stands for Multiple Instruction Stream Single Data Stream; does not exist in a single architecture.</b></div></article> <p><br></p><hr><h3 id="多指令流多数据流-MIMD"><a href="#多指令流多数据流-MIMD" class="headerlink" title="多指令流多数据流 (MIMD)"></a><strong>多指令流多数据流 (MIMD)</strong></h3><p><strong>多指令流多数据流 (Multiple Instruction Stream Multiple Data Stream, MIMD)</strong>是一种并行计算架构。在这种架构中，有许多个处理器异步独立运行。<u>在任何时候，不同的处理器都可能对不同的数据执行不同的指令。</u>  </p><p>MIMD架构被应用于多个领域，如计算机辅助设计，仿真，建模或者是通信交换机。MIMD机器可以分为共享内存和分布式内存两类，他们的类别是基于MIMD处理器访问内存的方式决定的。共享机器模型可以是总线型、扩展型或者分层型。</p><article class="message is-info"><div class="message-body"><b>MIMD: Stands for Multiple Instruction Stream Multiple Data Stream; multiple processors asynchronously processing parallel data input.</b></div></article> <p><br></p><hr><h3 id="大规模并行计算机系统"><a href="#大规模并行计算机系统" class="headerlink" title="大规模并行计算机系统"></a><strong>大规模并行计算机系统</strong></h3><p><strong>大规模并行计算机系统 (Massively parallel computer systems)</strong>是指使用大量计算机处理器（或者是独立的计算机）同时并行执行一组协调计算的计算架构。这可以通过各种各样的方法实现，比如说网格计算 (Grid computing)，就是透过使用大量的异构计算机的未使用资源，将其作为嵌入在分布式电信基础设施中的一个虚拟的计算机集群，为解决大规模的计算问题提供模型的方案。大名鼎鼎的SETI@home项目就是使用了这项技术，通过筹集大量计算机用户的剩余资源来分布式计算问题。这些小的计算机结合起来的算力同样强大，丝毫不亚于超级计算机。  </p><p>大规模并行计算机系统与超级计算机的区别在于，负责驱动多个处理器的不是总线结构，而是支持多个计算机单元的网络基础设施。不同计算机上面运行的程序可以通过网络传递信息进行通信。 </p><p><br></p><hr><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a><strong>虚拟机</strong></h2><p>虚拟机听起来像是个硬件，但其实不是。最常见的虚拟机类型是<strong>系统虚拟机 (System virtual machine)</strong>，它的作用是模拟真实计算机系统硬件的软件。  </p><article class="message is-info"><div class="message-body"><b>System virtual machine: the emulation of computer system hardware using software.</b></div></article> <p><br></p><p>一般来说，应用程序需要在操作系统支持的情况下才能在硬件上直接运行。虚拟机的原理是进程直接与操作系统提供的软件界面进行交互，如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBad58e3603d7ce6727ad0207a279a5d47?method=download&amp;shareKey=ae8057b16074d482045345abe63369db" alt="">  </p><p>从上图我们需要注意这几点：  </p><ol><li><p>应用程序是在客户操作系统的协助下安装的。客座操作系统将通过与虚拟机交互来支持运行中的应用程序，就好像客座操作系统通常运行的硬件一样。  </p></li><li><p>虚拟机实施软件可被视为一种实用程序，运行时受特定主机操作系统的支持，而主机操作系统又是主机硬件所特有的。  </p></li><li><p>在主机操作系统的控制下，主机硬件上可以同时直接运行应用程序。  </p></li></ol><p><br></p><p>虚拟机方法的主要优点是可以在一个计算机系统上提供多个不同的操作系统。如果一个组织拥有遗留系统，希望继续使用旧软件，但又不想保留旧硬件，这一点就特别有价值。  </p><p>另外，拥有大型主机并提供服务器整合设施的公司也可以多次提供相同的操作系统。不同的公司可以获得自己的虚拟机，作为服务器运行。  </p><p>使用虚拟机的一个缺点是需要花费大量时间和精力来实施。另一个缺点是虚拟机的性能无法达到普通系统的性能水平。  </p><p><br></p><p>之前在第八章讨论的 Java 虚拟机是进程虚拟机的一个例子，它基于不同的基本概念。进程虚拟机提供了一个与平台无关的编程环境，允许程序在任何平台上以相同的方式执行。这是一种仅支持运行 Java 程序的特定软件。</p><p><br></p><hr><h1 id="第十九章：逻辑门与布尔代数"><a href="#第十九章：逻辑门与布尔代数" class="headerlink" title="第十九章：逻辑门与布尔代数"></a><strong>第十九章：逻辑门与布尔代数</strong></h1><h2 id="逻辑电路"><a href="#逻辑电路" class="headerlink" title="逻辑电路"></a><strong>逻辑电路</strong></h2><p>早在第四章，我们就已经接触过了逻辑电路中使用的逻辑门符号，并讨论了逻辑电路，真值表和逻辑表达式之间的关系。本章会介绍一些额外的内容，比如一些用于构建计算机硬件功能组建的特定电路。  </p><h3 id="半加法器-The-half-adder"><a href="#半加法器-The-half-adder" class="headerlink" title="半加法器 (The half adder)"></a><strong>半加法器 (The half adder)</strong></h3><p>在计算机中，二进制加法运算随处可见。两个比特的结果相加结果要么为1，要么为0。在一些特殊情况下，如1和1相加，会导致当前位结果为0，同时它的下一位会被加一，也就是进位。  </p><p>执行二进制加法最简单的电路是<strong>半加法器 (Half adder)</strong>。如下图所示，半加法器会接受两个值的输入，然后输出“和位(S)”和一个“进位(C)”。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB50fb2efc7af272739fbc1a90ed75d8fb?method=download&amp;shareKey=c676b82aaa0cdaed3a57929e73110e3b" alt=""></p><p>这个电路的真值表看起来就是这样的：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">Input</th><th style="text-align:center">Input</th><th style="text-align:center">Output</th><th style="text-align:center">Output</th></tr></thead><tbody><tr><td style="text-align:center"><strong>A</strong></td><td style="text-align:center"><strong>B</strong></td><td style="text-align:center"><strong>S</strong></td><td style="text-align:center"><strong>C</strong></td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table></div><p>通过检查这个真值表，我们大概可以推测出半加法器的成分如何。<br>可以看到，只有在两个输入位都为1的时候，进位C才会出现1的结果。因此，C输出的真值表就可能是基于AND逻辑门实现的。<br>和位S输出的真值表与之前聊过的XOR运算符的真值表一致，所以我们也可以推测半加法器里面还存在一个XOR逻辑门。<br>因此，产生半加法器功能的电路可以包含一个AND门和一个XOR门，其中这两个逻辑门都会接受A和B两个输入。</p><p>当然，上面列出的只是完成这个功能的其中一种情况，还有更多逻辑门的搭配方式可以实现这样的功能。冷知识：NAND逻辑门和NOR门是两个通用门，这意味着任何的逻辑电路都可以使用这两种逻辑门进行构建。再加上NAND和NOR门易于制造的特点，导致电路制造商们很喜欢使用它们俩。下面这个图片就是仅仅使用NAND门和NOR门构建出来的一个半加法器：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB534f2fe40966c4cfe4f07994cae4f61c?method=download&amp;shareKey=8ab4d250399ae72eeb307bba668d92d5" alt=""></p><p><br></p><article class="message is-info"><div class="message-body"><b>Half adder circuit: a circuit which performs binary addition of two individual bits.</b></div></article> <p><br></p><hr><h3 id="全加法器-The-full-adder"><a href="#全加法器-The-full-adder" class="headerlink" title="全加法器 (The full adder)"></a><strong>全加法器 (The full adder)</strong></h3><p>一般来说，如果我们需要计算两个二进制数字相加，则我们必须要从两个数字的最小位开始计算，一直计算到最大位。在计算的每一个阶段，前一个加法的结果的进位数字都必须并入到当前的计算中。<br>如果每次使用半加法器，就必须需要使用单独的电路来处理进位问题，因为半加法器仅仅接受两个输入。  </p><p><strong>全加法器 (Full adder)</strong>是一种执行加法运算的一种电路。这种加法器接受三个输入：两个需要相加的数字和上一位产生的进位，并产生三个输出，分别是三个输入的和以及下一位的进位。  </p><p>当我们需要对不止一位进行二进制加法运算时，我们最好使用全加法器，因为全加法器考虑了前一位假发的金文，所以它能够处理所有的进位问题。例如我们设计对多位二进制数（如4位，8位，16位二进制数等）进行算术运算的电路，我们就需要使用全加法器。</p><p>全加法器的真值表如下：  </p><div class="table-container"><table><thead><tr><th>Input</th><th>Input</th><th>Input</th><th>Output</th><th>Output</th></tr></thead><tbody><tr><td>A</td><td>B</td><td>Cin</td><td>S</td><td>Cout</td></tr><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table></div><p><br></p><p>全加法器的一种可能的构造如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBf506c3d9a0c9e9dcad6f14905ad95347?method=download&amp;shareKey=cf712be00f7aa9f64cd2ea3b41c00895" alt=""></p><p><br></p><p>我们之前说过，所有的电路理论上都可以使用NAND和NOR逻辑门来构建。所以全加法器的另一种构造如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB7f4a38b0b4d46b3034ead532ffb7a7a5?method=download&amp;shareKey=212c866467e455e7c6f529fe74bea972" alt=""></p><p><br></p><article class="message is-info"><div class="message-body"><b>Full adder circuit: a circuit which performs binary addition of two individual bits and an input carry bit.</b></div></article> <p><br></p><hr><h2 id="时序电路"><a href="#时序电路" class="headerlink" title="时序电路"></a><strong>时序电路</strong></h2><p>到目前为止，本书中介绍过的所有电路全部都是 组合电路 (Combinational circuit)。对于这样的电路来说，输出的值只由输入的值决定。<br>接下来我们会介绍时序电路，它的输出取决于输入和前一个输出项。  </p><p><strong>时序电路 (Sequential logic circuit)</strong>是一种数字电路，它存储上一个输出信息并使用它来计算下一个输出。我们刚说过，时序电路于组合电路不同之处就在于，时序电路既依赖当前输入值，同样也依赖存储在某一个存储元件中的上一个输出状态。  </p><article class="message is-info"><div class="message-body"><b>Combinational circuit: a circuit in which the output is dependent only on the input values.</b><br><b>Sequential circuit: a circuit in which the output depends n the input values and the previous output.</b></div></article> <p><br></p><hr><h3 id="SR-触发器-SR-Flip-flop"><a href="#SR-触发器-SR-Flip-flop" class="headerlink" title="SR 触发器 (SR Flip-flop)"></a><strong>SR 触发器 (SR Flip-flop)</strong></h3><p>下面我们要介绍的SR触发器，是时序电路的一个简单例子。  </p><p><strong>SR触发器 (SR Flip-flop)</strong>，又称之为SR锁存器，是数字电子产品中经常会用到的一种基本触发器。SR触发器是一种双稳定器件，这意味着SR触发器有两个稳定状态，而这两种稳定状态可以被无限期保存。正因为这种独特的记忆特性，卫门叫它“锁存器”。它可以由两个NAND门和一个NOR门组成，如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBf6c36ffa6f6e12b7716959b642e9bd4f?method=download&amp;shareKey=a83e7e149cc8b4acf2c767a8f0011cdc" alt=""></p><p>SR触发器有两个输入端，分别是 <strong>“置位” (S)</strong>和 <strong>“复位” (R)</strong>。以及两个输出端，分别是<strong>Q</strong>和<strong>Q’</strong>。<br>SR触发器的工作原理如下：  </p><ul><li><strong>设置 (set) 状态</strong>： 当设置(S)为1，(R)为0时，这时输出(Q)就会变为1。这表示锁存器进入了设置状态。  </li><li><strong>复位 (reset) 状态</strong>： 当设置(R)为1，(S)为0时，这时输出(Q)就会变为0。这表示锁存器进入了复位状态。  </li><li><strong>保持 (hold) 状态</strong>： 当输入端的(S)和(R)均为0时，无论上一个状态是设置状态还是复位状态，触发器会保持原来的状态。也就是说，输出还是会与上次相同。 <br> 比如说，如果SR触发器的上一个状态处于“set”状态，也就是Q的输出为1，并且输入S和R都是0，那么触发器会继续输出Q为1。  </li></ul><p>SR触发器的真值表如下所示：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">Input Signals</th><th style="text-align:center">Input Signals</th><th style="text-align:center">Initial State</th><th style="text-align:center">Initial State</th><th style="text-align:center">Final State</th><th style="text-align:center">Final State</th></tr></thead><tbody><tr><td style="text-align:center">S</td><td style="text-align:center">R</td><td style="text-align:center">Q</td><td style="text-align:center">Q’</td><td style="text-align:center">Q</td><td style="text-align:center">Q’</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table></div><p>从真值表中我们可以发现，表中不包含当R = 1或者S = 1的行，因为如果当S与R同时等于1，会导致输出“非法”。因为当遵循布尔代数原则时，Q和Q’不会同时输出0。Q与Q’本身应该就是彼此互补的，即当一个值为1时，另一个值应该为0。所以，输出是违反这个逻辑，是“非法”的。  </p><p>在实际运用中，我们要避免使S和R都同时为1，因为它会导致数字电路中不可预测的行为。因此为了保证电路的可靠运行，我们需要尽可能避开这种用法。</p><p><br></p><hr><h3 id="JK-触发器-JK-Flip-flop"><a href="#JK-触发器-JK-Flip-flop" class="headerlink" title="JK 触发器 (JK Flip-flop)"></a><strong>JK 触发器 (JK Flip-flop)</strong></h3><p>我们在数字电路中最讨厌的就是像刚才SR触发器中，任何可能导致电路发生“不可预测”的无效输出或者错误处理。<br>实际上，除了在电路中存在S与R都为1导致的无效输出之外，如果信号无法同时到达触发器，也会导致输出的不可预测性。为了解决这个问题，电路可以包含一个时钟脉冲输入，以提供同步输入的更好机会。<strong>JK触发器 (JK Flip-flip)</strong>，也叫JK锁存器，就是这样的一个例子。  </p><p>JK触发器是一种连续双状态单比特存储设备，是以它的发明者杰克·基尔命名的。<br>这个不重要，重要的是JK触发器有一个时钟输入引脚(Clock, CLK)，两个数据输入引脚(J和K)和两个输出引脚(Q和Q’)。如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBa259e5b4f4f0cd30f9d02342b97c1b82?method=download&amp;shareKey=c369533d4b892af9c697199f4227abc4" alt=""></p><p>JK触发器可以画成左边的简略形式，它的展开形式如右图所示。  </p><p><br></p><p>在时钟周期的情况下，JK触发器可以在时钟的前缘触发，或者是后缘触发。将时钟周期想象成一个方波。前缘就是电平从0变成1的电平上升时刻，而后缘就是电平从1变成0的电平下降时刻。</p><p>要理解电路是如何运作的，我们需要先理解一个大前提。除非所有的输入都为1，否则与非门的输出为1。如果电路处于未设置状态，那么Q = 0， Q’ = 1。这种状态是稳定并且自洽的，就正如下面的参数所示：  </p><ol><li>时钟和J都输入为0</li><li>因此左上角的NAND门输出为1</li><li>右上角的NAND门会接受两个为1的值的输入。</li><li>Q = 0</li></ol><p>如果J的输入变成了1，时钟的输入也变成了1，那么就会发生下面这些事情：  </p><ol><li>左上角的NAND门就会接受两个为1的值的输入</li><li>所以它的输出为0</li><li>这就会导致右上角的NAND门以1的值输出Q</li><li>这样一来，右下角的NAND门就会接受两个为1的值的输入。 </li><li>所以Q’的输出为0</li></ol><p><br></p><hr><p>JK触发器的真值表如下： </p><div class="table-container"><table><thead><tr><th><strong>J</strong></th><th><strong>K</strong></th><th><strong>Clock</strong></th><th><strong>Q</strong></th></tr></thead><tbody><tr><td>0</td><td>0</td><td>↑</td><td>Q unchanged</td></tr><tr><td>1</td><td>0</td><td>↑</td><td>1</td></tr><tr><td>0</td><td>1</td><td>↑</td><td>0</td></tr><tr><td>1</td><td>1</td><td>↑</td><td>Q toggles</td></tr></tbody></table></div><p>由此可见，当J和K的输入均为1的时候，Q与Q’的值会发生变换。</p><p>J可以被称作为“集合输入”。当J被设置为1，并K被设置为0的时候，它会导致输出Q也被设置为1。<br>K可以被叫做“清除输入”。当K被设置为1，J被设置为0的时候，会导致Q被清除（设置为0）。  </p><p>JK与SR触发器不一样的是，每两个输入任意发生组合都会产生一个有效的输出，输入J和K的每一个组合都对Q和Q’产生明确定义的影响，而不像SR触发器一样，包含一个无效输出。这个特性导致JK触发器更加可靠，更有预测性，因为没有导致任何不确定因素或者未定义输出的情况出现。</p><p><br></p><hr><h2 id="布尔代数基础"><a href="#布尔代数基础" class="headerlink" title="布尔代数基础"></a><strong>布尔代数基础</strong></h2><p>本书的第四章讲过了如何使用逻辑命题来使用布尔运算符来组合成逻辑表达式。而布尔代数为编写简洁的逻辑表达式提供了方法，并提供了一种简化表达式的“公式”。  </p><p>当使用一种代数形式的时候，理解它的含义是十分重要的。举个简单的例子，1+1可以被解释成很多不同的情况： </p><p>1 + 1 = 2<br>1 + 1 = 10<br>1 + 1 = 0<br>1 + 1 = 1</p><p>一式表示的是十进制算术，二式表示二进制算术，三式表示位算术，而四式可以表示布尔代数。这是因为在布尔代数中，1表示为<code>TRUE</code>，0表示为<code>FALSE</code>，而<code>+</code>可以表示或。因此，第四个计算式可以以下面这种形式表示出来：  </p><p>                         <code>TRUE OR TRUE is TRUE</code></p><p>布尔代数的表示有它的专有符号。比如说<code>AND</code>可以表示为∧，<code>OR</code>可以表示为∨。或者，<code>A AND B</code>可以写成<code>A.B</code>或者<code>AB</code>。在本章中，我们会使用这种类似“点乘”的<code>AND</code>表示方法。<code>NOT</code>的具体方式是在字母上面加一个横线。比如说<code>NOT A</code>可以表示为<code>Ā</code>。  </p><p><br></p><hr><p>在建立了基本的表示法之后，我们就需要考虑我们的计算规则了。<br>下表中的内容可以被叫做“法则”或者“定义式”：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">Identity / Law</th><th style="text-align:center">AND form</th><th style="text-align:center">OR form</th></tr></thead><tbody><tr><td style="text-align:center">Identity</td><td style="text-align:center"><code>1.A = A</code></td><td style="text-align:center"><code>0 + A = A</code></td></tr><tr><td style="text-align:center">Null</td><td style="text-align:center"><code>0.A = 0</code></td><td style="text-align:center"><code>1 + A = 1</code></td></tr><tr><td style="text-align:center">Idempotent</td><td style="text-align:center"><code>A.A = A</code></td><td style="text-align:center"><code>A + A = A</code></td></tr><tr><td style="text-align:center">Inverse</td><td style="text-align:center"><code>A.Ā = 0</code></td><td style="text-align:center"><code>A + Ā = 1</code></td></tr><tr><td style="text-align:center">Commutative</td><td style="text-align:center"><code>A.B = B.A</code></td><td style="text-align:center"><code>A + B = B + A</code></td></tr><tr><td style="text-align:center">Associative</td><td style="text-align:center"><code>(A.B).C = A.(B.C)</code></td><td style="text-align:center"><code>(A + B) + C = A + (B + C)</code></td></tr><tr><td style="text-align:center">Distributive</td><td style="text-align:center"><code>A + B.C = (A + B).(A + C)</code></td><td style="text-align:center"><code>A.(B + C) = A.B + A.C</code></td></tr><tr><td style="text-align:center">Absorption</td><td style="text-align:center"><code>A.(A + B) = A</code></td><td style="text-align:center"><code>A + A.B = A</code></td></tr><tr><td style="text-align:center">De Morgan’s</td><td style="text-align:center"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="13.617ex" height="2.523ex" role="img" focusable="false" viewBox="0 -1033 6018.7 1115"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mrow"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(750,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(1194.7,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g><g data-mml-node="mo" transform="translate(0,648)"><svg width="1953.7" height="237" x="0" y="148" viewBox="488.4 148 1953.7 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(5.861,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(2231.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mover" transform="translate(3287.2,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(0,648)"><svg width="750" height="237" x="0" y="148" viewBox="187.5 148 750 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(2.25,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(4259.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mover" transform="translate(5259.7,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(0,615)"><svg width="759" height="237" x="0" y="148" viewBox="189.8 148 759 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(2.277,1)"></path></svg></g></g></g></g></svg></mjx-container></td><td style="text-align:center"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="13.617ex" height="2.523ex" role="img" focusable="false" viewBox="0 -1033 6018.7 1115"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mover"><g data-mml-node="mrow"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(972.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1972.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g><g data-mml-node="mo" transform="translate(0,648)"><svg width="2731.4" height="237" x="0" y="148" viewBox="682.9 148 2731.4 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(8.194,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(3009.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mover" transform="translate(4065,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(0,648)"><svg width="750" height="237" x="0" y="148" viewBox="187.5 148 750 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(2.25,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(4815,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mover" transform="translate(5259.7,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(0,615)"><svg width="759" height="237" x="0" y="148" viewBox="189.8 148 759 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(2.277,1)"></path></svg></g></g></g></g></svg></mjx-container></td></tr><tr><td style="text-align:center">Double Complement</td><td style="text-align:center"><code>̿A = A</code></td><td style="text-align:center"><code>̿A = A</code></td></tr></tbody></table></div><p><em>打表格太费劲了，下次直接截图算了</em>  </p><p><em>下文中出现的<code>Ā</code>或者<code>A'</code>都代表<code>NOT A</code></em></p><p>上面的表格展示了在布尔代数中的一系列恒等式。就拿德摩根定律举例子：德摩根定律允许我们交换<code>FALSE</code>和<code>TRUE</code>，或者交换<code>AND</code>和<code>OR</code>来将形式变换掉。  </p><p>比如说这里有一个表达式：<code>0.A = 0</code>，读作”FALSE AND A is FALSE”。根据德摩根定律，我们可以将<code>AND</code>换成<code>OR</code>,并将所有元素取反。这样就能得到另一个相等的形式：<code>1 + A = 1</code>。总结一下，德摩根定律的变化法则是：  </p><ol><li><strong>变换时交换<code>TRUE</code>和<code>FALSE</code>（0和1）</strong>  </li><li><strong>变换时交换<code>AND</code>和<code>OR</code>（<code>.</code>和<code>+</code>）</strong>  </li></ol><p><br></p><hr><p><span class="tag is-warning">Example</span></p><p>来做个例题。  </p><p>考虑一下这个表达式：<code>A + Ā.B</code>。我们如何化简它？  </p><p>有意思的是，要化简这个式子，我们首先需要将式子先变得更复杂。<br>表中提到了有这样一个公式：<code>A + A.B = A</code>。可以通过这一点把原式中的A换掉，就变成了这样：  </p><p>                <code>A + A.B + Ā.B</code>  </p><p>下一步我们暂时忽略<code>A</code>，然后对<code>A.B + Ā.B</code>使用交换律。步骤如下：  </p><p>                <code>A.B + Ā.B = B.A + B.Ā = B.(A + Ā)</code>  </p><p>                <code>B.(A + Ā) = B.1</code>    </p><p>这一步应用了公式<code>A + Ā = 1</code>。  </p><p>将结果带回原式，即可得到化简最终答案：<code>A + B.1</code>。  </p><p><br></p><hr><h2 id="布尔代数运用"><a href="#布尔代数运用" class="headerlink" title="布尔代数运用"></a><strong>布尔代数运用</strong></h2><h3 id="从真值表中创建布尔表达式"><a href="#从真值表中创建布尔表达式" class="headerlink" title="从真值表中创建布尔表达式"></a><strong>从真值表中创建布尔表达式</strong></h3><p>为特定问题创建布尔表达式，有时可以以真值表作为切入点。  </p><p>直接上例子把：  </p><p><br></p><hr><p><span class="tag is-warning">Example</span></p><p>我们来举一个两个输出的AND门的例子。真值表如下所示：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">Output</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table></div><p>我们即将使用的”Sum of product”的方法是为真值表中的每一行创建一个最小项，输出为1。然后再对这些最小和求和，得到最终的布尔表达式。  </p><p><strong>最小项 (Minterm)</strong>是输出为1的特定组合。<br>在这个真值表里，只有一个最小项，那就是当<code>A = 1</code>或者<code>B = 1</code>时。我们将这个最小项记为<code>A.B</code>。<br>因为这个真值表只有一个最小项，所以说这个真值表的最终布尔表达式就是<code>A.B</code>。  </p><p><br></p><p>但是如果不只有一个最小项怎么办？或者，表中不只有一个输出项怎么办？  </p><p>下面是一个半加法器的真值表：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Input</th><th style="text-align:center">Input</th><th style="text-align:center">Output</th><th style="text-align:center">Output</th></tr></thead><tbody><tr><td style="text-align:center"><strong>A</strong></td><td style="text-align:center"><strong>B</strong></td><td style="text-align:center"><strong>Sum</strong></td><td style="text-align:center"><strong>Carry</strong></td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table></div><p>首先，我们对”Sum”这一列输出创建最小项：  </p><ul><li>第二行 (<code>A = 0</code>, <code>B = 1</code>)，最小项是<code>Ā.B</code> (NOT A AND B)</li><li>第三行 (<code>A = 1</code>, <code>B = 0</code>)，最小项是<code>A.B'</code> (A AND NOT B)</li></ul><p>我们使用<code>OR</code>将所有的最小项连接在一起，这样的话就形成了Sum的布尔表达式：   </p><p>                <code>Sum = A'.B + A.B'</code>  </p><p>同理可得，<code>Carry = A.B</code>  </p><p>化简只能够将两列输出分别对应一个布尔表达式，所以最终的答案是：  </p><p><code>Sum = A'.B + A.B'</code><br><code>Carry = A.B</code> </p><p><br></p><hr><h3 id="逻辑电路的布尔代数式"><a href="#逻辑电路的布尔代数式" class="headerlink" title="逻辑电路的布尔代数式"></a><strong>逻辑电路的布尔代数式</strong></h3><p><span class="tag is-warning">Example</span></p><p>有时候我们需要通过一个逻辑电路来写出布尔代数式。那这个半加法器电路举例子：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB64571bca6b2aebf3bf9e4ad5d2645fcc?method=download&amp;shareKey=418cfa3d73daa608b02e026411a220d2" alt=""></p><p>我们跟着A和B两个输入项，来到了第一个NAND门。根据NAND的真值表：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">Output</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table></div><p>NAND真值表的前三行都为1，所以我们需要为此构建三个最小项。结合起来如下：  </p><p><code>W = A'.B' + A'.B + A.B'</code></p><p>下一步，W的输出会去到三个NAND门里进行运算。我们这里以X门举例子。如果要画出X的真值表不是很容易，因此我们会考虑NAND门的本质计算方法，那就是先进行一个AND运算，然后将结果取反，也就是跟一个NOT运算。而AND的结果正式两个值的乘积。  </p><p>我们先来进行AND运算：  </p><p>                <code>A.(A'.B' + A'.B + A.B')</code>  </p><p>接着应用布尔分配式，也就是<code>A.(B + C) = A.B + A.C</code>：  </p><p>                <code>A.A'.B' + A.A'.B + A.A.B'</code></p><p><code>A.A'</code>的结果是0。在AND运算中，只要输入有0，那么输出必然为0。所以我们可以简化成：  </p><p>                <code>A.A.B'</code></p><p>因为<code>A.A = A</code>，所以最后化简出来的式子就是：  </p><p>                <code>A.B'</code></p><p>然而事情到这里还没有结束。因为我们只完成了NAND运算里的AND部分，接下来我们会执行NOT运算，也就是将上面的表达式求逆。根据德摩根定律 (元素取反，AND和OR交换)，我们可以得到原式的逆式：  </p><p>                <code>A' + B</code>  </p><p>到这一步就可以出X的结果了。同样的流程也可以适用于Y的结果：  </p><p>                <code>X = A' + B</code>  , <code>Y = A + B'</code>  </p><p>这两位合起来，就是S的输出。同样，我们需要先执行AND运算，再通过德摩根定律执行NOT运算：   </p><p>                <code>(A + B').(A' + B)</code> (AND执行后)</p><p>                <code>S = A'.B + A.B'</code> (NOT执行后)</p><p>C的结论，也可以通过这样的流程算出来了。  </p><p><br></p><hr><h2 id="卡诺图-Karnaugh-map"><a href="#卡诺图-Karnaugh-map" class="headerlink" title="卡诺图 (Karnaugh map)"></a><strong>卡诺图 (Karnaugh map)</strong></h2><p><strong>卡诺图 (Karnaugh map, K-map)</strong>是一种从真值表创建布尔代数表达式的方法。<br>K-map可以使这个过程比使用乘积之和来创建最小项要简单得多。如果应用正确，那么卡诺图就可以生成布尔代数表达式的最简单形式。</p><p>下表是一个OR逻辑门的真值表：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">X</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table></div><p>我们如果使用Sum of products方式来写出的布尔逻辑式如下:  </p><p><code>X = A'.B + A.B' + A.B</code></p><p>但是我们如果使用卡诺图，就会比较简单了。下面的卡诺图表示了OR逻辑门：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB63ba74660c841de4a57b6ca299f2a079?method=download&amp;shareKey=1ce8f665aec4c02e372293aa7bb7780a" alt=""></p><p>在解读卡诺图时，我们需要遵循这些规则：  </p><ul><li>只考虑内容为1的单元格</li><li>在可能的情况下，尽可能将包含1的单元格以<strong>最大矩形</strong>囊括起来。<strong>而且矩形的面积必须是2，4，8等等</strong>。</li><li>每一个矩形可以重叠，但也只是在必要的情况下重叠。尽量做到不重叠矩形。  </li><li>如果有单个1无法加入到任何矩形中，那么我们就把它自己视为一个组。</li></ul><p>这些规则决定了图中的蓝色框框。<br>竖着看：B保持不变，但是A发生了变化，所以B被保留。<br>横着看：A保持不变，所以A被保留。<br><strong>最终的布尔表达式就是这些保留值的和。</strong>，如下所示：  </p><p><code>X = A + B</code></p><p><br></p><hr><h1 id="第二十章：系统软件"><a href="#第二十章：系统软件" class="headerlink" title="第二十章：系统软件"></a><strong>第二十章：系统软件</strong></h1><h2 id="操作系统的目的"><a href="#操作系统的目的" class="headerlink" title="操作系统的目的"></a><strong>操作系统的目的</strong></h2><p>我们在第八章就提到了<strong>操作系统 (Operating System, OS)</strong>。本章会详细讨论一些有关于操作系统的更多细节。  </p><p>我们可以先从系统使用方面的细节开始：  </p><ol><li><p>计算机系统需要一个程序，这个程序会在计算机启动时开始运行。我们将其称之为<strong>基本输入/输出系统(Basic input/output system, BIOS)</strong>。BIOS存储在ROM中。它作为一个引导程序，目标是在计算机开始运行时，将操作系统从硬盘引导至内存中，从而使其运行。  </p></li><li><p><strong>多程序设计 (Multi-programming)</strong>是一个操作系统提供的功能，允许多个程序同时加载到内存中。问题在于在一个特定时间内，只有一个程序能够使用CPU，所以其他程序需要保持准备状态，并在合适的实际轮流使用CPU。这样做是为了最大化利用CPU，因为若当前的程序的输入或输出任务完成后，CPU就可以立即切换到下一个程序。  </p></li><li><p><strong>分时 (Time-sharing)</strong>是另一个计算机系统中的概念，此概念赋予了多用户同时使用同一个计算机系统的机会。“分时”的概念是指每个用户可以获得使用CPU的一小段时间。具体来说，分时操作系统使用CPU调度和多程序设计，一次为一个用户提供共享计算机的一小部分。每个用户在内存中至少有一个独立的程序。当程序被加载到内存中并执行后，会在短时间内完成IO的处理或者其他处理。用户获得CPU关注的这一小部分时间叫做“时间片 (Time slice)”，“时间段 (Time slot)”或者“量子 (Quantum)”。一般来说它的时间长度约为10-100毫秒。</p></li><li><p>操作系统的目的可以由两个视角来进行解释，分别是<strong>内部视角 (Internal viewpoint)</strong>和<strong>外部视角 (External viewpoint)</strong>。内部视角主要<u>关注操作系统如何组织其活动以最大化利用资源</u>。这包括管理硬件资源，如CPU、内存和各种存储设备，以及软件资源，如运行进程、系统性能和安全性。操作系统需要保证这些资源被有效的利用，才能提供给用户最棒的性能。 <br> 外部视角主要关注操作系统为用户提供的设施和服务。这些服务包括UI，对运行应用程序的支持，文件管理，网络连接，用户身份验证等等的特性。从这个角度来看，操作系统的目标是为用户提供方便有效的功能和体验。  </p></li></ol><p><br></p><hr><h3 id="操作系统结构"><a href="#操作系统结构" class="headerlink" title="操作系统结构"></a><strong>操作系统结构</strong></h3><p>操作系统的结构为资源管理和用户提供设施和功能提供了平台。它管理硬件资源，如CPU、内存和存储设备，以及软件资源，如运行进程、系统性能和安全性。它还为用户提供服务，如用户友好的界面、对运行应用程序的支持、文件管理、网络连接和安全特性。  </p><p>操作系统的逻辑结构提供了两种<strong>运行模式 (Mode of operation)</strong>，分别是<strong>用户模式 (User mode)</strong>和<strong>内核模式 (Kernel mode)</strong>。具体解释如下：  </p><ul><li>用户模式：应用程序和部分操作系统的其中一种运行模式。在用户模式下，程序不能直接访问硬件或内存，必须使用系统调用来访问这些资源。  </li><li>内核模式：也称为主管模式、系统模式或特权模式。在这种模式下，操作系统可以不受限制地访问所有硬件资源和内存。在内核模式下运行的代码可以直接与系统硬件交互，并且可以执行任何CPU指令。  </li></ul><p><br></p><hr><p><br></p><p>提供这两种运行模式的操作系统部分是分开的。实际上，操作系统的内核是一直运行的，但操作系统的其余部分会以用户模式持续运行。<br>一种可能的实现方式是使用分层结构，如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB46af197e0a665f59df40a434625dc585?method=download&amp;shareKey=4cdc6645cf7b30b5420fab0514c7e926" alt=""></p><p>在这种结构中，用户通过用户界面(UI)来操作应用程序，而应用程序通过<em>Utilities</em>来对内核进行调用。为了维护系统的正常运作，每一个较高的层都需要较低的层来提供完整的服务。  </p><p><br></p><p>虽然但是，上面的这一种结构在实际实践的过程中可能会碰到一些问题。所以说一般的方法是使用一个更加灵活的模块化结构。<br>该结构会在内核需要的时候调用不同的模块来处理工作。这种结构与<strong>微内核结构 (Micro-kernel structure)</strong>联系在一起。<br>简单的解释一下微内核结构：这种结构旨在使内核尽可能小而轻，因为它只提供必要的服务，比如进程调度和进程通信。而大多数非必要的服务，比如说设备驱动程序，会交给用户空间处理。这种设计可以使得操作系统比传统的单片内核更加模块化和灵活。  </p><p>具体的结构如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB4711318e34bd0f53a9998d0db19e41b0?method=download&amp;shareKey=436d1c8eab09f174959fe0d2ce76c6a9" alt=""></p><p><br></p><hr><h2 id="输入-输出系统-I-O"><a href="#输入-输出系统-I-O" class="headerlink" title="输入/输出系统 (I/O)"></a><strong>输入/输出系统 (I/O)</strong></h2><p>实际上，I/O系统不只是涉及到计算机与用户之间发生的输入和输出，同时也负责了程序运行时对存储设备的输入和输出。<br>下图展示出了I/O系统的结构：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBe364bf0aea1ca3b80daa72c698a17b1d?method=download&amp;shareKey=ed789a39365bd63cd1a3e4f0d39c59f9" alt=""></p><p>上图中的总线结构说明，I/O设备和内存之间可以有一个数据传输选项，那就是设备驱动。如果对于大量数据来说，操作系统也可以确保在内存和I/O设备之间直接传输数据。  </p><p>为了理解I/O的管理问题，我们需要考虑一下时间表。<br>不难理解，一秒钟对于计算机系统来说是一个很长的时间，因为CPU大多运行在GHz频率，所以说一秒钟内会存在超过一万亿个时钟周期。<br>下表给出了I/O的典型速度：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">Device</th><th style="text-align:left">Data rate</th><th style="text-align:left">Time for transfer of 1 byte</th></tr></thead><tbody><tr><td style="text-align:left">Keyboard</td><td style="text-align:left">10 Bps</td><td style="text-align:left">0.1s</td></tr><tr><td style="text-align:left">Screen</td><td style="text-align:left">50 MBps</td><td style="text-align:left">2 * 10^(-8) s</td></tr><tr><td style="text-align:left">Disk</td><td style="text-align:left">5 MBps</td><td style="text-align:left">2 * 10^(-7) s</td></tr></tbody></table></div><p>不难看出，这些设备的运行速度和CPU的运行速度简直不是一个数量级。所以说CPU就需要特意注意，在I/O设备交流数据时候，CPU不能进入空闲状态。<br>具体的管理方法会在下一节讨论：  </p><p><br></p><hr><h2 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a><strong>进程调度</strong></h2><p>在系统运行过程中，为了提供最佳性能，我们需要考虑进程调度的问题。  </p><p><strong>CPU调度 (CPU Scheduling)</strong>是操作系统中的一个进程，它允许一个进程在另一个进程因为I/O资源不可用或者暂停（处于等待状态）的时候使用CPU，从而发挥出CPU的最佳性能。<br>CPU调度的目标是让系统更加高效和快速。每当CPU空闲时，操作系统必须在就绪的进程队列中选择一个进程来执行。  </p><p><br></p><p>对于可以在操作系统上运行的程序来说，他们一开始是存储在磁盘上的。然而，用户可以将这些程序作为“<strong>作业 (job)</strong>”来提交给系统。<br>在操作系统的上下文中，“作业”是系统需要执行的工作单元。这可以是一个程序或一组相关的程序，以及关于它们如何运行的附加信息。<br>一份“作业”中可能包含：  </p><ul><li>实际需要执行的程序（代码）</li><li>程序的输入</li><li>有关程序所需的资源信息（如内存或者硬盘空间和地址）</li><li>有关如何处理输出的说明（比如说输出应该保存到哪里）</li></ul><p>一旦作业被提交给系统，操作系统就有责任管理作业的执行。这包括将程序加载到内存中，调度程序的CPU时间，管理程序对其他系统资源的使用，以及处理程序的输出。</p><p>在实际的情况中，如果对于多CPU系统来说，调度就会有些更加麻烦了。不过这不是我们目前需要考虑的问题。  </p><p><br></p><hr><p>操作系统中，长期调度器或者高级调度程序可控制选择将存储在磁盘上的程序移入主内存。<br>如果内存过于拥挤，中期调度程序需要负责将某些程序从内存中取回磁盘。<br>当程序已经被记录至在内存中时，一个短期或低级调度程序会控制程序何时可以访问 CPU</p><p><strong>长期调度器 (Long-term Scheduler)</strong>又称为准入调度器，负责控制新进程是否可以进入系统。它来决定哪些程序可以从作业池（包括所有进程的磁盘存储）中放入就绪队列，并加载到内存中。它可以确保选择某些合适的进程，以优化CPU的工作效率。  </p><p><strong>中期调度器 (Medium-term Scheduler)</strong>可以将进程暂时从主内存中移除，并在主内存空间比较紧张的时候将进程重新放回至磁盘中，使此进程变为“挂起”状态。我们将这个操作叫做<strong>换出 (Swapping out)</strong>或者<strong>滚出 (Rolling out)</strong>。中期调度器也可以评估当前主内存的情况，然后决定时候将挂起的进程重新加入至主内存中继续处理。  </p><p><strong>短期调度器 (Short-term Scheduler)</strong>也被称之为CPU调度器，它决定哪些已经就绪，并且存在在内存中的进程可以被CPU执行。短期调度器所做出的决定的频率要比其他两个调度器的频率要高得多，因为为了发挥最大性能，进程之间不允许出现任何中断。  </p><p>以上三种调度器在操作系统中一起工作，可以有效地管理进程，从而确保每个进程都获得成功执行所需的必要资源和CPU时间。</p><article class="message is-info"><div class="message-body"><b>High-level scheduler: makes decisions about which program stored on disk should be moved into memory</b><br><b>Low-level scheduler: makes decisions about which process stored in memory should have access to the CPU</b></div></article> <p><br></p><p>所以说在运行程序时，涉及到的硬件之间的交流大概是这样子的：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB610a4dc613998d58c627e8e4f898e1e9?method=download&amp;shareKey=c5b0a214a907c69b16add3526f02c906" alt=""></p><p><br></p><hr><h3 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a><strong>进程状态</strong></h3><p>在第八章中，我们提到过：进程可以定义成“正在运行中的程序”。这个定义可以进一步加入程序第一次进入内存时的状态，来改进进程的定义。具体来说，当一个进程第一次进入到内存后，它的状态就可以叫做“新”。在这一阶段，我们可以在内存中创建一个叫做<strong>进程控制块 (Process control block, PCB)</strong>的东西，以便我们在进程执行的同时读取有关它的数据。<br>PCB是一个数据结构，操作系统可以用它来管理进程的信息。这些信息包括如下细节：  </p><ul><li><strong>进程的状态</strong>： 进程的当前状态（比如说是新，就绪，运行，挂起还是停止）</li><li><strong>进程ID (PID)</strong>： 这是进程的唯一标识码</li><li><strong>程序计数器 (Program counter)</strong>： 老朋友了。表示该进程要执行的下一条指令的地址。</li><li><strong>CPU寄存器</strong>： 该进程目前正在使用的CPU寄存器</li><li><strong>CPU调度信息</strong>： 调度进程所需的信息。可能包含优先级信息以及调度队列的指针</li><li><strong>I/O信息</strong>： 分配给进程的I/O设备，或者打开文件的列表等等</li></ul><p>除了列出的条目，PCB中还存在更多的细节。这里就不展开说了。  </p><p>一旦进程进入内存，并且设置好了PCB，进程的状态就可以随着它开始执行和与系统交互而改变。例如，当进程使用CPU的时候，进程的状态就可能从“就绪”变成“运行”。如果进程在等待用户的输入，那么它的状态就可能从“运行”变成“等待”。等等。</p><p>哦对了，一个进程可以拆分成不同的部分来执行，这些独立的部分叫做“<strong>线程 (Threads)</strong>”。</p><article class="message is-info"><div class="message-body"><b>Process: a program in memory that has an associated control block</b><br><b>Process control block (PCB): a complex data structure containing all data relevant to the running of a process </b><br><b>Thread: part of a program which is handled as an individual process when being executed</b></div></article> <p><br></p><p>进程处理的流程如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB095855ea3e9913fa7d4f1105b18fc94e?method=download&amp;shareKey=bdfecf61b430451e5608fbdeff7b04b7" alt=""></p><p><br></p><hr><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a><strong>中断</strong></h3><p>有些时候，中断是因为过早终止正在运行的进程而引起的。除此之外，中断的发生也有其他两种可能性：  </p><ol><li><p>进程由交替使用CPU和I/O的处理时段共同组成。然而I/O需要的时间太长，而且CPU不可能一直闲置等待 I/O 完成。因此当处于运行状态的进程发出需要进行 I/O 操作的系统调用，并不得不转入等待状态时，就会使用中断机制。</p></li><li><p>调度程序决定停止进程的原因有多种，稍后将在 “调度算法”标题下讨论。</p></li></ol><p>不管发生中断的原因是什么，操作系统的内核都必须需要调用一个中断处理例程来尝试处理问题。首先，我们必须要将程序运行过程中，存储在寄存器中的当前值记录在进程控制块，也就是刚才说过的PCB中。这允许系统可以重新拾起这个进程，然后重新开始处理终端的进程。  </p><p><br></p><hr><h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a><strong>调度算法</strong></h3><p>尽管长期调度器在选择将哪个程序加载到内存时需要做出决定，但这里我们只关注短期调度器或低级调度器的选项。  </p><p>首先，调度算法可以是<strong>抢占式 (Preemptive)</strong>的或<strong>非抢占式 (Non-preemptive)</strong>的。抢占式算法可以停止进程，否则进程将继续不受干扰地运行。如果一个算法是抢占式的，那么它可能需要涉及进程优先级的考虑工作。所谓 “抢占式”，是指当进程的分配时间（或时间片）过期时，调度器可以强行将其从 CPU 中移除。这与非抢占式调度相反，在非抢占式调度中，进程一直运行到结束或被 I/O 阻塞为止。</p><p>这时候我们可以使用<strong>轮询算法 (Round-robin algorithm)</strong>来处理问题。这是一种抢占式算法，是操作系统中最简单的进程调度算法之一。在轮转调度中，每个进程都被分配了一个固定的时间片。如果这个进程所分配的时间片用完了，那么这个进程会被直接停止掉。  </p><p>当然，进程如果以某些奇怪的方式停止掉以后，在某些情况下我们还会希望他们继续回来执行。因此，轮询算法还可以用来实现<strong>FIFO队列 (FIFO queue)</strong>，也就是“先进先出队列”来实现。进程被添加到队列的末尾，并按照到达的顺序分配 CPU。一旦某个进程轮到使用 CPU（即其时间片已过期），它就会被移到队列的后面。</p><p>基于优先级的调度算法则更为复杂。其中一个原因是，每次有新进程进入就绪队列或运行中的进程停止时，都需要重新评估进程的优先级。另一个原因是，无论使用什么方案来判断优先级，都需要进行一定的计算。可能的标准有：  </p><ul><li>进程执行的所需估计时间</li><li>进程执行剩余的时间</li><li>在就绪队列中已经花费的时间长度</li><li>进程是I/O绑定还是CPU绑定</li></ul><p>显然，在上面列出的条目里，估计执行时间并非易事。<br>有些程序需要大量的输入输出，例如为员工打印工资条。此类进程的CPU使用很少，因此为其分配高优先级是有意义的，这样就可以进行少量的CPU使用。然后，在打印发生时，就可以将本流程切换到等待状态了。</p><p><br></p><hr><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a><strong>内存管理</strong></h2><p>“内存管理”一词包含如下方面：</p><ul><li>内存管理为操作系统内核提供受保护的内存空间</li><li>将程序加载到内存中需要做准备工作，而内存管理可以为程序本身、相关的过程和程序所需的数据定义内存地址</li><li>当运行在多程序设计的计算机上时，内存管理就相对来说比较复杂了。与存储在硬盘上的文件一样，进程在主内存中的存储也会产生碎片。这时，中期调度器可能需要将进程移出主内存，以缓解问题。</li><li>内存管理必须决定应该将多大一部分内存分配给共享内存的各个进程。</li></ul><p><br></p><hr><h3 id="分区与段"><a href="#分区与段" class="headerlink" title="分区与段"></a><strong>分区与段</strong></h3><p>当不同的进程同时加载到内存中时，早期的内存管理方法是对内存进行<strong>分区 (Partition)</strong>，它的目的是尽可能将整个进程加载到一个分区中。但是如果进程的大小小于分区大小，就会浪费内存。<br>后续出现的其中一个改进方法是“<strong>动态分区 (Dynamic partitioning)</strong>”，其中允许调整分区大小以匹配进程大小。然而每个分区一个进程的规则仍然存在。</p><p>具体来说，分区是一种将计算机内存划分为多个分区的方法，每个分区可容纳一个进程。其目的是将一个进程的全部内容加载到一个分区中。不过，如果进程的大小小于分区的大小，这种方法可能会造成浪费，导致分区内的内存闲置。</p><p>动态分区是对最初方法的改进。在动态分区中，我们允许调整分区的大小以匹配进程的大小。这有助于确保每个进程只使用其所需的内存，从而减少内存浪费。不过，每个分区只能容纳一个进程的规则仍然存在，这意味着每个分区一次只能容纳一个进程。  </p><p><br></p><p>上述思想拓展出了另一个解决方案，那就是<strong>分段 (Segmentation)</strong>。分段是操作系统中的一种内存管理技术，它将计算机的主内存划分为大小可变的部分，称为<strong>段 (Segments)</strong>。其中的每个段可分配给一个进程。每个段的详细信息都存储在一个称为<strong>段表 (Segment table)</strong>的表格中。</p><p>分段被描述为动态分区思想的延伸，因为如果一个进程太大，那么它就无法容纳在一个分区中。所以将其划分为更小的段会是一个潜在的解决方案。然后，每个分段都可以加载到内存中的动态分区中。这种方法可以更高效地处理大型进程，因为每个分段都可以根据需要独立加载或卸载。 这也有助于减少外部碎片，因为分段可以更整齐地嵌入可用内存空间。</p><p><br></p><hr><h3 id="分页与虚拟内存"><a href="#分页与虚拟内存" class="headerlink" title="分页与虚拟内存"></a><strong>分页与虚拟内存</strong></h3><p>在现代计算机系统中，我们一般使用<strong>分页 (Paging)</strong>的方法来管理内存。<br>分页是一种不需要连续分配物理内存的方案，它允许计算机的物理内存以不连续的方式记录。在分页中，进程会被划分为长度相等的部分，我们将这些部分称之为“<strong>页 (Page)</strong>”。  </p><p>在操作系统内存管理中，内存可以被划分为固定长度的块，我们将其称为“<strong>帧 (Frames)</strong>”。<br>二级存储器(如硬盘)也可以划分为固定大小的块，通常称为“<strong>扇区 (Sectors)</strong>”或“<strong>集群 (Clusters)</strong>”，但在这里也可以称为“帧”。这些块可以保存从主内存换出的页。  </p><p>操作系统会跟踪哪些帧是空闲的，哪些帧是正在使用的。当程序需要将一页加载到内存中时，操作系统会找到一个空闲帧，并将该页加载到其中。如果没有空闲帧，操作系统可能需要换出当前内存中的一页，为新页腾出空间。这种技术允许操作系统有效地利用内存和辅助存储，并支持虚拟内存等特性，其中程序可以比物理内存的总量更大。</p><p>将所有的页同时加载到内存中实际上是可行的（如果你的计算机内存够大）。<br>但即使这是可能的，通常情况下我们也不需要使用程序的所有部分。因此将某些页放回二级存储是必要的。  </p><article class="message is-info"><div class="message-body"><b>Segmentation: where a large process is divided into segments for loading into memory but the segments are not constrained to be the same size</b><br><b>Paging: where a large process is divided into pages which have to be the same size</b></div></article> <p><br></p><hr><p>这就引出了一个新的概念。  </p><p>分页使用的一种特殊情况是，如果程序非常大，其所需的地址空间可能会大于内存大小。<br>这时候，我们就会需要用到分页技术支持的<strong>虚拟内存管理 (Virtual memory management)</strong>来解决这种情况了。  </p><p>分页在执行过程中会要求CPU将地址传输到<strong>内存管理单元 (Memory management unit, MMU)</strong>，内存管理单元负责为每一个“页”分配地址。这个地址必须由两个部分组成，分别是“页码”加上该页起始处的“偏移量”。  </p><p>内存管理单元负责将CPU中的逻辑地址转换为内存中的物理地址。它使用一种称为<strong>页表 (Page table)</strong>的数据结构来实现这一点，页表跟踪每个页在物理内存中的位置。地址的页码部分用作页表的索引。该索引处的页表项包含物理内存中该页的基址。然后将偏移量添加到该基址，以获得所需的确切物理内存位置。</p><p><br></p><hr><p>有些抽象，所以我们来简单展示一个非常简化的页表：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBb1fe4ad9a625703c2201225483bf201d?method=download&amp;shareKey=8b6556ecb3677f52577831150b8e3f84" alt=""></p><p>图片的左侧展示了一个有48条指令的程序，不难看出，这些指令占用了3个页。反过来说，这3页占用了48条内存地址。  </p><p>该系统的逻辑地址采用8个位存储。因为一个字节(8位)可以表示256个不同的值(从0到255)，而我们只使用16页，所以我们只需要前4位来表示页码(因为<code>2^4 = 16</code>)。剩下的4位用来表示页面内的偏移量。所以说在本系统中，逻辑地址被分为了两个部分，而他们的表示方式为：  </p><ul><li>四个最高位存储页码。</li><li>四个最低有效位将偏移量存储在页面中。  </li></ul><p>这使得系统可以通过其页码和偏移量快速有效地定位内存中的任何指令。  </p><p><br></p><p>而图表的右半部分展示了各个页的物理内存地址。在继续之前，我们需要先强调，<strong>页帧 (Page frame)</strong>和帧之间没啥区别。  </p><p>好的，我们继续。  </p><p>需要注意的是，所使用的页帧不必在物理内存中相邻。这意味着程序的不同部分可以加载到不同的内存区域，而不必彼此相邻。这是分页和虚拟内存的优点之一，因为它允许更有效地使用内存。从图中我们可以得到，程序的前两个页已经被加载到内存中的页帧中。  </p><p>图表中间的部分说明了此流程中页表的内容。在分页系统中，内存中的每个进程都有一个单独的页表。页表中每个页都有条目，而页码会作为索引。<br>表中的每个条目都包含一个表示该页当前是否在内存中的存在标志，我们叫它”<strong>Presence flag</strong>“，如图中第二列所示。<br>在这里显示的版本中，第三个条目显示了页帧号。或者，这可以记录页面框架中第一个项目的物理地址。它可以记录页面框架中第一个项目的物理地址。  </p><p><br></p><p>在使用分页的时候，在最开始的开始，包含一个进程的一组页会存储在磁盘上。在进程切换到“就绪”状态时，其中的一个页或者多个页就会被加载到内存中。当进程被指派为“运行”状态时，进程就可以开始执行了。  </p><p>然而，有些时候，进程可能会请求访问地址不在内存中的页，我们管这种情况叫做“<strong>缺页异常条件 (Page fault)</strong>”，或者更简单的说法——页面错误。<br>当出现页面错误时，操作系统需要将所需的页面从辅助存储(如硬盘)带到内存中。但是，如果没有可用的空闲内存，操作系统将需要选择一个当前加载的页面来替换。这就是<strong>页面替换算法 (Page replacement algorithm)</strong>发挥作用的地方。  </p><p>有好几种页面替换算法，比如说：  </p><ul><li><p><strong>先进先出 (First-in First-out, FIFO)</strong>:这个简单的算法替换内存中最老的页面(即，首先加载的页面)。虽然易于实现，但如果仍然频繁访问旧页面，则此方法可能导致更高的页面错误率。  </p></li><li><p><strong>LRU (Least Recently Used)</strong>:这个方法会替换最长时间未被访问的页面。它基于这样一种观察，即最近被大量使用的页面很可能在将来再次被大量使用。虽然这种方法通常执行得很好，但它需要跟踪每个页面最后访问的时间，所以这种方法带来的计算量就会变得更大一些。  </p></li></ul><p><br></p><p>虚拟内存可能会带来一些问题。可能出现的最严重的问题之一是<strong>磁盘抖动 (Disk thrashing)</strong>。当进程不断地需要在内存内和内存外交换页面时，就会发生这种情况。简单来说，虚拟存储管理中的抖动现象是指系统频繁地进行磁盘交换，导致系统的性能下降的现象。  </p><p>比如说当系统内存不足时，操作系统会将一部分数据交换到磁盘中以释放内存。但是，当系统再次需要这些数据时，又需要将其从磁盘中加载回来，这就会产生磁盘交换。当系统的内存利用率接近饱和状态时，这种抖动现象会变得更加明显。因为系统需要频繁的交换数据，导致磁盘的负载变高，同时也降低了系统的响应速度和性能。为了避免这种情况的发生，我们可以增加系统内存，或者优化虚拟内存的存储策略来缓解问题。</p><article class="message is-info"><div class="message-body"><b>Disk thrashing: when paging is being used and a repetitive state has been reached where loading one page causes a need for another page to be loaded almost immediately but the loading of this new page causes the same immediate need</b></div></article> <p><br></p><hr><h2 id="提供给用户的操作系统设施"><a href="#提供给用户的操作系统设施" class="headerlink" title="提供给用户的操作系统设施"></a><strong>提供给用户的操作系统设施</strong></h2><p>操作系统需要让用户来使用，所以它需要提供<strong>用户界面 (User interface, UI)</strong>。用户界面可以以命令行、图形显示或语音识别系统等方式来体现，但是请记住，用户界面的功能始终是允许用户与正在运行的程序进行交互。  </p><p>当程序涉及到设备的使用时，操作系统提供<strong>设备驱动程序 (Device driver program)</strong>。  </p><p>操作系统还必须提供一个<strong>文件系统 (File system)</strong>来存储数据和程序。在实际使用的时候，用户必须选择用户名并组织文件在文件夹中的结构，但是用户用不着管理磁盘上的物理数据是怎样存储的——因为这些是文件系统的活儿。  </p><p>如果用户是程序员，则操作系统支持提供<strong>编程环境 (Programming environment)</strong>。这样，程序员就可以在操作系统的帮助下，即便在不熟悉处理器功能的情况下也能创建和运行程序。  </p><p>当一个程序被运行时，我们可以将其认为是一个<strong>用户类型 (Type of user)</strong>，程序就像人类用户可能通过单击或键入来告诉计算机要做什么一样，程序使用一种称为<strong>系统调用 (System call)</strong>的东西向操作系统发出请求，这些类似于程序的点击或输入方式。例如，如果程序需要从文件中读取数据，它不会去查找文件本身。相反，它使用系统调用来要求操作系统执行此操作。然后操作系统接管，找到文件，并将数据提供给程序。<br>这样就引申出来了一个新的概念，叫做<strong>程序编程接口 (Application programming interface, API)</strong>。API就像操作系统为程序提供的选项菜单。菜单上的每个选项(每个API调用)都做一件特定的事情，比如在屏幕上创建一个图标。为了完成它的工作，API调用可能会使用一个或多个系统调用。  </p><p><br></p><hr><h2 id="转译软件"><a href="#转译软件" class="headerlink" title="转译软件"></a><strong>转译软件</strong></h2><p>同样是在第八章，我们概述了编译器和解释器的使用与特性。现在我们来深入介绍一下解释器的工作原理，并同时介绍解释器的工作原理。<br>编译器和解释器的编写工作是一项专业性极强的工作，通常情况下都由专家完成，而每个人的编写方式都各不相同。因此，本小节会探讨一些比较常见的思路。  </p><p>编译器可以被分解成一个“前端”和“后端”。前端程序对代码进行分析，它检查代码的语法和语义，确保它遵循编程语言的规则并具有逻辑意义。如果没有错误，它会生成<strong>中间代码 (Intermediate code)</strong>。中间代码是一种完全捕获源代码含义(语义)的表示形式。  </p><p>而编译器的“后端”将这些中间代码作为输入。然后，它从这个中间表示合成或创建目标代码。目标代码是计算机能够执行的最终机器码。</p><p>这样的一个分析-综合模型如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBf24bfb42acabc62fca77dde3bd4bec2e?method=download&amp;shareKey=d093f91182e7f059ae2d0bd2ce3188aa" alt=""></p><p><br></p><p>先说好，我们假设上面的结构处理的源代码没有任何错误。接下来我们解释一下每一个步骤：  </p><p>首先，源代码是逐行读取的，而且是重复逐行读取的。对于每一行来说，编译器都会生成它们对应的中间代码。上图还展示了解释器程序如何在前端进行分析过程。在这种情况下，一旦发现某一行源代码没有错误，并将其转换为中间代码，就会执行该行源代码。  </p><p><br></p><hr><h3 id="前端分析阶段"><a href="#前端分析阶段" class="headerlink" title="前端分析阶段"></a><strong>前端分析阶段</strong></h3><p>如下图所示，我们可以将前端的处理阶段分成这样的四个部分：  </p><ul><li>词法分析</li><li>语法分析</li><li>语义分析</li><li>生成中间代码</li></ul><p><img src="https://note.youdao.com/yws/api/personal/file/WEBd56b4dd092332686b3ab5445260b5bc7?method=download&amp;shareKey=6fc3b6e0d1356832c10556ca79b3112b" alt=""></p><p><br></p><p>编译器或解释器的输入数据是程序的源代码，我们叫它<strong>字符序列 (Sequence of characters)</strong>，而<strong>词素 (Lexeme)</strong>是这个序列中一个有意义的单个字符或字符集合。 例如，词素可以是程序员定义的标识符（如变量名），也可以是编程语言预定义的关键字、运算符或符号。</p><p><strong>第一步：词法分析</strong>：就是将源代码分解为这些单个词法的过程。<br>一种方法是首先删除源代码中的所有空白（空格、制表符、换行符）和注释。然后，检查源代码的每一行并识别每个词素。简单来说，词法分析就像是将一个句子分解成一个个单词，并了解每个单词在句子中的作用。  </p><p>以伪代码的形式表述：<code>Var Count : integer;</code>，会被解释成一个存在五个词素的指令，分别是<code>Var Count : integer ;</code>。<br>同样，<code>PercentMark[Count] := Score * 10</code>会被解释成一个存在八个词素的指令，分别是<code>PercentMark [ Count ] := Score * 10</code>。</p><p>词法分析器现在必须对每个词素进行分类，以便将代码行标记化。例如，在第一个例子中，<code>var</code>和<code>integer</code>必须被识别为关键字，<code>;</code>被识别为标识符，<code>:</code>以及<code>;</code>必须被视为不同的词素。  </p><p>对于每个识别到的标识符，我们都必须在<strong>符号表 (Symbol table)</strong>中创建一个条目。符号表中包含了每个标识符的属性，比如说数据类型，在何处被声明以及在何处被赋值。<br>符号表是编译器的一个重要的数据结构，虽然上面的的图显示了它只会在语法分析程序中使用，但是到了后期的编译阶段，我们同样也会继续使用它。<br>值得强调的是，因为大多数的编译器是多遍的，所以说符号表里面的内容是可以频繁的更新的。  </p><article class="message is-info"><div class="message-body"><b>Symbol table: a data structure in which each record contains the name and attributes of an identifier</b></div></article> <p>也不是所有的内容都可以转换为标识符，所以我们需要另一个表来记录非标识符词法的内容。<br>总之，无论采用何种方案，词法分析的输出都是源代码的分词版本。文献中提到了用于表示标记的各种格式。  </p><p><br></p><p><strong>第二部：语法解析</strong>：也称之为解析，涉及对程序结构的分析。分析的结果会被记录为语法或者是解析树。<br>下面的图片展示了这个语句”<code>y := 2 * x + 4</code>“的解析树：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB6b978d0fb2694bec7ddd774abcc1002f?method=download&amp;shareKey=1b501575072ae80fbfdf497e7eedd173" alt=""></p><p>如果树被成功的解析了，那么程序会在+4之前先去将x乘以2。  </p><p><br></p><p><strong>第三步：语义分析</strong>：语义分析是为了确定代码的全部含义。 为记录这些信息，我们构建了一棵带注释的抽象语法树。 对于语法树中的标识符，会建立一套相关的属性，包括数据类型等。 这些属性也记录在符号表中。  </p><p>前端分析的最后阶段经常创建的中间代码的格式是三地址码。例如，下面的赋值语句有5个标识符，对应5个地址:</p><p><code>y := a + (b * c - d) / e</code></p><p>这一个赋值语句可以转换为以下4个语句，每个语句最多需要3个地址:  </p><p><code>temp := b * c</code><br><code>temp := temp - d</code><br><code>temp := temp / e</code><br><code>y := a + temp</code></p><p><br></p><hr><h3 id="语言的语法表示"><a href="#语言的语法表示" class="headerlink" title="语言的语法表示"></a><strong>语言的语法表示</strong></h3><p>每种编程语言都有自己定义的语法。为了使语言可以正常使用，这个语法必须被程序员和编译器作者理解。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB7b03490853d0d2cbcbdc90b52d54a871?method=download&amp;shareKey=a8b731d4fbb0228ee6936de7dfb9896a" alt=""></p><p>表示语法的一种方法是使用<strong>语法图 (Syntax diagram)</strong>，上图就是一个实例语法图。<br>比如，上面的语法图规定了这样一条语法规则：标识符必须以字母开头，而后面可以是无字符或者多个字母或数字的集合。  </p><p><br></p><p>另一种方法是使用<strong>巴科斯范式 (Backus-Naur Form)</strong>来表示。下面是一些使用巴科斯范式的例子：  </p><p><code>&lt;Identifier&gt;::=&lt;Letter&gt;|&lt;Identifier&gt;&lt;Letter&gt;|&lt;Identifier&gt;&lt;Digit&gt;</code><br><code>&lt;Digit&gt;::=0|1|2|3|4|5|6|7|8|9</code><br><code>&lt;Letter&gt;::=&lt;UpperCaseLetter&gt;|&lt;LowerCaseLetter&gt;</code><br><code>&lt;UpperCaseLetter&gt;::=A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z</code><br><code>&lt;LowerCaseLetter&gt;::=a|b|c|d|e|f|g|h|i|j|K|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z</code></p><p>在巴科斯范式中，<code>|</code>为了分离单独的每一个选项，<code>::=</code>可以被描述成“被定义为”。<br>在上面的例子中，<code>&lt;Identifier&gt;</code>是使用递归的方式定义的。但如果我们要定义的内容无法抽象到这个级别，那么我们也可以使用列举的方式定义内容。  </p><p><br></p><hr><h3 id="后端合成阶段"><a href="#后端合成阶段" class="headerlink" title="后端合成阶段"></a><strong>后端合成阶段</strong></h3><p>如果前端分析已经确定源代码存在语法错误，那么后端过程的唯一目标就是通过列表的形式来呈现这些错误。<br>每个发生的错误，都会有两个属性：错误的解释和在程序源代码中的位置。这些信息可以帮助到程序员，让他们更方便的调试软件。  </p><p>但是如果在没有错误的情况下，主要的后端阶段是从中间代码生成机器代码，同时可能涉及代码优化。<br>优化的目的是创建一个高效的程序。有一种优化方式专注于优化原始源代码中固有的、已经传播到中间代码中的特性。<br>举个简单的例子，以下连续的赋值语句:  </p><p><code>x := (a + b) * (a - b)</code><br><code>y := (a + 2 * b) * (a - b)</code></p><p>它的优化方式就可以是这样：  </p><p><code>temp := (a - b)</code><br><code>x := (a + b) * temp</code><br><code>y := x + temp * b</code></p><p><br></p><hr><h3 id="表达式的求值"><a href="#表达式的求值" class="headerlink" title="表达式的求值"></a><strong>表达式的求值</strong></h3><p>赋值语句通常是一个为标识符定义新值的代数表达式。<br>计算表达式时，首先要将代码中的中缀表示法转换为<strong>反向波兰表示法(Reverse Polish Notation, RPN)</strong>。<br>在 RPN 中，运算符（如 +、-、*、/）写在操作数的后面。例如，表达式 <code>5 + 3</code> 在 RPN 中会写成 <code>5 3 +</code>。这可以简化表达式的求值过程，因为一旦将表达式转换成 RPN，就可以从左到右地求值，而无需跟踪优先级规则或括号。  </p><p>举一些例子:  </p><p>Absolutely! Here are some examples of Reverse Polish Notation (RPN):</p><ol><li><p>中缀表示法: <code>2 + 3</code><br>RPN: <code>2 3 +</code></p></li><li><p>中缀表示法: <code>4 * 5</code><br>RPN: <code>4 5 *</code></p></li><li><p>中缀表示法: <code>(1 + 2) * 3</code><br>RPN: <code>1 2 + 3 *</code></p></li><li><p>中缀表示法: <code>2 + 3 * 4</code><br>RPN: <code>2 3 4 * +</code></p></li><li><p>中缀表示法: <code>(7 - 2) / (5 + 3)</code><br>RPN: <code>7 2 - 5 3 + /</code></p></li></ol><p><br></p><hr><h3 id="计算RPN表达式"><a href="#计算RPN表达式" class="headerlink" title="计算RPN表达式"></a><strong>计算RPN表达式</strong></h3><p>我们可以使用栈来计算RPN表达式。<br>让我们下面这个RPN表达式的执行，其中x的值为3,y的值为4:</p><p><code>x 2 * y 3 * + 6 /</code>  </p><p>这里遵循的规则是依次将值添加到栈中。<br>如果RPN表达式中的下一项是操作符，则进程中断。这将导致前两个元素从栈中弹出。<br>随后需要使用运算符从这两个值创建一个新值，并将新值添加到栈中，然后该过程继续进行。<br>下图给出了栈的连续内容，指出了何时使用了操作符。当弹出两个值时，栈的中间状态不会显示。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB662084ed9ed021ff6fdb92d969139a44?method=download&amp;shareKey=2cbcbaa31654831501c5c03da8282b42" alt=""></p><p>如果使用的是第6章讨论的具有有限指令集的简单处理器，那么RPN的使用就没有什么价值。<br>因为现代处理器的指令集中会有处理堆栈操作的指令，因此编译器可以将表达式转换为RPN，因为它知道将表达式转换为机器码可以利用这些内容并允许在程序执行中进行堆栈处理。 </p><p><br></p><hr><h1 id="第二十一章：数据安全"><a href="#第二十一章：数据安全" class="headerlink" title="第二十一章：数据安全"></a><strong>第二十一章：数据安全</strong></h1><h2 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a><strong>加密原理</strong></h2><p>在计算机系统中，加密可以用来作为存储数据的常规方法。不过，本章讨论的加密的重点是在数据通过网络的传输时而使用。  </p><p>本章会主要探讨下面这三个问题：  </p><ul><li>加密算法是不是足够稳健，以至于加密数据不会对未经授权的第三方应用（或者任何个体）解密？  </li><li>如何确认加密数据时用的密钥，是保密的呢？  </li><li>通信的接收者如何知道是谁发送了加密通信？  </li></ul><p><br></p><p>加密的流程如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBb68b5fb3de1daa54df1157f381a26d05?method=download&amp;shareKey=c1aab18fd4fb3279e4b3fa0eec64dcb8" alt=""></p><p>首先，数据以<strong>明文 (Plaintext)</strong>的形式进入加密环节。首先，明文会使用<strong>密钥 (Key)</strong>进行<strong>加密 (Encryption)</strong>步骤。<br>明文经过加密后，就会变成<strong>密文 (Ciphertext)</strong>，随后密文就会被发送到它传输的目的地。<br>当另一台计算机收到了密文的时候，它也可以使用密钥来对密文进行<strong>解密 (Decryption)</strong>来还原原本的明文。</p><article class="message is-info"><div class="message-body"><b>Plaintext: data before encryption</b><br><b>Ciphertext: the result of applying an encryption algorithm to data</b></div></article> <p><br></p><hr><h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a><strong>安全问题</strong></h3><p>在进行加密传输的时候，下面这些安全问题确实是值得一提的：  </p><ul><li><strong>保密性 (Confidentiality)</strong>：确保只有接收方能解密密文，而其他未经授权的终端无法解密密文</li><li><strong>真实性 (Authenticity)</strong>：接收方能够确定到底是谁发送了密文</li><li><strong>完整性 (Integrity)</strong>：密文在传输过程中无法发生修改</li><li><strong>不可否认性 (Non-repudiation)</strong>：发送方和接收方都不能否认参与了数据的传输</li><li><strong>可用性 (Availability)</strong>：不应该发生任何事情来阻止接收方接收传输</li></ul><p>而在本章的讨论中，我们只考虑前三点：保密性，真实性和完整性。<br>由于讯息在传送过程中可能会被截取，而内容可能会被未获授权的人士阅读，因此我们需要考虑保密性问题。<br>同时对完整性的关注反映了这样一个事实:传输可能被故意干扰，但也可能在传输过程中意外损坏数据。  </p><p><br></p><hr><h3 id="加密方法"><a href="#加密方法" class="headerlink" title="加密方法"></a><strong>加密方法</strong></h3><p>对于加密算法来说，首先它不能被保密，这意味着加密算法必须在公共领域公开。而且，加密密钥必须是保密的。<br>加密一般来说有两种常用的策略，一种是<strong>对称密钥加密 (Symmetric key encryption)</strong>，另一种是<strong>非对称密钥加密 (Asymmetric key encryption)</strong>，也称为<strong>公钥加密 (Public key encryption)</strong>。  </p><article class="message is-info"><div class="message-body"><b>Symmetric key encryption: one private key is held by both sender and receiver and is used for both encryption and decryption</b><br><b>Asymmetric key encryption: there is a public key and a private key one of which is used for encryption and the other for decryption</b></div></article> <p><br></p><p>在对称密钥加密中，我们自始至终只会用到一个密钥，而这个密钥只有消息的发送端和接收端知道。“只会用到一个密钥”的意思是：发送方会使用这个密钥加密信息，而接收端同时也会使用这个密钥来解密信息。  </p><p>而对称密钥加密就不是这种方式了，因为加密和解密的密钥不同，所以密钥的传递就会变成一个大问题。<br>发送方需要密钥来加密，但如何将密钥安全地传递给接收方以允许解密呢？<br>在非对称密钥加密中，使用两个不同的密钥，一个用于加密，另一个用于解密。两个密钥中只有一个是保密的。所以说如果我们要使用非对称密钥加密，那么发送端手中会有两个密钥，其中一个是公钥，而且这个公钥可以被发送给任何想要参与通信的人，而另一个密钥是永远不会发送给任何人的秘密私钥。如果某人(发送方)想要向密钥持有者(接收方)发送安全消息，他们使用接收方的公钥对消息进行加密。此过程将原始消息(明文)转换为不可读的格式(密文)。一旦接收方获得密文，他们可以使用他们的私钥将其解密回原始消息。因为只有接收方可以访问他们的私钥，所以他们是唯一可以解密和读取消息的人。公钥可以被多人共享。这意味着任何数量的人都可以向接收者发送安全消息，并且只有接收者能够解密和读取这些消息。  </p><p>需要注意以下两点：  </p><ul><li>如果两个人需要双向通信，那么通信的双方都需要一个私钥，并且必须将匹配的公钥发送给另一个人。  </li><li>要确保传输被截获和消息被提取时的机密性，必须满足两个要求：加密算法必须复杂，而且用于定义密钥的位数必须很大 （防止暴力穷举）。  </li></ul><p><br></p><hr><h2 id="数字签名与电子证书"><a href="#数字签名与电子证书" class="headerlink" title="数字签名与电子证书"></a><strong>数字签名与电子证书</strong></h2><p>上面提到的非对称加密，是一种使用两个不同密钥的加密类型，包括用于加密的公钥和用于解密的私钥，反之亦然。每一个个体都可以用他们的私钥加密消息。然后可以将此加密消息发送给拥有相应公钥的收件人。同时，接收方可以使用公钥将接收到的密文解密回原始消息。但因为公钥的公开性，这就导致了非对称加密不保证数据的完全保密，因为任何人都可能获得公开密钥，从而可以解密信息。  </p><p>不过，这种方法可用来验证发件人是谁。 由于只有发件人才拥有私人密钥，而公钥只对特定的私人密钥起作用，如果收件人发现解密成功，就意味着该信息一定是用相应的私人密钥加密的。 因此，它验证了信息确实是由私钥持有者发送的。 这就是所谓的数字签名。  </p><p><strong>数字签名(Digital Signature)</strong>是一种特定类型的电子签名，它要求签名者使用基于证书的数字ID来 <u> 验证其身份 </u>。数字证书通常由独立的证书颁发机构(CA)颁发，CA在颁发证书之前验证签名者的身份。  </p><p>现在来看，电子签名是使用非对称加密算法的公钥和私钥实现的：发送方使用他们的私钥加密消息。这就像用只有寄件人才有的私人印章来封一封信一样。而接收方拥有相应的公钥，可以对消息进行解密。这就像用合适的工具打开密封的信。如果解密成功，它验证消息确实是由私钥的持有者发送的，因为只有特定的私钥可以被用来加密消息，并且可以被相应的公钥解密。这就像一个数字签名，提供发送者身份的证明。</p><p><br></p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBc471bd9c4caf08fffabf10f50ecca5ac?method=download&amp;shareKey=7d9e77033f410ea9c98bcdc564545db0" alt=""></p><p>但是使用这种数字签名的缺点在于：它与整个消息的加密相关联。这可能导致计算数字签名会需要强大的算力支持，因为牵扯到所有数据来计算数字签名需要密集计算。  </p><p>所以另一种选择是使用加密哈希函数。这是一个特殊的函数，它接受一个输入(或’消息’)并返回一个固定大小的字节字符串。对于每个唯一的输入，输出都是唯一的——即使输入中的一个小变化也会产生如此巨大的哈希值输出变化，以至于新的哈希值看起来与旧的哈希值不相关。<br>随后，发送方将哈希函数应用于他们的消息，从而创建一个“<strong>摘要 (Digest)</strong>”。此摘要是表示消息内容的唯一数字。发送方然后使用他们的私钥加密该摘要。加密后的摘要作为数字签名。上图展示了通过摘要生成电子签名的流程。  </p><p>在信息发送阶段，原始消息(明文)和加密摘要(数字签名)然后一起发送，通常将摘要作为单独的文件附加到消息中。由于摘要比整个消息小得多，因此加密和传输它比加密整个消息要快得多。在一些网站下载内容时，它们可能会同时提供文件的SHA-256摘要。通过比对自己下载的文件的SHA-256与官网的进行比较，可以知道用户下载的文件是否在下载过程中发生了损坏。   </p><p><br></p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB564dcb1844aefc51deeeb7d53142b7f0?method=download&amp;shareKey=6e09e4b98e7690464025f65ab03a5a30" alt=""></p><p>上图描述了信息在接收端发生的处理过程。  </p><p>刚才谈到SHA-256的时候说过，接收方使用与发送方使用相同的公共单向哈希函数从接收到的消息中创建摘要。这将产生一个唯一的数字，表示接收到的消息的内容。随后，接收方使用发送方的公钥解密随消息一起发送的原始摘要的加密版本。接收方将从收到的消息中计算出的摘要与解密后的原始摘要进行比较。如果它们匹配，则验证消息在传输过程中没有被篡改，并确认发送方的真实性(因为只有发送方的私钥才能以一种可以由相应的公钥解密的方式加密原始摘要)。  </p><p><br></p><p>然而，真实性只向接收者确认消息是由向他们发送公钥的人发送的，但是它没有考虑这样一个事实，即某人可能会创建公钥并假装是其他人。为了克服这一限制，需要一种更严格的方式来确保身份验证。这就是<strong>证书颁发机构 (Certification Authority, CA)</strong>的用武之地。<br>CA是一个受信任的第三方，它验证实体(如人、计算机或组织)的身份，并通过数字证书将它们绑定到公钥。 </p><p>而CA是一个更大的系统的一部分，被称为<strong>公钥基础设施 (Public Key Infrastructure, PKI)</strong>，它管理密钥和证书，并在不受信任的网络(如互联网)上实现安全通信。PKI确保每个公钥对于其持有者是唯一的，并提供查找、撤销和更新证书的方法。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBc2b105e9ae510369c308295ffa89a248?method=download&amp;shareKey=649eae63c45dafd48372c03945b5907c" alt="">  </p><p>根据上图，我们可以来探讨一下从CA获取安全证书的过程：  </p><ol><li><strong>联系CA</strong>：想要接收安全消息的个体会联系本地CA来获取一对公私钥  </li><li><strong>身份确认</strong>：CA需要确认个体的身份，这可能涉及多种身份验证方法</li><li><strong>提供公钥</strong>：当身份确认通过后，个体需要将他们的公钥提供给CA</li><li><strong>创建数字证书</strong>：提交后，CA会创建一个数字证书，并将该个体的公钥写入该文档。此证书作为一种形式的身份证的公钥</li><li><strong>添加数字签名</strong>：随后CA会使用自己的私钥加密数字证书，并对其添加数字签名</li><li><strong>接收数字证书</strong>：然后CA将数字证书发送给该个体</li><li><strong>发布数字证书</strong>：该个体就可以将数字证书发布在网站或其他可访问的位置。现在，任何想要发送加密消息给该个体的人都可以在数字证书中找到他们的认证公钥</li></ol><p>这个过程可以确保当有人使用该个体的公钥向他们发送加密消息时，他们可以确信该密钥确实属于该个体，并且没有被篡改。  </p><p><br></p><hr><h2 id="对称密钥加密"><a href="#对称密钥加密" class="headerlink" title="对称密钥加密"></a><strong>对称密钥加密</strong></h2><p>多年来，数据加密标准(DES)一直是对称密钥加密的正常选择。当DES的弱点成为一个问题时，Triple DES取代了它。<br>2001年，高级加密标准(AES)作为一种优越的方法被引入。出于教育目的，我们在本章之探讨相对较简单的<strong>简化数据加密标准 (Simplified DES, S-DES)</strong>，以便更好地理解在加密中执行的各种操作。  </p><p>S-DES实际上是一种分组密码，这意味着它以比特为单位对数据进行加密。在S-DES中，它操作以8位构成的“块”。<br>这个过程从一个10位的密钥开始。S-DES的第一步是从原来的10位密钥创建两个8位密钥。这是通过一系列的置换(位的重新排序)和移位来实现的。<br>简单简述一下步骤：  </p><ol><li><strong>置换 (Permutation)</strong>：10位的密钥首先根据预定义的置换规则进行置换(重排)</li><li><strong>拆分 (Splitting)</strong>：置换后的内容被拆分为两部分</li><li><strong>移位 (Shifts)</strong>：每一半都要经历一系列的左移</li><li><strong>二次置换 (Second permutation)</strong>：移位后，将两部分合并，再进行一次置换来生成第一个8位的密钥</li><li><strong>更多的移位</strong>：如题，更多的移位</li><li><strong>最终置换 (Final permutation)</strong>：在经过这些移位步骤后，将这两部分再次组合，并进行另一次置换以生成第二个8位密钥  </li></ol><p>举一个置换过程例子吧：  </p><p>我们有一个10为的密钥：<code>0101010101</code>，而且定义好的置换规则为<code>35274101986</code><br>将这种排列规则应用于密钥意味着按照规则指定的位置重新排列键中的位：<br>在这种置换规则的情况下，表示：置换后的密钥的第一个位置是原始密钥的第3位，第二个位置是原始密钥的第5位，以此类推。<br>之后的置换过程就是这样继续循环下去了。  </p><p><br></p><hr><h2 id="公钥加密方法"><a href="#公钥加密方法" class="headerlink" title="公钥加密方法"></a><strong>公钥加密方法</strong></h2><p><strong>RSA (Rivest-Shamir-Adleman)</strong>是一种常用的公钥加密方法，这个名字是以三位发明者的名字命名的。<br>RSA中的密钥生成过程包括一系列利用素数和模运算的数学特性的步骤。下面是这种加密算法的详细说明：  </p><ol><li><strong>选择质数</strong>：首先选择两个非常大的指数，我们把它们记作<code>p</code>和<code>q</code>。这两个数字是保密的，其他设备都不会知道这两个质数。  </li><li><strong>计算<code>n</code></strong>：计算<code>p * q</code>，记作<code>n</code>。该值将会用作公钥和私钥的一部分。  </li><li><strong>计算<code>φ(n)</code></strong>：计算<code>(p - 1) * (q - 1)</code>，我们一般将这个值记作<code>φ(n)</code>。  </li><li><strong>选择<code>e</code></strong>：再选择一个质数<code>e</code>，使其小于<code>φ(n)</code>并这个数不是<code>φ(n)</code>的因数。我们一般选择65537这个数字，因为它在计算的时候比较好算。  </li><li><strong>求<code>d</code></strong>：现在我们需要求解另一个数字<code>d</code>，满足<code>(d * e) % φ(n) = 1</code>，也就是它们俩相除余数为1。  </li><li><strong>得出公钥</strong>：然后，公钥就得出来了：<code>(n,e)</code>。公钥是对所有人公开可用的。  </li><li><strong>得出私钥</strong>：同时我们也可以得出私钥：<code>(n,d)</code>。私钥是保密的，不对外公开的。  </li></ol><p>RSA的安全性基于这样一个数学原理：虽然两个大质数相乘得到n相对容易，但反过来得出两个质数是几乎不可能的。  </p><p>因为RSA的加密是基于数字的，所以在进行加密之前，我们需要将信息转换为数字的形式。这通常使用ASCII或Unicode等标准编码方案完成。<br>一旦文本被转换成数字<code>x</code>，就会使用公钥<code>(n,e)</code>对其进行加密，以生成加密的数字<code>y</code>。<br>加密使用公式<code>y = (x^e) mod n</code>完成。<br>公式的意思是：<code>x</code>被取<code>e</code>的幂，然后当结果除以<code>n</code>时的余数得到<code>y</code>。  </p><p>类似的过程耶同样用于用于解密，但它解密过程设计私钥<code>(n,d)</code>，而不是公钥。<br>使用公式<code>x = (y^d) mod n</code>，可以从加密的数字<code>y</code>中恢复原始数字<code>x</code>。  </p><p>像RSA这样的公钥加密比对称密钥加密更安全，因为它不需要安全交换密钥。<br>但是，公钥加密中使用的算法不如对称密钥加密中使用的算法快。因此，通常使用公钥加密来安全地传递密钥，然后将密钥用于更快的对称密钥加密。</p><p><br></p><hr><h2 id="SSL-和-TLS"><a href="#SSL-和-TLS" class="headerlink" title="SSL 和 TLS"></a><strong>SSL 和 TLS</strong></h2><p>当访问一个网站时，用户通常有两个主要的关注点。<br>首先，用户他们希望确保网站是官方的网站，而不是看起来很像官方的钓鱼或者诈骗网站。<br>其次，用户在有需求的时候（比如网购时），希望能够安全地传输敏感的个人数据。而SSL协议的创建是为了解决这些问题。    </p><p><strong>安全套接字层 (Secure Socket Layer, SSL)</strong>是为网络通信提供安全及数据完整性的一种安全协议。如今被广泛使用，如网页，电子邮件，互联网传真，即时消息和语音在IP电话（VoIP）。其中网站是通过使用TLS来保护WEB浏览器与服务器之间的通信安全。<br>它为基于客户端-服务器的应用程序提供了一个安全层，确保在用户浏览器(客户端)和网站服务器之间传输的数据是加密和安全的。  </p><p>在网络中，“<strong>套接字 (Socket)</strong>”是IP地址和端口号的组合。传输控制协议(TCP)使用端口号为特定的应用程序提供服务。如果没有SSL这样的安全协议，TCP将使用此端口号直接与应用程序交互。<br>但是当有SSL时，它会作为传输层中的TCP和网络协议栈的应用层之间的附加层。这意味着从应用程序传递到TCP的数据要经过SSL，反之亦然。当数据被发送时，会在SSL中进行加密；在接收时会进行解密。<br>所以启用SSL后，应用协议<strong>HTTP(超文本传输协议)</strong>会变成变成<strong>HTTPS (HTTP Secure)</strong>。这表明客户端和服务器之间的通信是加密和安全的。  </p><p>需要注意下面这些有关于SSL的内容：  </p><ul><li>SSL通常被称为一个协议，但它实际上是一组协议套件  </li><li>SSL协议处理数据传输的格式，确保数据被正确打包以进行传输  </li><li>SSL协议负责建立安全连接。SSL为了达成目的会涉及以下几个步骤，包括对服务器的身份验证和对加密算法和密钥的协商  </li><li>SSL的操作不需要用户操作即可发生。它集成到网络协议栈中，并在需要安全连接时自动操作  </li><li>SSL实现的起点是通过TCP (Transport Control Protocol，传输控制协议)在客户端和服务器之间建立的连接  </li><li>客户端浏览器需要调用SSL套件中的握手协议来确保安全连接。这涉及几个步骤：  <ul><li>首先握手协议要求服务器提供SSL证书，即验证服务器身份的数字证书  </li><li>随后，服务器将此SSL证书连同其公钥一起发送  </li><li>最后，浏览器使用此公钥加密密钥，该密钥将在数据传输会话期间作为对称密钥加密的一次性会话密钥  </li></ul></li></ul><p>SSL最初是一个专有协议，但后来被互联网工程任务组(Internet Engineering Task Force, IETF)接管，形成了一个标准化版本。<br>当IETF意识到需要一个改进的版本时，他们决定使用一个新的名称。因此，<strong>传输层安全 (Transport Layer Security, TLS)</strong>作为SSL的升级版、更安全的版本被引入。<br>尽管SSL存在一些安全问题，但它现在仍然被广泛使用。现在，当你听说“SSL证书”时，它通常意味着SSL/TLS证书。<br>SSL现在多与TLS协议一起用于安全通信，所以在今天的实践中，即使人们提到“SSL”，TLS也很有可能被使用。  </p><p><br></p><hr><h2 id="量子密码"><a href="#量子密码" class="headerlink" title="量子密码"></a><strong>量子密码</strong></h2><p>不开玩笑，这下真的需要讨论一下量子力学了：  </p><p>量子力学提供了支配最小尺度粒子行为的基本物理定律。<strong>光子 (Photons)</strong>是传输光的粒子。它们表现出波状的行为，这意味着每个光子似乎在垂直于其传播方向的特定方向上振动。<br>每个光子振动的方向称为<strong>偏振度 (Polarization)</strong>。在图表中，偏振度通常用双端箭头表示。<br>而我们在计算机中，可以使用特定的偏振来创建光子来表示比特的值，而比特是计算中信息的基本单位。如果我们允许四种极化状态的可能性，我们可以用两种不同的方式表示一个二进制值(0或1)。这可能被用于增加每个光子中可编码的信息量，或在量子通信或计算系统中提供冗余或错误纠正。</p><p>具体的编码方式如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBc6c3ba32a301870cb84f4ee5ee03399f?method=download&amp;shareKey=14aff5506d204203b5273f887e45698c" alt=""></p><p>因此，该方案可用于使发送方和接收方创建由若干比特组成的“秘密代码”。下表详细描述了量子密钥的分发过程：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB5375706f72bd166da3d4697b6abaabde?method=download&amp;shareKey=8c303e4e230c95713ebdf7c98cf14222" alt=""></p><ol><li><strong>被发送的比特值</strong>：发送方（我们一般称之为Alice），选择一个随机的比特序列进行发送。上图第一行表示了一段被选中的比特值，它是<code>1 0 1 1 0 0 0 1 0 1</code>。  </li><li><strong>发送方的极化基</strong>：随后，Alice会为每一个比特位选择一个随机的极化基。在这个表格中，<code>+</code>表示垂直和水平偏振，<code>×</code>表示对角偏振。  </li><li><strong>接收方的极化基</strong>：接收方（我们一般称之为Bob），会在Alice不知情的情况下为每一个位选择一个随机的极化基。</li><li><strong>传输并揭示极化基</strong>：随后数据会被传输。最后，Alice会告诉Bob她使用的每一个位的极化基。</li><li><strong>确认位值</strong>：Bob会将从Alice那里拿到的极化基信息与自己选择的极化基相匹配。通过判定他们之间的匹配情况，就可以反映出哪些位是这两位之间的秘密代码。  </li></ol><p>在上图的例子中，最后的秘密代码<code>1001</code>就是通过这样的方式得到的。<br>加密的过程利用了量子力学的原理来确保安全性。如果窃听者试图截获并测量传输过程中的量子态，由于海森堡测不准原理，会干扰量子态并引入可检测误差。</p><p><br></p><hr><h1 id="第二十二章：人工智能-AI"><a href="#第二十二章：人工智能-AI" class="headerlink" title="第二十二章：人工智能 (AI)"></a><strong>第二十二章：人工智能 (AI)</strong></h1><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a><strong>综述</strong></h2><p>定义“人工智能”是什么并不容易。<br>一个关键问题是智能的定义。例如，你可能会说一个人做心算需要智力，比如43 × 13。不过，你可以使用计算器来得到答案，但不会将计算器描述为具有人工智能。这意味着像这样的定义:</p><p><em>“人工智能涉及智能行为的自动化。”</em></p><p>并不完全令人信服。  </p><p>人们一致认为人工智能是计算机科学的一部分。很明显，这个主题有许多不同的子节，本章将讨论其中一些。结论是一个模糊的定义是最好的。例如:</p><blockquote><p>Artificial Intelligence is concerned with “how to make computers do things at which, at the moment, people are better.”<br>                <em>(E. Rich. Artificial Intelligence. McGraw-Hill, 1983)</em></p></blockquote><p>我个人认为人工智能行业在近年来发展十分迅速，迭代速度十分离谱。所以说本章可能会出现一些过时的理论，但是也没办法，毕竟我们需要考试嘛。  </p><p><br></p><hr><h2 id="人工智能与图表"><a href="#人工智能与图表" class="headerlink" title="人工智能与图表"></a><strong>人工智能与图表</strong></h2><p>我们在AI这一块使用的图标大多是像下面这种类型的：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBce302e5663dcb28db6d5bd3fa7481585?method=download&amp;shareKey=1140b5efb80af601fd9a87508b4aaaee" alt=""></p><p>这样的图片由节点和连接线组成。每一条线连接两个节点，连接线上面存在一个相关联的标签，这个标签是一个数值。  </p><p>这样的图可以用来表示各种场景。一种常见的表示方法是，节点表示位置，边缘标签表示这些位置之间的距离。只有当节点对之间存在可直接移动的路径时，图中才包含连接线。例如，这种图可以找到两个不相邻的节点之间的最短路径。  </p><p>我们可以通过考虑所有可能的路线并计算每条路线的总距离，利用我们的模型来找到节点A和节点D之间的最短路线:  </p><p>A → B → C → D   40 + 10 + 40 = 90  </p><p>A → B → F → E → D  40 + 15 + 20 + 5 = 80</p><p>A → F → E → D  60 + 20 + 5 = 85</p><p>A → B → B → C → D  60 + 15 + 10 + 40 = 125  </p><p>不难看出，第二种方案是路径最短的方案。<br>如果我们需要在一个包含100个节点的图像里面寻找最短距离方案，会把我们数累死。好在现在已经有了好用的人工智能算法来解决这个问题。  </p><p><br></p><hr><h3 id="狄克斯特拉算法"><a href="#狄克斯特拉算法" class="headerlink" title="狄克斯特拉算法"></a><strong>狄克斯特拉算法</strong></h3><p>狄克斯特拉算法是一种寻找加权图中节点之间最短路径的方法。该算法可用于寻找从图中单个节点到所有其他节点的最短路径，从而生成最短路径树。它还可以用于查找从单个节点到单个目标节点的最短路径，在确定到目标节点的最短路径后停止算法。  </p><p>狄克斯特拉算法的准备步骤如下：  </p><ol><li><strong>标记路径开始的原点</strong>：首先标记一个我们开始的位置。  </li><li><strong>创建<code>ShortestPath</code>变量</strong>：这个变量将会存储从源节点到目标节点的最短路径。随着我们对于整个树的深入探索，变量内部的值也会发生改变。一开始，这个变量中的值为零，因为我么还没有探索任何可能的路径。  </li><li><strong>创建<code>RemainingNodes</code>变量</strong>：我们将所有的节点放入这个变量中，包括源节点，我们将源节点记作S。这个集合包含了我们目前为止还没有探索过的节点。最初，这个变量仅包含图像中的所有节点，包括源节点。  </li><li><p><strong>创建record</strong>：接下来我们需要创建一个record，其中包含以下数据类型：  </p><ul><li><strong>节点名称 (Node name)</strong></li><li><strong>从源节点到此节点的距离 (Calculated distance to the node from the source node)</strong></li><li><strong>到达此节点路由中的顺序 (Sequence of node in the route to the node)</strong></li></ul><p>这些record用来跟踪源节点到每个节点的最佳已知距离，以及到达这个节点的路径。</p></li><li><p><strong>源节点距离值为0</strong>：将源节点的距离值设为0（因为源节点到自身的距离总是为0）。</p></li><li><strong>其他点距离设为无穷大</strong>：我们需要将其他的点的距离设为无穷大，因为我们在算法的开始不知道源节点到其他节点的距离。为了保证正常的计算，只能使得距离值大于可能计算出来的值。</li></ol><p>接下来算法会步入一个循环，这就是狄克斯特拉算法能够寻找最短路径的核心：</p><ol><li><p><strong>从<code>RemainingNodes</code>中选择距离最小的节点</strong>：<code>RemainingNodes</code>变量中存储的是所有的未探索的节点。这一步要求程序再<code>RemainingNodes</code>变量中选择一个距离当前点距离最小的节点。  </p></li><li><p><strong>节点移动至<code>ShortestPath</code>变量中</strong>：这一步过后，我们就已经探索了该点的距离了。这时候就应该将这个节点移动到<code>ShortestPath</code>变量中。  </p></li><li><strong>最短距离的判定与计算</strong>：我们通过被链接的两个节点的最短路径上的标签的值来计算距离。所有的标签值相加既是最新的最短距离，然后将此值更新，替换当前存储的最短距离值。</li></ol><p>这时，我们就已经找出了通往每个节点的最短路径。  </p><p><br></p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB44d0deb0a129644dd8730086a0744552?method=download&amp;shareKey=10b1aa1506399b549015bfb7da7afd91" alt=""></p><p>上图展示了狄克斯特拉算法的更多细节信息。<br>当节点仍在<code>RemainingNodes</code>中时，会以红色显示。 在每个阶段，节点 N 都以黑色表示。 当节点已被移动到最短路径集而无法再更改时，距离和路径数据将以灰色显示。  </p><p><br></p><hr><h3 id="A-算法"><a href="#A-算法" class="headerlink" title="A* 算法"></a><strong>A* 算法</strong></h3><p>狄克斯特拉的算法的目的是找到某一个节点通向每一个节点的最短路径。而在实际应用中，我们经常需要的是寻找两点之间的最短路径，而不是寻找某个节点到所有点的最短路径。  </p><p>这种情况下，我们可以对狄克斯特拉算法进行一些简单的修改，使得算法只求解两个特定节点之间的最短路径。可能达成这一目标的一种方法是使用基于启发式的算法，如A*(发音为“a -star”)。不过，在查找单个最短路径时，A*可能比Dijkstra更有效，但如果需要查找从一个节点到许多其他节点的最短路径，Dijkstra可能仍然更有效，因为它不依赖于特定于目标的启发式算法。</p><p>A*算法的有效性在很大程度上取决于所使用的启发式算法的质量。一个质量低下的的启发式算法可能导致寻找的路径十分低效，甚至导致算法无法找到一条路径。  </p><p>将狄克斯特拉算法经过下方的简单修改，就可以实现A*算法的内容和功能：  </p><ol><li><p>将连接两个节点的边的标签值与已存储的 N 的距离值相加，计算出新的距离值：这一步与狄克斯特拉算法相似，都是用根据节点N的路径的不断探索来更新已知的最佳距离。  </p></li><li><p>计算 N 与目的地节点距离的估计值，并将其与新的距离值相加：这一步与狄克斯特拉算法就不一样了。A*算法使用启发性函数来估算节点到目的地的剩余距离，然后根据剩余距离的大小分别对待不同的节点。而不是对所有的未探索节点一视同仁。这个估计距离会与已知距离相加，然后总值较低的节点会被优先探索。  </p></li></ol><p>我们需要在选择A*算法的启发式函数时格外注意。启发式算法应该是对于实际剩余距离的预估，当选择这个函数时，它必须保证<strong>任何估计值都将小于实际值</strong>。如果这个预估值过高，就会导致A*算法探索更多的节点，从而导致A*算法找不到正确的路径。一般来说，如果在二维平面上寻找最短距离，那么这个启发式算法的一般选择是曼哈顿距离，或距离目的地的欧氏距离。  </p><p><br></p><p>为了简单理解A*算法，这里举一个在二维平面上寻路的简单例子：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB910640e151df886d88b59f8803222dbb?method=download&amp;shareKey=e9c75241e2a42a8fed14c705b56dbafb" alt=""></p><p>图中展示了7个城镇，每个城镇的名字都使用A-G进行编号。之所以使用这样平面的形式来呈现城镇的位置，那是因为它是通过定义每个城镇位置的一对x,y坐标绘制的，而这正是启发函数能得以应用的基础。  </p><p>下面是这7个城镇的坐标：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th><th style="text-align:center">G</th></tr></thead><tbody><tr><td style="text-align:center">(40, 20)</td><td style="text-align:center">(30, 30)</td><td style="text-align:center">(80, 35)</td><td style="text-align:center">(130, 30)</td><td style="text-align:center">(120, 20)</td><td style="text-align:center">(45, 5)</td><td style="text-align:center">(100, 30)</td></tr></tbody></table></div><p>毕达哥拉斯定理，也就是勾股定理可以用来计算两个位置之间的直接距离，可以写作Δx方加Δy方，然后开个根。  </p><p>而使用这种方法计算的距离，一定会小于等于我们要实际走的路程。这个实际问题画成图像就像下图：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB3f9c05a9780f3473c733557ae22c2ce8?method=download&amp;shareKey=bb2e1a84c6e90c480b1a39b3f99ab2e1" alt=""></p><p>首先事先说明，A*算法实际上有很多的实现方案。我们在这里使用的A*算法是CIE的某种神奇的独创方法。。。用文字表示出来是这样的：  </p><ol><li><p>创建三个列表：初始列表、开放列表和封闭列表：这些列表用来记录我们尚未探索的节点（<code>initial</code>）、正在探索的节点（<code>open</code>）和已经探索完毕的节点（<code>closed</code>）。</p></li><li><p>为图中的每个节点在初始列表中插入一条空记录：这样我们就建立了包含图中所有节点的<code>initial</code>列表。</p></li><li><p>在<code>initial</code>列表的每条记录中存储节点的 x 和 y 坐标：这将用于计算节点之间的距离。</p></li><li><p>在<code>initial</code>列表的每条记录中，将旅行距离值初始化为 0。因为在算法的开始，我们还没有走过任何距离。</p></li><li><p>创建一个查询表，为每对有直接连接道路的节点建立一个条目。该表会用于快速查找直接相连的节点之间的距离。</p></li><li><p>为表中的每对节点存储沿该道路的行驶距离。这会用于计算节点之间的距离。</p></li><li><p>确定旅行的目标节点，也就是我们的目的地。</p></li><li><p>确定旅行的起始节点，并将该节点的记录复制到开放列表中。</p></li><li><p>从<code>initial</code>列表中删除初始节点的记录：我们将起始节点从<code>initial</code>移到<code>open</code>，是因为我们即将开始探索它。</p></li><li><p>现在递归地应用下面的算法，直到所有的可能性都被检查过：</p><ul><li>对于与当前节点（父节点）相邻的每个节点，我们都要计算一个新的距离值，相应地更新我们的记录，并根据需要在列表之间移动节点。</li><li>我们将继续这个过程，直到探索完所有可能的路径或找到目标。</li></ul></li><li><p>如果目标节点在打开的列表中，则仅对该节点执行以下操作：计算实际距离，然后更新我们的记录。</p><ul><li>我们计算实际距离，更新相应记录，并根据需要在列表之间移动节点。</li><li>如果没有更多节点需要探索（<code>open</code>列表为空），我们会倒回去检查<code>closed</code>列表中没有包含在之前路径序列中的节点。</li><li>如果一条未探索的路径可能比我们当前的最佳路径短，我们就把它的起始节点移回<code>open</code>，然后继续探索。</li></ul></li></ol><p>以上的过程会一直持续到我们找到通往目标的最短路径或确定不存在这样的路径为止。</p><p><br></p><hr><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a><strong>机器学习</strong></h2><p>机器学习的特性可以概括为:</p><ul><li>基于计算机的系统有一个或多个需要执行的任务</li><li>知识是通过执行任务的经验获得的</li><li>通过这些经验和获得的知识，可以改善未来任务的表现。</li></ul><p>从经验中学习的能力是智能的体现。 因此，机器学习是人工智能范畴内众多方法中的一种。 有许多方法可以描述如何进行学习。 这里将讨论其中三种：  </p><ol><li><strong>无监督学习 (Unsupervised learning)</strong></li></ol><p>在无监督学习 (Unsupervised learning)中，系统必须根据自己执行任务的经验得出结论。为此，需要有能够对所获知识进行组织或分类的算法。<br>例如，可以根据层次框架确定 “<strong>概念集群 (Conceptual clusters)</strong>“。在这种方法中，知识最初都被置于树形结构的根部。然后，根据知识的属性，将选定的群组移入树形结构的分支中。  </p><p>如今，无监督学习已成为一种主流活动。访问海量数据库的强大计算机系统可以被用来通过学习以往的数据与记录，从而学习对未来做出决策。<br>我们在互联网上的活动都会被记录和存储。这些存储的数据很可能会被用来做出决策，而这些决策可以决定在未来使用互联网时服务商向我们推荐哪些产品或服务。   </p><ol><li><strong>监督学习 (Supervised learning)</strong></li></ol><p>在监督学习中，系统被输入相关的分类知识。例如，我们可能正在开发一个人工智能程序，用于批改试卷。在监督学习中，试题答案可以连同每道题的分数或分类评语一起提供。这种对模型数据的分类提供就是监督学习的典型标志。  </p><p>专家系统是一种计算机系统，可模拟人类专家在特定领域的决策能力。 它旨在通过知识体系的推理来解决复杂的问题。<br>在这种情况下，监督学习指的是人类专家分析数据样本并提供结论的过程。 然后将这些数据样本和结论输入专家系统的知识库。<br>专家系统的有效性可以通过人类专家提供样本数据并检查系统结论的准确性来检验。 如果效果不佳，则向系统输入更多数据和结论，以提高其性能。<br>虽然专家系统是人工智能的一个例子，但它并不是机器学习的一个例子。 这是因为人们并不期望系统在无人帮助的情况下提高性能。 相比之下，机器学习系统的设计目的是自动学习和改进经验，而无需明确编程。</p><ol><li><strong>强化学习 (Reinforcement learning)</strong></li></ol><p>强化学习具有一些类似于无监督学习的特征，而另一些特征则类似于有监督学习。这种方法有自己特定的词汇。下面的语句就是用这些词汇来描述强化学习算法如何工作的。  </p><ol><li><p><strong>Agent</strong>：Agent是学习如何行为的实体（如机器人或软件应用程序）。它通过采取行动、接收反馈并从中学习来与环境互动。</p></li><li><p><strong>Environment</strong>：这是Agent运行的环境或空间。它可以是物理环境（如机器人的迷宫），也可以是虚拟环境（如下棋程序的棋盘）。  </p></li><li><p><strong>States</strong>：这是Agent在环境中可能遇到的不同条件或情况。</p></li><li><p><strong>Action</strong>：这是Agent在与环境交互时每一步所做的事情。例如，在一盘棋中，行动可以是移动一个棋子。</p></li><li><p><strong>Policy</strong>：这是Agent根据其当前状态决定其行动的策略。换句话说，这是Agent的行为函数。</p></li><li><p><strong>Reward</strong>：这是Agent在采取行动后得到的反馈。它是衡量该行动在实现总体目标方面的好坏程度。</p></li><li><p><strong>Exploitation vs Exploration</strong>：这是Agent在决定下一步行动时可以使用的两种策略。开发 (Exploitation)是指利用已知信息，根据过去的经验采取预期会产生回报的行动。探索 (Exploration)是指尝试新的行动，以发现潜在的更好策略。</p></li></ol><p>在强化学习中，代理通过与环境互动并接受奖励或惩罚来学习。其目标是学习一种能在一段时间内使总奖励最大化的策略。总而言之，目标是通过提高策略的质量来最大化奖励值。这是一种寻找最佳性能的反复试验。它需要对同一个问题进行多次反复的尝试。  </p><p>上述内容是有关于强化学习的抽象描述。如果考虑该方法应用的一些实例，那么概念就会更清晰一些。<br>比如，强化学习的一个领域是玩诸如双陆棋这样的逻辑游戏。或者是机器人技术，机器人必须学习如何有效地完成任务。比如说，机器必须学会如何在迷宫中导航。在这种情况下，当agent选择一个最终将通向目的地的左转时，奖励将被给出一个正值。如果它选择右转，则奖励为负值。  </p><article class="message is-info"><div class="message-body"><b>Machine learning: where a system improves its performance through analysis of previous performance</b><br><b>Unsupervised learning: where the machine learning takes place entirely through the system analysing and categorising the available data</b><br><b>Supervised learning: where a sample data is supplied to the system with associated data relating to the outcome of its use</b><br><b>Reinforcement learning: where an agent learns by receiving graded rewards for actions taken</b></div></article> <p><br></p><hr><h3 id="回归分析方法"><a href="#回归分析方法" class="headerlink" title="回归分析方法"></a><strong>回归分析方法</strong></h3><p>在某些应用中，人工智能的目的是根据输入到人工智能算法中的不同数量的数据值，预测并提供某些确定数量的输出数值。<br>如果要使用<strong>回归分析 (Regression analysis)</strong>，第一步需要为系统提供一些输入数据的实际值，以及人工智能系统运行时将成为输出数据的实际值。<br>机器可以利用这些数据来研究这两组数值之间是否存在任何相关性。如果相关性可以用数学公式来表示，那么在输入新数据时，就可以用这个公式来输出预测值。  </p><article class="message is-info"><div class="message-body"><b>Regression analysis: finding a mathematical function that provides the best fit to the actual outcomes when outcomes are calculated from previous inputs</b></div></article> <p>回归分析最简单的应用是只输入一个量的值，并预期这些值与要预测的值之间存在线性关系。<br>例如，人工智能系统可以用来预测 A-Level 计算机科学考试考生的分数。<br>人们可能期望考生在 A-Level 计算机科学考试中的分数与他们在 IGCSE 数学考试中的分数之间存在相关性。下图显示了输入和分析一些历史数据后可能发现的情况：</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB2bd5fffbeca8bf927904c8ba0f6c1c0f?method=download&amp;shareKey=fb4bd0b59bc800f821c5e256b2f0e132" alt=""></p><p>我们可以发现，两个量之间有着很强的相关性。而这些数据拟合起来，图像中的直线就是最好的拟合直线。因此，这条线的公式可以根据IGCSE数学试卷的分数来预测A-Level计算机科学试卷的未来分数。  </p><p>回归分析还可以更复杂。<br>例如，如果使用三种不同考试的分数作为输入，可以进行类似的数学公式拟合。在其他情况下，非线性关系可能是合适的，因为当需要预测新产品的未来销售时，预计销售将呈指数级增长。</p><p><br></p><hr><h2 id="人工神经网络"><a href="#人工神经网络" class="headerlink" title="人工神经网络"></a><strong>人工神经网络</strong></h2><p>没想到这年头学计算机都需要了解生物知识。  </p><p>下图我们人脑中的神经元的结构：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBe3062239f13e757441bcee91323d9d3e?method=download&amp;shareKey=ece28fe1266d96d548bcaf46bb558a66" alt=""></p><p>在神经细胞的一端有许多可以接收信号的树突。在细胞的另一端有许多轴突终末按钮可以传递信号。突触是位于轴突终末按钮和含有神经递质的树突之间的区域。当一个神经细胞接收到输入信号时，轴突内的电压就会增加。在该电压的某个阈值时，神经递质被激活，信号被发送到邻近细胞的树突。  </p><p>而人工神经网络可以通过软件或硬件创建。<br>网络的组成部分可以用下图所示的图表来表示：三角形是网络中的<strong>节点 (Node)</strong>，代表人工神经元。一般来说节点会使用圆圈表示。<br>通常，节点可以接收一个或多个输入，并向其他节点提供一个或多个输出。节点动作的建模涉及到对每个输入施加一个权重因子。对加权输入值求和，然后使用激活函数计算节点的输出值。如果输入不是数值，则必须将其转换为1，以便对加权值进行求和。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB89250450455c70614fbc9121b0ad9d83?method=download&amp;shareKey=854bb8c6faf84e86166199b028af3199" alt=""></p><p>图中显示了一个由三层组成的非常简单的网络结构。<br>左侧的3个节点的列接收输入。右边的列提供输出。中间的两个节点形成了所谓的<strong>隐藏层 (Hidden layer)</strong>。一些人工神经网络都会包含好几个隐藏层。  </p><p>使用人工神经网络的人工智能系统的一个例子是根据支付的初始价格和使用寿命来估计电池的成本效益：每个输入节点代表一个特定的电池，它们的输入可包括电池的序列号，电池价格等数据。  </p><p>接下来的隐藏层是输入层和输出层之间的层级。在这种情况下，隐藏层中的一个节点可能与电池使用的设备类型有关，另一个节点可能与设备的用户类型有关。这些节点处理输入，并将其传递给输出层。  </p><p>在输出层，每个节点都会根据隐藏层处理后的输入，计算出特定电池单位时间成本的估计值。  </p><p>在这个神经网络中，目标是学习一个从输入（电池数据和价格）映射到输出（估计成本效益）的函数。该网络将在已知成本效益的电池数据集上进行训练，并调整其内部参数（权重和偏置），使其预测值与实际值之间的差异最小。训练完成后，该网络可用于估算新电池的成本效益。  </p><p>在这个系统中，每个节点都有可调节的因素。这些因素包括每个输入的权重和激活函数。<br>在初始学习时，需要对这些可调因子进行调整，以达到系统的最佳预测能力。为此，可以采用<strong>误差反向传播 (Back propagation of errors)</strong>的方法来实时调整权重和激活函数的参数。  </p><p>要做到这一点，我们需要从电池的实际使用中获取一些电池寿命数据，然后为所有可调因素创建一个测试数据集。  </p><p>在模型使用真实数据进行训练时，他会为每次输出确定一个误差，而误差是电池寿命的输出值与实际使用值之间的差值。然后，根据误差值反向传播，按需修改在某些节点上的权重和激活函数的参数，随后继续训练。这种操作可以提升模型的准确性。  </p><article class="message is-info"><div class="message-body"><b>Back propagation of errors: An algorithm for machine learning that optimizes the values for parameters which are adjustable. It is applied first to the nodes in the output layer and then works backward through the nodes in hidden layers until finally the input nodes are considered</b></div></article> <p>学习过程从输出层开始，然后到隐藏层，最后到输入层。这种逐层学习的方法允许网络逐步完善其预测。随着反向传播的不断进行，我们最后会开始处理输入层节点的可调因素。<br>初始学习过程完成后，系统可应用于新的输入数据，以预测不同电池的成本效益。随着更多实际使用数据的出现，可以再次应用反向传播学习过程，以进一步提高系统性能。  </p><p><br></p><hr><h3 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a><strong>深度学习</strong></h3><p>简单介绍下：大脑中有一层神经元结构，其中的低层具有易于理解的功能，而高层涉及更抽象的信息处理。<br>随着现在可用的计算能力的增加，人工神经网络被引入了大量的隐藏层，试图实现类似人脑的思考方式。这些方法被称为<strong>深度学习 (Deep Learning)</strong>系统。  </p><p>机器学习是人工智能的一个子集，它允许计算机系统在没有明确编程的情况下自动做出预测或决策。它所需的计算能力较低，可以在较小的数据集上进行训练。但是，它需要更多的人工干预来纠正和学习，而且它只做简单的线性相关。  </p><p>而深度学习是机器学习的一个子集，它使用人工神经网络来解决机器学习算法可能无法解决的更复杂的问题。深度学习使用以人脑为模型的复杂算法结构，能够处理文档、图像和文本等非结构化数据。它通常需要较少的持续人工干预，但需要大量数据和大量的算力（专门的 GPU来训练）。深度学习能够建立非线性的复杂关联。</p><p>人话讲：虽然机器学习和深度学习都涉及计算机从数据中学习，但深度学习更为复杂，可以处理更大、更多的非结构化数据集，但需要更多的计算资源。</p><article class="message is-info"><div class="message-body"><b>Deep learning: where a system uses an artificial neural network with an exceptionally large number of hidden layers</b></div></article> <p>至此，A2计算机 Paper3部分全部完成。</p><p><br></p><hr><h1 id="PART-FOUR-进阶编程技能与问题解决"><a href="#PART-FOUR-进阶编程技能与问题解决" class="headerlink" title="PART FOUR: 进阶编程技能与问题解决"></a><strong>PART FOUR: 进阶编程技能与问题解决</strong></h1><h1 id="第二十三章：算法"><a href="#第二十三章：算法" class="headerlink" title="第二十三章：算法"></a><strong>第二十三章：算法</strong></h1><p>鉴于本人只会Python，本章的所有实例代码全部换成了Python。VB.NET还有Java那是真的一点不会。  </p><h2 id="线性搜索"><a href="#线性搜索" class="headerlink" title="线性搜索"></a><strong>线性搜索</strong></h2><p><strong>线性搜索 (Linear search)</strong>，也叫做顺序搜索，是一种在列表中查找元素的方法。<br>算法的实现方法是：顺序地检查列表中的每个元素，直到找到匹配的元素或搜索了整个列表才可以结束。<br>线性搜索的最差运行时间为线性时间，最多进行 n 次比较，其中 n 是列表的长度。因为最坏的情况，就是算法爬遍了整个列表才找到结果。  </p><p>代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def linear_search(list, target):</span><br><span class="line">    for i in range(len(list)):</span><br><span class="line">        if list[i] == target:</span><br><span class="line">            return i  # 如果元素被找到，那么就返回index值</span><br><span class="line">    return None  # 如果未找到元素，那么就返回None值</span><br><span class="line"></span><br><span class="line"># 函数测试</span><br><span class="line">numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">print(linear_search(numbers, 5))  # 输出： 4</span><br><span class="line">print(linear_search(numbers, 10))  # 输出： None</span><br></pre></td></tr></table></figure><p><br></p><hr><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a><strong>冒泡排序</strong></h2><p><strong>冒泡排序 (Bubble sort)</strong>，又称为下沉排序，是一种简单的排序算法。<br>它对输入列表中的元素进行逐个重复排序，比较当前元素和其后的元素，并在必要时交换它们的值。<br>这种算法会重复检查列表，直到在某一次通过中发现没有元素需要交换位置，这意味着列表已完全排序。<br>该算法因较大的元素 “冒泡 “上升到列表顶端而得名。  </p><p>冒泡排序的工作原理如下：  </p><ol><li>从列表的开始遍历列表</li><li>将列表中的第n个值与第n+1值进行比较。</li><li>如果第一个值较大，则交换两个值的位置。</li><li>移动到列表中的第二个值。再次比较该值和下一个值，如果该值较大，则交换位置。</li><li>继续进行，直到没有需要比较的项目为止。</li><li>回到列表的起点。<ul><li>从列表遍历的开始到结束，每一次都称为一次<strong>通过 (Pass)</strong>。</li></ul></li><li>冒泡排序一直持续到没有数值交换为止。此时，列表排序完毕。  </li></ol><p>下面是代码实例：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def bubble_sort(list):</span><br><span class="line">    for i in range(len(list)):</span><br><span class="line">        for j in range(len(list) - 1):</span><br><span class="line">            if list[j] &gt; list[j+1]:</span><br><span class="line">                # 交换元素位置</span><br><span class="line">                list[j], list[j+1] = list[j+1], list[j]</span><br><span class="line">    return list</span><br><span class="line"></span><br><span class="line"># 测试函数</span><br><span class="line">numbers = [9, 8, 7, 6, 5, 4, 3, 2, 1]</span><br><span class="line">print(bubble_sort(numbers))  # 输出: [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure><p>在本例中，<code>bubble_sort</code> 函数将一个列表作为输入。它将列表中的每个元素与其相邻元素进行比较。<br>如果某个元素大于其相邻元素，它就会交换它们。这个过程一直持续到不再需要交换为止，表明列表已经排序。  </p><p><br></p><hr><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a><strong>插入排序</strong></h2><p><strong>插入排序 (Insertion sort)</strong>是一种简单的排序算法，它一次一个元素地建立最终的排序数组或排序列表。  </p><p>在大型列表中，它的效率远低于更先进的算法，如快速排序，堆排序或合并排序，不过，插入排序有几个优点：  </p><ul><li>对小数据集排序比较高效</li><li>在应用中，插入排序比大多数其他简单的四元算法（如选择排序）更有效。</li><li>对已基本排序完毕的数据集更有效率</li><li>稳定，即不会改变相同键元素的相对顺序</li><li>就地排序，即只需要一定量的 O(1) 额外内存空间  </li></ul><p>插入排序的工作原理如下：  </p><ol><li>从列表开头开始遍历</li><li>将列表中的当前值(n)与之前的值(n-1)进行比较。</li><li>如果当前值小于前一个值，则对调它们。</li><li>移动到列表中的下一个值，重复步骤 2 和 3。</li><li>一直重复，直到没有可比较的项目为止。</li></ol><p>插入排序的代码示例如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def insertion_sort(list):</span><br><span class="line">    for i in range(1, len(list)):</span><br><span class="line">        key = list[i]</span><br><span class="line">        j = i - 1</span><br><span class="line">        while j &gt;= 0 and key &lt; list[j]:</span><br><span class="line">            list[j + 1] = list[j]</span><br><span class="line">            j -= 1</span><br><span class="line">        list[j + 1] = key</span><br><span class="line">    return list</span><br><span class="line"></span><br><span class="line"># 测试函数</span><br><span class="line">numbers = [9, 8, 7, 6, 5, 4, 3, 2, 1]</span><br><span class="line">print(insertion_sort(numbers))  # 输出: [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure><p>不难发现，在插入排序和冒泡排序这两种简单的排序算法中，每个元素的位置都是基于比较来决定的，这就决定了它们俩是最稳定的排序算法。因此它们不会在排序过程中交换具有相同值的键，从而保留这些元素的初始顺序。  </p><p>然而他们之间有些区别：  </p><ol><li>在每次迭代中，插入排序算法将当前元素与之前的元素进行比较。相反，冒泡排序算法在每次迭代中，会比较并交换相邻的元素。  </li><li>冒泡排序比插入排序执行更多的交换操作。对于每次迭代，插入排序在已经排序的元素中为当前元素找到合适的位置。相反，冒泡排序在每次迭代中比较和交换相邻的元素。大量的交换导致冒泡排序算法的运行时间变长。</li><li>虽然两种算法的时间复杂度都是O(n²)，即完成排序操作所需的时间是二次，但平均而言，由于交换次数较多，冒泡排序的性能不如插入排序。</li></ol><p>下图是一个插入排序的直观解释：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBf08cf407c048e1e3007c225de4739b52?method=download&amp;shareKey=d2768dd15ced52adf02e41d1e669eebe" alt=""></p><p>首先，6先与它前面的数据47进行比较。6比47小，因此它们对调位置，6跑到了列表的最前面。<br>继续，54与47进行比较，54比47大，因此不执行任何操作。<br>17与54比较，因为17比54小，所以17会与54对调，并一直向前寻找元素比较大小，直到17换不动了为止。  </p><p>排序就这么一直执行下去，直到序列中的最后一个元素也排列完成。  </p><p><br></p><hr><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a><strong>二分查找</strong></h2><p><strong>二分查找 (Binary search)</strong>，又称半区间查找，对数查找或者二进制切分，是一种好用的查找算法，用来查找目标值在排序数组中的位置。<br>它的工作原理是反复将列表中可能包含该项的部分一分为二，直到将可能的位置缩小到一个为止。  </p><article class="message is-info"><div class="message-body"><b>Binary search: repeated checking of the middle item in an ordered search list and discarding the half of the list which does not contain the search item</b></div></article> <p>二分查找的工作原理如下所示：</p><ol><li>从数组的中间元素开始处理元素。</li><li>如果目标值等于数组的中间元素，则返回该元素的索引。</li><li>如果目标值小于中间元素，则重复数组左半部分的过程：寻找左半部分的中间点，然后看看目标值是小于这个数还是大于这个数。一直循环下去，直到找到匹配值。</li><li>如果目标值大于中间元素，则对数组的右半部分重复上述过程：寻找右半部分的中间点，然后看看目标值是小于这个数还是大于这个数。一直循环下去，直到找到匹配值。</li><li>如果在检查所有元素后仍未找到匹配值，则返回None。  </li></ol><p>Python代码实例：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def binary_search(list, target):</span><br><span class="line">    low = 0</span><br><span class="line">    high = len(list) - 1</span><br><span class="line"></span><br><span class="line">    while low &lt;= high:</span><br><span class="line">        mid = (low + high) // 2</span><br><span class="line">        guess = list[mid]</span><br><span class="line">        if guess == target:</span><br><span class="line">            return mid</span><br><span class="line">        if guess &gt; target:</span><br><span class="line">            high = mid - 1</span><br><span class="line">        else:</span><br><span class="line">            low = mid + 1</span><br><span class="line">    return None</span><br><span class="line"></span><br><span class="line"># 测试函数</span><br><span class="line">numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">print(binary_search(numbers, 5))  # 输出: 4</span><br><span class="line">print(binary_search(numbers, 10))  # 输出: None</span><br></pre></td></tr></table></figure><p><br></p><hr><h2 id="抽象数据结构-ADT"><a href="#抽象数据结构-ADT" class="headerlink" title="抽象数据结构 (ADT)"></a><strong>抽象数据结构 (ADT)</strong></h2><p>13章我们说过，ADT是数据类型的数学模型。它从数据用户的角度来定义其行为的，特别是可能的值、对该类型数据的可能操作以及这些操作的行为。<br>例如，整数是一种 ADT，定义为…、-2、-1、0、1、2、…值，并可进行加、减、乘、除运算。用户可以使用抽象而非具体的表示方法。  </p><p><br></p><hr><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a><strong>链表</strong></h2><p>链表也是老朋友了。在这里我们会讲解有关于链表的各种操作：  </p><h3 id="创建链表"><a href="#创建链表" class="headerlink" title="创建链表"></a><strong>创建链表</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Node:</span><br><span class="line">    def __init__(self, data=None):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.next = None</span><br><span class="line"></span><br><span class="line">class LinkedList:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.head = None</span><br><span class="line"></span><br><span class="line">    def insert(self, data):</span><br><span class="line">        if not self.head:</span><br><span class="line">            self.head = Node(data)</span><br><span class="line">        else:</span><br><span class="line">            current = self.head</span><br><span class="line">            while current.next:</span><br><span class="line">                current = current.next</span><br><span class="line">            current.next = Node(data)</span><br><span class="line"></span><br><span class="line">    def print_list(self):</span><br><span class="line">        current = self.head</span><br><span class="line">        while current:</span><br><span class="line">            print(current.data)</span><br><span class="line">            current = current.next</span><br><span class="line"></span><br><span class="line"># 测试链表</span><br><span class="line">linked_list = LinkedList()</span><br><span class="line">linked_list.insert(1)</span><br><span class="line">linked_list.insert(2)</span><br><span class="line">linked_list.insert(3)</span><br><span class="line">linked_list.print_list()  # 输出: 1 2 3</span><br></pre></td></tr></table></figure><p>链表是一种线性数据结构，其中每个元素都是一个独立的对象，我们将其称为节点。<br>每个节点包含两个字段： 节点包含的“数据”和节点连接的下一个节点的“指针信息”。<br>“数据”字段存储节点应持有的任何类型的数据，“指针信息”字段存储指向列表中下一个节点的引用。  </p><p>下面我们来解释一下上面的代码：  </p><ol><li><p><strong>创建<code>Node</code>类</strong>：该类代表链表中的单个元素。每个节点有两个属性：</p><ul><li><code>data</code>：这个属性用来存储节点所持有的实际数据</li><li><code>next</code>：这是存储列表中下一个节点的引用。它初始值为 <code>None</code>，这意味着它不指向任何其他节点。</li></ul></li><li><p><strong>创建<code>LinkedList</code>类</strong>：该类表示整个链表。类中包含一个属性和两个方法：</p><ul><li><code>head</code>：这是指向列表中第一个节点的引用。它初始设置为 <code>None</code>，这意味着列表是空的。</li><li><code>insert</code>：该方法会在列表末尾插入一个新节点。如果列表为空（即 <code>self.head</code> 为 <code>None</code>），它将创建一个新节点，并设置 <code>self.head</code> 指向它。否则，它会遍历列表，直到找到最后一个节点（即 <code>node.next</code> 为 <code>None</code> 的节点），然后创建一个新节点，并设置 <code>last_node.next</code> 指向它。  </li><li><code>print_list()</code>：该方法会打印列表中存在的所有元素。它从 <code>self.head</code> 开始处理，沿着 <code>next</code> 引用从一个节点到下一个节点，打印每个节点的数据，直到到达 <code>node.next</code> 为 <code>None</code> 的节点。  </li></ul></li></ol><p>实际上也不难。  </p><p><br></p><hr><h3 id="向有序列表中添加节点"><a href="#向有序列表中添加节点" class="headerlink" title="向有序列表中添加节点"></a><strong>向有序列表中添加节点</strong></h3><p>功能会基于创建链表的代码逐步添加新的模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class Node:</span><br><span class="line">    def __init__(self, data=None):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.next = None</span><br><span class="line"></span><br><span class="line">class LinkedList:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.head = None</span><br><span class="line"></span><br><span class="line">    def insert_ordered(self, data):</span><br><span class="line">        if self.head is None:</span><br><span class="line">            self.head = Node(data)</span><br><span class="line">        elif data &lt; self.head.data:</span><br><span class="line">            new_node = Node(data)</span><br><span class="line">            new_node.next = self.head</span><br><span class="line">            self.head = new_node</span><br><span class="line">        else:</span><br><span class="line">            current = self.head</span><br><span class="line">            while current.next is not None and current.next.data &lt; data:</span><br><span class="line">                current = current.next</span><br><span class="line">            new_node = Node(data)</span><br><span class="line">            new_node.next = current.next</span><br><span class="line">            current.next = new_node</span><br><span class="line"></span><br><span class="line">    def print_list(self):</span><br><span class="line">        current = self.head</span><br><span class="line">        while current:</span><br><span class="line">            print(current.data)</span><br><span class="line">            current = current.next</span><br><span class="line"></span><br><span class="line"># 测试函数</span><br><span class="line">linked_list = LinkedList()</span><br><span class="line">linked_list.insert_ordered(3)</span><br><span class="line">linked_list.insert_ordered(1)</span><br><span class="line">linked_list.insert_ordered(2)</span><br><span class="line">linked_list.print_list()  # 输出: 1 2 3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个示例中，<code>insert_ordered</code> 函数将一个值作为输入。它创建了一个新节点，然后为这个节点在列表中找到正确的位置。<br>如果列表为空或新值小于头节点中的值，它就会将新节点插入列表的开头。否则，它会遍历列表，直到找到一个节点的值大于新值或到达列表的末尾，然后将新节点插入该节点之前。</p><p>详细解释一下：  </p><ul><li><p><strong>创建<code>Node</code>类</strong>：<code>Node</code>类跟之前创建链表的代码是完全一样的。  </p></li><li><p><strong>创建<code>LinkedList</code>类</strong>：其余也与之前一样，但是方法<code>insert_ordered()</code>主要管的就是节点的正确插入。它的实现方法如下：  </p></li></ul><ol><li><p><strong>空列表</strong>： 如果列表为空（<code>self.head 为 None</code>），则会创建一个新节点，并设置<code>self.head</code>指向它。这个新节点将成为列表中的第一个节点。</p></li><li><p><strong>在开头插入</strong>： 如果新节点的数据小于头部节点的数据（<code>data &lt; self.head.data</code>），则创建一个新节点，设置 <code>new_node.next</code> 指向当前的头部节点，然后更新 <code>self.head</code> 指向这个新节点。这实际上是将新节点插入列表的开头。</p></li><li><p><strong>在中间或末尾插入</strong>： 如果新节点的数据大于或等于头部节点的数据，则需要在列表的其余部分为该节点找到正确的位置。<br>为此，它会从 <code>self.head</code> 开始遍历列表。对于每个节点，它会检查 <code>current.next.data&lt;data</code>。<br>如果该条件为真，它就会继续检查下一个节点（<code>current = current.next</code>）。如果该条件为假（意味着已找到数据大于或等于 <code>data</code> 的节点），或者已到达列表的末尾（<code>current.next is None</code>），则停止迭代。<br>然后，它会将新节点插入该节点之前（如果已到达列表末尾，则插入列表末尾）。</p></li></ol><p><br></p><hr><h3 id="从链表中查找数据"><a href="#从链表中查找数据" class="headerlink" title="从链表中查找数据"></a><strong>从链表中查找数据</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class Node:</span><br><span class="line">    def __init__(self, data=None):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.next = None</span><br><span class="line"></span><br><span class="line">class LinkedList:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.head = None</span><br><span class="line"></span><br><span class="line">    def insert_ordered(self, data):</span><br><span class="line">        if self.head is None:</span><br><span class="line">            self.head = Node(data)</span><br><span class="line">        elif data &lt; self.head.data:</span><br><span class="line">            new_node = Node(data)</span><br><span class="line">            new_node.next = self.head</span><br><span class="line">            self.head = new_node</span><br><span class="line">        else:</span><br><span class="line">            current = self.head</span><br><span class="line">            while current.next is not None and current.next.data &lt; data:</span><br><span class="line">                current = current.next</span><br><span class="line">            new_node = Node(data)</span><br><span class="line">            new_node.next = current.next</span><br><span class="line">            current.next = new_node</span><br><span class="line"></span><br><span class="line">    def find_element(self, target):</span><br><span class="line">        current = self.head</span><br><span class="line">        while current:</span><br><span class="line">            if current.data == target:</span><br><span class="line">                return True</span><br><span class="line">            elif current.data &gt; target:</span><br><span class="line">                return False</span><br><span class="line">            current = current.next</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line"># 测试函数</span><br><span class="line">linked_list = LinkedList()</span><br><span class="line">linked_list.insert_ordered(1)</span><br><span class="line">linked_list.insert_ordered(2)</span><br><span class="line">linked_list.insert_ordered(3)</span><br><span class="line">print(linked_list.find_element(2))  # 输出: True</span><br><span class="line">print(linked_list.find_element(4))  # 输出: False</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>find_element</code> 函数将目标值作为输入，并负责元素的寻找。它从列表的首项开始，遍历每个节点。如果找到数据等于目标值的节点，则返回 <code>True</code>。如果找到数据大于目标值的节点（因为列表是有序的），则返回 <code>假</code>，因为它知道目标值不在列表中。<br>如果没有找到目标值就到达了列表的末尾，也会返回<code>假</code>。  </p><p>人话讲：该方法遍历一个有序链表，一旦发现数据等于目标节点（返回 <code>True</code>）或数据大于目标节点（返回 <code>False</code>），就立即停止。</p><p>我们来详细看一下<code>find_element</code>是怎么完成这一操作的：  </p><ol><li><strong>初始化</strong>： 该方法首先将 <code>current</code> 设置为列表的首项。 这是我们在循环的每次迭代中都要检查的节点。  </li><li><strong>循环</strong>： 只要 <code>current</code> 不是 <code>None</code>，<code>while</code> 循环就会继续。 换句话说，当我们找到目标或检查了列表中的所有节点后，循环就会停止。  </li><li><strong>检查是否相等</strong>： 在循环的每次迭代中，首先检查 <code>current</code> 节点的数据是否等于目标（<code>current. data == target</code>）。 如果相等，则返回 <code>True</code>，表示已在列表中找到目标。</li><li><strong>检查顺序</strong>： 如果 <code>current</code> 节点的数据不等于目标值，则检查它是否大于目标值（<code>current. data &gt; target</code>）。 如果是，则返回 <code>False</code>。 这是因为在有序链表中，如果我们遇到一个节点的值大于我们的目标值，我们就知道我们的目标值不可能出现在链表中更远的地方。</li><li><strong>移动到下一个节点</strong>： 如果上述两个条件都不满足（即 <code>current.data</code>小于 <code>target</code>），则移动到列表中的下一个节点（<code>current = current.next</code>）并重复上述过程。</li><li><strong>未找到目标</strong>： 如果已检查了列表中的所有节点，但仍未找到目标（即已退出 <code>while</code> 循环），则返回 <code>False</code>。</li></ol><p><br></p><hr><h3 id="从链表中删除节点"><a href="#从链表中删除节点" class="headerlink" title="从链表中删除节点"></a><strong>从链表中删除节点</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">class Node:</span><br><span class="line">    def __init__(self, data=None):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.next = None</span><br><span class="line"></span><br><span class="line">class LinkedList:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.head = None</span><br><span class="line"></span><br><span class="line">    def insert_ordered(self, data):</span><br><span class="line">        if self.head is None:</span><br><span class="line">            self.head = Node(data)</span><br><span class="line">        elif data &lt; self.head.data:</span><br><span class="line">            new_node = Node(data)</span><br><span class="line">            new_node.next = self.head</span><br><span class="line">            self.head = new_node</span><br><span class="line">        else:</span><br><span class="line">            current = self.head</span><br><span class="line">            while current.next is not None and current.next.data &lt; data:</span><br><span class="line">                current = current.next</span><br><span class="line">            new_node = Node(data)</span><br><span class="line">            new_node.next = current.next</span><br><span class="line">            current.next = new_node</span><br><span class="line"></span><br><span class="line">    def delete_node(self, target):</span><br><span class="line">        if self.head is None:</span><br><span class="line">            return</span><br><span class="line">        if self.head.data == target:</span><br><span class="line">            self.head = self.head.next</span><br><span class="line">            return</span><br><span class="line">        current = self.head</span><br><span class="line">        while current.next is not None and current.next.data != target:</span><br><span class="line">            current = current.next</span><br><span class="line">        if current.next is not None:</span><br><span class="line">            current.next = current.next.next</span><br><span class="line"></span><br><span class="line">    def print_list(self):</span><br><span class="line">        current = self.head</span><br><span class="line">        while current:</span><br><span class="line">            print(current.data)</span><br><span class="line">            current = current.next</span><br><span class="line"></span><br><span class="line"># 测试函数</span><br><span class="line">linked_list = LinkedList()</span><br><span class="line">linked_list.insert_ordered(1)</span><br><span class="line">linked_list.insert_ordered(2)</span><br><span class="line">linked_list.insert_ordered(3)</span><br><span class="line">linked_list.delete_node(2)</span><br><span class="line">linked_list.print_list()  # 输出: 1 3</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>delete_node</code> 函数将目标值作为输入。<br>它从列表的首项开始，遍历每个节点。如果找到一个数据等于目标值的节点，它就会调整前一个节点的 <code>next</code> 引用，使其指向下一个节点，从而有效地从列表中删除目标节点。如果在检查所有节点后仍未找到这样的节点，则不会执行任何操作。  </p><p>人话讲：此方法遍历一个有序链表，并删除一个数据等于 <code>target</code> 的节点。如果列表中不存在这样的节点，则不执行任何操作。</p><p>详细看一下<code>delete_node</code>的步骤：  </p><ol><li><p><strong>空列表</strong>： 该方法首先检查列表是否为空（<code>self.head is None</code>）。如果是，则退出方法，因为没有要删除的内容。  </p></li><li><p><strong>删除头部节点</strong>： 然后，它会检查头部节点是否是要删除的节点（<code>self.head.data == target</code>）。如果是，它就会更新 <code>self.head</code> 以指向列表中的下一个节点（<code>self.head = self.head.next</code>），从而有效地从列表中删除原来的头部节点。</p></li><li><p><strong>循环</strong>： 如果头节点不是要删除的节点，它就会进入一个循环，其中 <code>current</code> 从列表的头开始，只要 <code>current.next</code> 不是 <code>None</code> （即直到到达列表的末尾）且 <code>current.next.data</code> 不等于 <code>target</code> （即直到找到要删除的节点），就会沿着列表移动。</p></li><li><p><strong>删除节点</strong>： 如果它找到了下一个节点的数据等于 <code>target</code> 的节点（<code>current.next.data == target</code>），它就会更新 <code>current.next</code> 以指向下一个节点的下一个节点（<code>current.next = current.next.next</code>）。这实际上是从列表中删除了下一个节点（要删除的节点）。</p></li></ol><p><br></p><hr><h3 id="访问链表中的所有节点"><a href="#访问链表中的所有节点" class="headerlink" title="访问链表中的所有节点"></a><strong>访问链表中的所有节点</strong></h3><p>这个就相对简单一些了。思路就是按照指针的顺序，按照顺序访问每个节点，然后输出节点中的内容。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Node:</span><br><span class="line">    def __init__(self, data=None):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.next = None</span><br><span class="line"></span><br><span class="line">class LinkedList:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.head = None</span><br><span class="line"></span><br><span class="line">    def insert(self, data):</span><br><span class="line">        if not self.head:</span><br><span class="line">            self.head = Node(data)</span><br><span class="line">        else:</span><br><span class="line">            current = self.head</span><br><span class="line">            while current.next:</span><br><span class="line">                current = current.next</span><br><span class="line">            current.next = Node(data)</span><br><span class="line"></span><br><span class="line">    def print_list(self):</span><br><span class="line">        current = self.head</span><br><span class="line">        while current:</span><br><span class="line">            print(current.data)</span><br><span class="line">            current = current.next</span><br><span class="line"></span><br><span class="line"># 测试函数</span><br><span class="line">linked_list = LinkedList()</span><br><span class="line">linked_list.insert(1)</span><br><span class="line">linked_list.insert(2)</span><br><span class="line">linked_list.insert(3)</span><br><span class="line">linked_list.print_list()  # 输出: 1 2 3</span><br></pre></td></tr></table></figure><p>在本例中，<code>print_list</code> 函数从列表的首部开始，遍历每个节点，打印其数据。 它将继续执行，直到到达 <code>next</code> 为 <code>None</code> 的节点，表示已到达列表的末尾。 这样，它就访问并打印了列表中的所有节点。  </p><p><br></p><hr><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a><strong>二叉树</strong></h2><p>在计算机科学中，<strong>二叉树 (Binary tree )</strong>是一种被称之为k-ary的数据结构，其中每个节点最多有两个延伸出来的子节点。这些节点一般被叫做<strong>左子节点 (Left child)</strong>和<strong>右子节点 (Right child)</strong>。  </p><p>二叉树是递归定义的，这就意味着每一棵非空二叉树都由一个根节点和两个后代二叉树组成。  </p><p>下面是关于二叉树的一些要点和常识：  </p><ul><li>二叉树中最顶端的节点叫做<strong>根节点 (Root)</strong></li><li>二叉树中的每一个元素都叫做<strong>节点 (Node)</strong></li><li>每个节点<strong>最多有两个子节点</strong></li><li>子节点一般被叫做<strong>左子节点 (Left child)</strong>和<strong>右子节点 (Right child)</strong>，这个我们刚才说过。  </li><li>二叉树可用于许多计算机科学应用中，包括组织层次关系、管理有序数据以及作为抽象流程的工作流。</li></ul><p><img src="https://note.youdao.com/yws/api/personal/file/WEB2d2cda1d6dfdb4d7ad1386eff176368c?method=download&amp;shareKey=1d3e8b512293bbcd2289fdb637b74404" alt=""></p><p><br></p><p>要向有序二叉树增加一个节点，我们的步骤如下：  </p><ol><li><p><strong>从作为当前节点的根节点开始</strong>： 进程从树的根节点开始，也就是最顶端的节点。</p></li><li><p><strong>重复</strong>： 接下来重复这些条件：</p><ul><li><p><strong>如果数据值大于当前节点的数据值，则沿右分支</strong>： 在二叉树中，<strong>任何数据值大于其父节点的节点都会被置于右侧</strong>。因此，如果要插入的数据值大于当前节点的数据值，则应移动到当前节点的右侧子节点。</p></li><li><p><strong>如果数据值小于当前节点的数据值，则沿左侧分支</strong>： 相反，在二叉树中，<strong>任何数据值小于其父节点的节点都会被置于左侧</strong>。因此，如果要插入的数据值小于当前节点的数据值，就会移动到当前节点的左侧子节点。</p></li></ul></li><li><p><strong>直到当前节点没有分支可循</strong>： 继续在树中移动，直到到达一个在需要移动的方向上没有子节点的节点（即向左移动时没有左子节点，向右移动时没有右子节点）。这就是你要插入新节点的地方。</p></li><li><p><strong>在此位置添加新节点</strong>： 根据数据小于或大于当前节点的数据，创建一个包含数据的新节点，并将其作为当前节点的左子节点或右子节点插入。</p></li></ol><p>这个过程确保了左边的所有节点都小于其父节点，而右边的所有节点都大于其父节点，这就是有序或排序二叉树的原理。</p><p><br></p><hr><h3 id="创建二叉树"><a href="#创建二叉树" class="headerlink" title="创建二叉树"></a><strong>创建二叉树</strong></h3><p>我们可以使用Python来创建一个二分查找树：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Node:</span><br><span class="line">    def __init__(self, value):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = None</span><br><span class="line">        self.right = None</span><br><span class="line"></span><br><span class="line">class BinaryTree:</span><br><span class="line">    def __init__(self, root):</span><br><span class="line">        self.root = Node(root)</span><br><span class="line"></span><br><span class="line"># 初始化二叉树</span><br><span class="line">tree = BinaryTree(1)</span><br><span class="line">tree.root.left = Node(2)</span><br><span class="line">tree.root.right = Node(3)</span><br><span class="line">tree.root.left.left = Node(4)</span><br><span class="line">tree.root.left.right = Node(5)</span><br></pre></td></tr></table></figure><p>解释一下这段代码：</p><ul><li>我们首先定义了一个 <code>Node</code> 类，它将创建一个带值的节点，以及两个初始化为 <code>None</code> 的子节点。</li><li>然后，我们定义一个 <code>BinaryTree</code> 类，初始化为一个根节点。</li><li>最后，我们创建一棵名为 <code>tree</code> 的二叉树，根节点为 1，然后在根节点上添加左侧子节点 2 和右侧子节点 3。 然后，我们在根的左子节点上添加两个子节点 4 和 5。</li></ul><p>画出图来就像这样：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   3</span><br><span class="line"> / \</span><br><span class="line">4   5</span><br></pre></td></tr></table></figure><p>十分形象。  </p><p>我们详细来说一下实现步骤：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Node:</span><br><span class="line">def __init__(self, value):</span><br><span class="line">self. value = value</span><br><span class="line">self. left = None</span><br><span class="line">self. right = None</span><br></pre></td></tr></table></figure><p>先讲一下<code>Node</code>类的定义。每个<code>Node</code>对象都有三个属性:</p><ul><li><code>value</code>:节点持有的数据。</li><li><code>left</code>:指向节点的左子节点。</li><li><code>right</code>:指向节点的右子节点。</li></ul><p>而<code>__init__</code>方法是Python类中的一个特殊方法，当类的对象实例化时，它是自动调用的构造方法。在这个例子中，它用给定的值初始化一个节点，并将其左子节点和右子节点设置为<code>None</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class BinaryTree:</span><br><span class="line">def __init__(self, root):</span><br><span class="line">self. root = Node(root)</span><br></pre></td></tr></table></figure><p>在<code>BinaryTree</code>类的定义中，二叉树对象有一个属性:<code>root</code>，它是对树的根节点的引用。这里的<code>__init__</code>方法用根节点初始化一棵二叉树。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 初始化二叉树</span><br><span class="line">tree = BinaryTree(1)</span><br><span class="line">tree.root.left = Node(2)</span><br><span class="line">tree.root.right = Node(3)</span><br><span class="line">tree.root.left.left = Node(4)</span><br><span class="line">tree.root.left.right = Node(5)</span><br></pre></td></tr></table></figure><p>在这里，我们创建一个二叉树实例。 我们用一个包含值 1 的根节点来初始化它。<br>随后，我们通过创建新节点并将其赋值给 <code>tree.root.left</code> 和 <code>tree.root.right</code> 来为根节点添加左右两个子节点。<br>我们还将以类似的方式为根节点的左侧子节点添加两个子节点。  </p><p><br></p><hr><h3 id="向二叉树中添加一个新节点"><a href="#向二叉树中添加一个新节点" class="headerlink" title="向二叉树中添加一个新节点"></a><strong>向二叉树中添加一个新节点</strong></h3><p>在二叉树中，新节点可以根据一定的规则或标准插入某个位置。然而，在二分查找树（BST）中，节点会被插入到一个特定的位置，在这个位置上，节点左边的所有节点的值都小于该节点，而右边的所有节点的值都大于该节点。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class Node:</span><br><span class="line">    def __init__(self, value):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = None</span><br><span class="line">        self.right = None</span><br><span class="line"></span><br><span class="line">class BinaryTree:</span><br><span class="line">    def __init__(self, root):</span><br><span class="line">        self.root = Node(root)</span><br><span class="line"></span><br><span class="line">    def insert(self, value):</span><br><span class="line">        if self.root is None:</span><br><span class="line">            self.root = Node(value)</span><br><span class="line">        else:</span><br><span class="line">            self._insert(value, self.root)</span><br><span class="line"></span><br><span class="line">    def _insert(self, value, current_node):</span><br><span class="line">        if value &lt; current_node.value:</span><br><span class="line">            if current_node.left is None:</span><br><span class="line">                current_node.left = Node(value)</span><br><span class="line">            else:</span><br><span class="line">                self._insert(value, current_node.left)</span><br><span class="line">        elif value &gt; current_node.value:</span><br><span class="line">            if current_node.right is None:</span><br><span class="line">                current_node.right = Node(value)</span><br><span class="line">            else:</span><br><span class="line">                self._insert(value, current_node.right)</span><br><span class="line">        else:</span><br><span class="line">            print("Value already in tree!")</span><br><span class="line"></span><br><span class="line"># Initialize a tree</span><br><span class="line">tree = BinaryTree(5)</span><br><span class="line">tree.insert(3)</span><br><span class="line">tree.insert(7)</span><br><span class="line">tree.insert(1)</span><br><span class="line">tree.insert(4)</span><br></pre></td></tr></table></figure><p>在这段代码中，我们为原来的 <code>BinaryTree</code> 类新添加了一个 <code>insert</code> 方法，该方法将一个值作为输入。<br>如果树为空（即根节点为 <code>None</code>），它将用给定的值创建一个新的 <code>Node</code>，并将其赋值给根节点。如果树不为空，则调用 <code>_insert</code> 方法。  </p><p><code>_insert</code> 方法是一个辅助方法，用于为新节点找到正确的位置。<br>它是一个递归方法，用于比较要插入的值和当前节点的值。具体步骤如下：  </p><ul><li>如果待插入的值小于当前节点的值，就会插入左侧子节点。  如果左侧子节点为 <code>None</code>，则在此处插入新节点。否则，它会再次调用 <code>_insert</code>，将左侧子节点作为新的当前节点。</li><li>如果待插入的值大于当前节点的值，则转到右侧子节点。如果右侧子节点为 <code>None</code>，则在此处插入新节点。否则，它会再次调用 <code>_insert</code>，并将右侧子节点作为新的当前节点。</li><li>如果值等于当前节点的值，则会打印一条信息，说明该值已在树中，而不会插入。</li></ul><p>这样就能在二分查找树中，当插入新节点时保持它的特性不变了。</p><p><br></p><hr><h3 id="在二叉树中寻找指定节点"><a href="#在二叉树中寻找指定节点" class="headerlink" title="在二叉树中寻找指定节点"></a><strong>在二叉树中寻找指定节点</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Node:</span><br><span class="line">    def __init__(self, value):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = None</span><br><span class="line">        self.right = None</span><br><span class="line"></span><br><span class="line">class BinaryTree:</span><br><span class="line">    def __init__(self, root):</span><br><span class="line">        self.root = Node(root)</span><br><span class="line"></span><br><span class="line">    def find(self, value):</span><br><span class="line">        if self.root is None:</span><br><span class="line">            return "二叉树为空。"</span><br><span class="line">        else:</span><br><span class="line">            return self._find(value, self.root)</span><br><span class="line"></span><br><span class="line">    def _find(self, value, current_node):</span><br><span class="line">        if value == current_node.value:</span><br><span class="line">            return "已发现匹配值"</span><br><span class="line">        elif value &lt; current_node.value and current_node.left is not None:</span><br><span class="line">            return self._find(value, current_node.left)</span><br><span class="line">        elif value &gt; current_node.value and current_node.right is not None:</span><br><span class="line">            return self._find(value, current_node.right)</span><br><span class="line">        return "未发现匹配值"</span><br><span class="line"></span><br><span class="line"># 初始化二叉树</span><br><span class="line">tree = BinaryTree(5)</span><br><span class="line">tree.root.left = Node(3)</span><br><span class="line">tree.root.right = Node(7)</span><br><span class="line">tree.root.left.left = Node(1)</span><br><span class="line">tree.root.left.right = Node(4)</span><br><span class="line"></span><br><span class="line"># 在二叉树中寻找特定值</span><br><span class="line">print(tree.find(7))  # 输出: "已找到匹配值"</span><br><span class="line">print(tree.find(2))  # Output: "未找到匹配值"</span><br></pre></td></tr></table></figure><p>为了添加寻找节点功能，在这段代码中，我们为我们的 <code>BinaryTree</code> 类添加了一个 <code>find</code> 方法，该方法将一个值作为输入。<br>如果树为空（即根为 <code>None</code>），它将返回一条信息，说明树为空。如果树不为空，则调用 <code>_find</code>方法。  </p><p><code>_find</code> 方法是一个辅助方法，用于查找具有给定值的节点。它是一个递归方法，用于比较要查找的值和当前节点的值：</p><ul><li>如果值等于当前节点的值，则返回一条信息，说明已找到该值。</li><li>如果值小于当前节点的值，且左侧子节点不是 <code>None</code>，则再次调用 <code>_find</code>，并将左侧子节点作为新的当前节点。</li><li>如果值大于当前节点的值，且右侧子节点不是 <code>None</code>，则再次调用 <code>_find</code>，并将右侧子节点作为新的当前节点。</li><li>如果这些条件都不满足，则表示在树中没有找到该值，并返回一条信息说明这一点。  </li></ul><p>这将在二分查找树中查找给定值。</p><p><br></p><hr><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a><strong>栈</strong></h2><p>我们早在AS部分就已经接触过栈了。接下来我们来简单复习一下栈的性质。  </p><p>栈是一种作为元素集合的抽象数据类型，栈主要有两种操作：  </p><ul><li><strong>Push 推入</strong>：也就是向集合压进元素。</li><li><strong>Pop 弹出</strong>：弹出最近添加但尚未删除的元素。  </li></ul><p>元素加入栈或从栈中移除的顺序被描述为<strong>后进先出 (Last in first out, LIFO)</strong>。这种结构使得从栈顶移除一个项目非常容易，但要访问栈中较深的数据可能需要先移除多个其他项目。  </p><p>我们会声明一个<code>TopOfStack</code>指针变量，用来跟踪栈顶元素。它的值根据在栈上执行的操作而变化。  </p><ul><li>当向栈中推入一个新元素时，<code>TopOfStack</code> 会更新为指向这个新元素。</li><li>当从栈中弹出一个元素时，<code>TopOfStack</code> 会更新为指向栈中的下面一个元素。</li><li>如果栈是空的，<code>TopOfStack</code> 可能会被设置为一个特殊值，如<code>-1</code>，以表示没有顶层元素。  </li></ul><p>例如，如果要将栈作为数组来实现，一开始可以将 <code>TopOfStack</code> 设为 <code>-1</code>，以表示栈是空的。当向栈中推入一个元素时，<code>TopOfStack</code> 会递增 1；当从栈中弹出一个元素时，<code>TopOfStack</code> 会递减 1。  </p><p><br></p><hr><h3 id="栈的创建，压入和弹出"><a href="#栈的创建，压入和弹出" class="headerlink" title="栈的创建，压入和弹出"></a><strong>栈的创建，压入和弹出</strong></h3><p>Python内置的List数据类型可以很轻松的让我们创建一个栈：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 初始化栈</span><br><span class="line">stack = []</span><br><span class="line"></span><br><span class="line"># 向栈中压入元素</span><br><span class="line">stack.append("Apple")</span><br><span class="line">stack.append("Banana")</span><br><span class="line"></span><br><span class="line"># 从栈中弹出元素</span><br><span class="line">print(stack.pop())  # 输出: "Banana"</span><br></pre></td></tr></table></figure><p>在这段代码中，我们初始化一个空列表作为栈。<br>我们使用列表的<code>append</code>方法将元素压入栈中，使用<code>pop</code>方法将元素从栈中弹出。<br>最后添加的元素是第一个弹出的元素，这与栈的LIFO行为一致。  </p><p><br></p><hr><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a><strong>队列</strong></h2><p>在计算机中，<strong>队列 (Queue)</strong>是一种遵循<strong>先进先出 (First in first out, FIFO)</strong>原则的线性数据结构。这意味着第一个添加到队列的元素将是第一个被删除的元素。你可以把它想象成一排等待服务的人，等待时间最长的人(排队的第一个人)是下一个被服务的人。相比于栈来说，这是比较符合直觉的。  </p><p>在队列中，我们会定义两个指针类型变量： <code>FountOfQueuePointer</code>和<code>EndOfQueuePointer</code>，分别用来追踪队列中的第一个和最后一个元素：    </p><ul><li><code>FrontOfQueuePointer</code>始终指向队列中的第一个元素，它是下一个要从队列中删除的元素。这是因为在队列中，删除操作发生在最前面。</li><li><code>EndOfQueuePointer</code>始终指向队列中的最后一个元素。当一个新元素被添加(或“加入”)到队列中时，它会被添加到队列的末尾，所以<code>EndOfQueuePointer</code>会递增指向这个新元素。  </li></ul><p>队列还存在所谓“环绕的可能性”。<br>这指的是循环队列（一种最后一个元素指向第一个元素的队列）中的一种情况，在这种情况下，如果将 <code>EndOfQueuePointer</code> 的增量超出底层数组的终点，就会导致它绕到数组的起点。 同样，将 <code>FrontOfQueuePointer</code> 递减到数组开头之后，也会使其绕到数组结尾。 这样就可以重复使用数组中之前被从队列中删除的元素占据的位置，从而有效地利用空间。  </p><p>常规队列和环绕型队列如下所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB8b60aee54b0ff92ba7d26079e71c28ed?method=download&amp;shareKey=c5fe2e70395fe4a2a87200867755e063" alt="">  </p><p><br></p><hr><h3 id="队列的创建，压入和弹出"><a href="#队列的创建，压入和弹出" class="headerlink" title="队列的创建，压入和弹出"></a><strong>队列的创建，压入和弹出</strong></h3><p>Python的列表数据形式也同样支持我们去简单的声明并操作一个队列：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 初始化队列</span><br><span class="line">queue = []</span><br><span class="line"></span><br><span class="line"># 向队列内加入元素</span><br><span class="line">queue.append("Apple")</span><br><span class="line">queue.append("Banana")</span><br><span class="line"></span><br><span class="line"># 从队列内弹出元素</span><br><span class="line">print(queue.pop(0))  # 输出: "Apple"</span><br></pre></td></tr></table></figure><p>在这段代码中，我们初始化一个空列表作为队列。<br>我们使用列表的<code>append</code>方法将项目加入到队列中，并使用<strong>参数为0的<code>pop</code>方法</strong>将项目从队列中取出。这里的参数决定了这个列表是一个队列，而不是一个栈。<br>添加的第一个元素就是第一个删除的元素，这与队列的FIFO行为是一致的。  </p><p><br></p><hr><h2 id="图表"><a href="#图表" class="headerlink" title="图表"></a><strong>图表</strong></h2><p>在计算机科学中，<strong>图表 (Graphs)</strong>是由顶点(或者节点)和边组成的抽象数据类型，用于实现数学中图理论领域的无向图和有向图概念，或者简单来说：记录事物之间的关系。   </p><p>图表是一种基本数据结构，它对一组对象（称为节点或顶点）以及它们之间的关系（称为边或弧）进行建模。  </p><p>图表也可以描述AI，但是在这里我们不讨论。如果需要了解这部分的内容就前往22章简单一看吧。<br>下面的图表表示伦敦地铁地图的一小部分：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB1e591ab087f1c7bf6f2829597e4bfbbf?method=download&amp;shareKey=68eeffc7a87259b6d08ab9971eb0caf4" alt=""></p><p>从A到F的所有顶点表示地铁站，而连接线表示连接地铁站的铁路线。<br>例如，你可以直接从B乘火车到D。要从B乘火车到F，你必须经过C或E。由边连接的两个顶点被称为<strong>邻居 (Neighbours)</strong>。  </p><p>同时，你也可以在连接线上加入标签，也就是权重。在我们的这个实例中，我们可以使用权重来表示站点之间的旅行时间：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBed46bc816951caaf87533527859a2497?method=download&amp;shareKey=ca32533cb3e73661b5244396e5a34347" alt="">  </p><p>节点之间的连接线可以是有向的，也可以是无向的：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB2a70cdc74196bdc4b8b4914973664f22?method=download&amp;shareKey=15befb1d71be8f99f560669d08694c39" alt=""></p><p><br></p><p>在计算机内存中，有两种常见的图表示方法：<strong>邻接矩阵 (Adjacency matrix)</strong>和<strong>邻接表 (Adjacency list)</strong>。  </p><p>邻接矩阵是大小为 V x V 的二维数组，其中 V 是图中的顶点数。<br>每一行和每一列代表一个顶点。如果矩阵中第 i 行和第 j 列的元素值为 1，则表示第 i 个顶点和第 j 个顶点之间有一条边。反之，如果值为0，则表示两个顶点之间没有连接。这种表示方法仅适用于无权重图表。 </p><p>而对于加权图表，边有相关的权重或成本，这些权重会直接写在对应的表格内。比如说第 i 个顶点和第 j 个顶点之间有链接，并且权重为5，那么矩阵中第 i 行和第 j 列的元素值为 5。<br>如果顶点之间没有边，我们通常会用一个很大的数字（通常用无穷符号∞表示）来代替 0，以表示这两个节点之间没有直接路径。  </p><p>下面是分别是无权图表和加权图表的邻接矩阵的实例：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB6ad152e5c63fb26dd2c4523c0861bf19?method=download&amp;shareKey=1583bbda1fa2ab15a32fb08c3f8c2eae" alt=""></p><p><br></p><p>刚才提到过的邻接表是表示图形的另一种方法。  </p><p>在邻接列表表示法中，我们在图形对象中保留了一个包含所有顶点的主列表，然后图形中的每个顶点对象都保留了一个与其相连的其他顶点的列表。在邻接表中，每个顶点都有一个相邻顶点的列表。这非常适合需要遍历每个顶点的邻接顶点时使用，因为可以高效地访问邻接顶点集。  </p><p>解释的有些抽象，我们直接看下面这个邻接表的实例吧：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBea3ebc99b970c2b6eab8c8058ca2f606?method=download&amp;shareKey=56fc19134bc34f53c52fcca3b2139182" alt="">  </p><p>图表中的内容代表：  </p><ul><li>A与B和D相连</li><li>B与A,C,D,E相连</li><li>C与B和F相连</li><li>D与A,B,E相连</li><li>E与B,D,F相连</li><li>F与C,E相连</li></ul><p>不难看出这个邻接表展示了一个无权重的图表的节点之间的关系。如果需要表示节点之间的权重，就会像下图一样：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBbbd6fdd340c9487644095c2592dd31f7?method=download&amp;shareKey=155d472a5ef05bfc7620c0de30daad0f" alt=""></p><p>道理还是一样，不过加了个权重而已。  </p><p>第一行代表：“A与B相连，权重为3；A与D相连，权重为5”  </p><p><br></p><hr><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a><strong>哈希表</strong></h2><p><strong>哈希表 (Hash table)</strong>，也叫散列表，是一种实现关联数组抽象数据类型的数据结构，是一种可以将键映射到值的结构。<br>它使用哈希函数来计算一个进入桶或槽数组的索引，从中可以找到所需的值。<br>哈希表背后的主要理念是，它提供了对存储在数组中的记录的直接访问。这是通过使用记录的键值计算出一个地址（数组索引），然后将记录存储在这个计算出的地址上。<br>当你想搜索一条记录时，你可以再次使用键值来计算地址，然后直接到这个地址去查找记录。这种通过密钥计算地址的过程被称为<strong>散列 (Hashing)</strong>。  </p><p><br></p><hr><h3 id="哈希表的创建，添加元素，与查找"><a href="#哈希表的创建，添加元素，与查找" class="headerlink" title="哈希表的创建，添加元素，与查找"></a><strong>哈希表的创建，添加元素，与查找</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个简单的散列函数</span><br><span class="line">def hash_function(key):</span><br><span class="line">    return key % 5</span><br><span class="line"></span><br><span class="line"># 初始化一个空哈希表</span><br><span class="line">hash_table = [None] * 5</span><br><span class="line"></span><br><span class="line"># 向哈希表中添加元素</span><br><span class="line">keys = [15, 30, 45]</span><br><span class="line">values = ["Apple", "Banana", "Cherry"]</span><br><span class="line">for i in range(len(keys)):</span><br><span class="line">    address = hash_function(keys[i])</span><br><span class="line">    hash_table[address] = values[i]</span><br><span class="line"></span><br><span class="line"># 从哈希表中搜索元素</span><br><span class="line">key_to_search = 30</span><br><span class="line">address = hash_function(key_to_search)</span><br><span class="line">print(hash_table[address])  # Output: "Banana"</span><br></pre></td></tr></table></figure><p>我们来简单解释一下这写代码：  </p><p>在函数<code>hash_function</code>中，我们创建了一个简单的哈希函数。它接收一个值，然后返回该值除以 5 的余数。这会输出在0-4区间内的一个值。这个值会用来计算哈希表中我们要存储或查找值的索引。  </p><p><code>hash_table = [None] * 5</code> 将一个空的哈希表初始化为一个包含 <code>None</code> 值的列表。该<strong>列表的长度（5）应与散列函数返回的可能值范围相同</strong>。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keys = [15, 30, 45]</span><br><span class="line">values = ["Apple", "Banana", "Cherry"]</span><br><span class="line">for i in range(len(keys)):</span><br><span class="line">    address = hash_function(keys[i])</span><br><span class="line">    hash_table[address] = values[i]</span><br></pre></td></tr></table></figure><p>在本节中，我们将向哈希表中插入一些内容，我们将这些内容叫做<strong>记录 (Record)</strong>。<br>我们有两个列表：<code>keys</code>（包含记录的键）和 <code>values</code>（包含相应的值）。我们遍历这些列表，使用散列函数计算每个键的地址，并将每个值存储在散列表中计算出的地址处。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key_to_search = 30</span><br><span class="line">address = hash_function(key_to_search)</span><br><span class="line">print(hash_table[address])  # Output: "Banana"</span><br></pre></td></tr></table></figure><p>最后，我们要搜索带有给定键的记录。<br>我们使用哈希函数计算出这个键的地址，并输出存储在哈希表中这个地址的值。<br>在本例中，我们要查找的是键 “30”，它的散列地址是 “0”，在散列表的这个地址上，我们可以找到值<code>Banana</code>。  </p><p><br></p><hr><h2 id="词典"><a href="#词典" class="headerlink" title="词典"></a><strong>词典</strong></h2><p>在计算机科学中，<strong>词典 (Dictionary)</strong>也称为<strong>映射 (Map)</strong>，是一种用于存储键值对的数据结构，类似于现实世界中的词典。<br>键用于查找相关的值，就像在现实世界的词典中查找单词的定义一样。  </p><p>词典可以使用各种数据结构来实现，哈希表就是其中之一。哈希表使用哈希函数来计算的索引，从中可以找到所需的值。这样就可以使用键值高效地直接访问检索值。  </p><p>例如，如果您有一本将英语单词翻译成法语的词典，您可以将英语单词作为键，将法语翻译作为值。如果将该词典作为哈希表来实现，则可以通过将英语单词作为键，快速高效地查找任何给定英语单词的法语翻译。   </p><p><br></p><hr><h3 id="词典的创建与操作"><a href="#词典的创建与操作" class="headerlink" title="词典的创建与操作"></a><strong>词典的创建与操作</strong></h3><p>VB.NET和Java都有内置的词典数据类型，但是他们看起来好像都很复杂。  </p><p>好在Python也存在内置的词典数据类型：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 创建词典</span><br><span class="line">english_french_dict = {</span><br><span class="line">    "hello": "bonjour",</span><br><span class="line">    "goodbye": "au revoir",</span><br><span class="line">    "please": "s'il vous plaît",</span><br><span class="line">    "thank you": "merci",</span><br><span class="line">    "yes": "oui",</span><br><span class="line">    "no": "non"</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"># 访问词典中的数据</span><br><span class="line">print(english_french_dict["hello"])  # 输出: "bonjour"</span><br><span class="line"></span><br><span class="line"># 向词典中加入新的值</span><br><span class="line">english_french_dict["sorry"] = "désolé"</span><br><span class="line"></span><br><span class="line"># 从词典中移除值</span><br><span class="line">del english_french_dict["goodbye"]</span><br><span class="line"></span><br><span class="line"># 检查一个值是否在词典里</span><br><span class="line">print("please" in english_french_dict)  # 输出: True</span><br><span class="line"></span><br><span class="line"># 取出词典中所有元素的索引</span><br><span class="line">print(english_french_dict.keys())  # 输出: dict_keys(['hello', 'please', 'thank you', 'yes', 'no', 'sorry'])</span><br><span class="line"></span><br><span class="line"># 取出词典中所有的元素</span><br><span class="line">print(english_french_dict.values())  # 输出: dict_values(['bonjour', "s'il vous plaît", 'merci', 'oui', 'non', 'désolé'])</span><br></pre></td></tr></table></figure><p>挺简单的，代码我就不解释了。  </p><p><br></p><hr><h2 id="时间复杂度与大O符号"><a href="#时间复杂度与大O符号" class="headerlink" title="时间复杂度与大O符号"></a><strong>时间复杂度与大O符号</strong></h2><p>大O符号是一种数学符号，用于描述当参数趋向特定值或无穷大时函数的极限行为。<br>在计算机科学中，它用于根据算法对输入大小变化的反应（时间复杂度）对算法进行分类。  </p><p>我们来设想一个线性搜索算法。线性搜索算法的时间复杂度为 O(n)。这是因为在最坏的情况下（正在搜索的项目位于列表的末尾），运行算法所需的时间与输入的大小呈线性增长。这意味着，如果将列表的大小增加一倍，最坏情况下的时间也将大致增加一倍。  </p><p>值得注意的是，大O符号通常描述的是最坏情况，因为它提供了时间要求的上限，通常比最佳或平均情况更重要。不过，在某些情况下，平均情况或最佳情况也可以用大O符号来描述。</p><p><br></p><p>我们来考虑计算一下冒泡排序的时间复杂度：  </p><p>冒泡排序是一种简单的排序算法，它重复通过列表，比较相邻的元素，如果顺序错误，则交换它们。重复通过列表，直到列表排序完毕。  </p><p>最坏情况下，冒泡排序的时间复杂度为 O(n^2)。原因如下：</p><ul><li>在第一次通过列表时，冒泡排序会进行 n-1 次比较，其中 n 是列表中元素的个数。这是因为它会对每一对相邻元素进行比较（n 元素为 n-1 对）。</li><li>在第二次排序时，由于最大的元素已经在第一次排序的正确位置上，所以要进行 n-2 次比较。</li><li>这种情况一直持续到最后一次，只进行 1 次比较。</li></ul><p>因此，在最坏的情况下，泡泡排序所做的比较总数是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="33.029ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 14598.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1211.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2211.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2711.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mstyle" transform="translate(3100.4,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mo" transform="translate(3489.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mstyle" transform="translate(4267.7,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mo" transform="translate(4656.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5045.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5868.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(6868.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(7368.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mstyle" transform="translate(7757.3,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mo" transform="translate(8146.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mstyle" transform="translate(8924.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mo" transform="translate(9313.8,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mstyle" transform="translate(10485.8,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mo" transform="translate(10875,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mstyle" transform="translate(11653,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mn" transform="translate(12042.2,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mstyle" transform="translate(12542.2,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mo" transform="translate(12931.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mstyle" transform="translate(13709.4,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mn" transform="translate(14098.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>，这个总和等于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="6.204ex" height="3.15ex" role="img" focusable="false" viewBox="0 -1047.1 2742.3 1392.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(989,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1589,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2367,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2867,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(1194.4,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="2502.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container>，简化为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="13.007ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 5749 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g><g data-mml-node="msup" transform="translate(1278,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(633,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mstyle" transform="translate(2314.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mo" transform="translate(2703.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mstyle" transform="translate(3481.8,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mn" transform="translate(3871,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g><g data-mml-node="mi" transform="translate(5149,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> 。  </p><p>当我们讨论时间复杂度和大O符号时，我们感兴趣的是运行时间是如何随着输入大小的增长而增长的。<br>因此，我们取最高阶项（即 n^2），忽略常数和低阶项。这就是为什么我们说冒泡排序的最坏情况时间复杂度为 O(n^2)。这意味着，如果将列表的大小增加一倍，最坏情况下的时间大约会翻两番。如果将列表的大小增加两倍，最坏情况下的时间将增加约 9 倍。以此类推。  </p><p>下面这张表格展示了不同的大O符号代表了哪些算法：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">Order of growth</th><th style="text-align:left">Example</th><th style="text-align:left">Explanation</th></tr></thead><tbody><tr><td style="text-align:left">O(1)</td><td style="text-align:left"><code>FUNCTION GetFirstItem(List : ARRAY); RETURN List[1]</code></td><td style="text-align:left">算法的复杂度不会随数据集的大小而改变</td></tr><tr><td style="text-align:left">O(n)</td><td style="text-align:left">线性搜索<br>在已排序的列表上执行Bubble soft</td><td style="text-align:left">这些算法呈线性增长</td></tr><tr><td style="text-align:left">O(Log2(n))</td><td style="text-align:left">二分搜索</td><td style="text-align:left">随着数据集大小的增加，所花费的总时间也会增加，但每次比较都会将数据集减半。所以所用的时间增加的幅度较小，接近常数时间。</td></tr><tr><td style="text-align:left">O(n^2)</td><td style="text-align:left">冒泡排序<br>插入排序</td><td style="text-align:left">以平方速度增长<br>这在涉及数据集上嵌套迭代的算法中很常见</td></tr><tr><td style="text-align:left">O(n^3)</td><td style="text-align:left"></td><td style="text-align:left">以次方速度增长<br>常见于嵌套算法</td></tr><tr><td style="text-align:left">O(2^n)</td><td style="text-align:left">斐波那契数的递归计算</td><td style="text-align:left">指数速度增长</td></tr></tbody></table></div><p><br></p><hr><h1 id="第二十四章：递归"><a href="#第二十四章：递归" class="headerlink" title="第二十四章：递归"></a><strong>第二十四章：递归</strong></h1><p>在计算机科学中，<strong>递归例程 (Recursive routine)</strong>或<strong>递归 (Recursive)</strong>是一种解决问题的方法，其解决方案取决于同一问题较小实例的解决方案。<br>它涉及函数在某些条件为真时调用自身。<br>这个过程一直持续到满足某个条件为止，这个条件通常称为<strong>基例 (Base case)</strong>或停止条件。<br><strong>一般情况 (General case)</strong>，也称为递归情况 ()是指导致函数不断调用自身的情况。  </p><article class="message is-info"><div class="message-body"><b>Base case: an explicit solution to a recursive function</b><br><b>General case: a definition of a recursive function in terms of itself</b></div></article> <p>递归在编程中用于解决可分解为更简单、类似子问题的问题。它是计算机科学的核心思想之一。大多数计算机编程语言都支持递归，允许函数在自己的代码中调用自己。  </p><p>下面是 Python 中一个简单的递归函数示例，用于计算一个数字的阶乘：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def factorial(n):</span><br><span class="line">    if n == 0:  # 基本情况</span><br><span class="line">        return 1</span><br><span class="line">    else:  # 一般情况</span><br><span class="line">        return n * factorial(n-1)</span><br></pre></td></tr></table></figure><p>在这段代码中，<code>factorial</code> 是一个调用自身的递归函数。它一直这样做，直到达到基值（当 <code>n</code> 为 0 时），这时它开始将结果返回到调用栈。  </p><p><br></p><h2 id="编写递归子程序"><a href="#编写递归子程序" class="headerlink" title="编写递归子程序"></a><strong>编写递归子程序</strong></h2><p>当编写递归子程序时，我们需要考虑以下几点，或者说按照以下步骤来编写程序：  </p><ol><li><p><strong>确定基例</strong>：基例是允许递归停止的条件。它是最简单的情况，可以直接求解，无需进一步递归。例如，在计算一个数字的阶乘的函数中，基例是当数字为 0 或 1 时，因为 0 和 1 的阶乘是 1。  </p></li><li><p><strong>定义一般情况</strong>：一般情况是指函数以问题的较简单版本调用自身。其定义方式应使每次递归调用都更接近基例。  </p></li><li><p><strong>递归计算</strong>：每次递归调用都应使你更接近一般情况。如果做不到这一点，就会出现无限递归，最终导致栈溢出错误。  </p></li><li><p><strong>返回值</strong>：确保函数正确返回值。在递归函数中，你通常会返回递归调用的结果，可能还会进行一些额外的计算。</p></li></ol><p><br></p><p>举一个例子吧。  </p><p>使用递归编程解决实际问题的一个经典例子就是斐波那契数列的计算。<br>斐波那契数列是一个数列，其中一个数是前两个数的和，通常从 0 和 1 开始。<br>下面是一个使用递归计算第 n 个斐波那契数的 Python 函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def fibonacci(n):</span><br><span class="line">    if n &lt;= 0:</span><br><span class="line">        return "输入值必须为正整数"</span><br><span class="line">    elif n == 1:</span><br><span class="line">        return 0  # 基例1</span><br><span class="line">    elif n == 2:</span><br><span class="line">        return 1  # 基例2</span><br><span class="line">    else:  # 一般情况</span><br><span class="line">        return fibonacci(n-1) + fibonacci(n-2)</span><br></pre></td></tr></table></figure><p>在此函数中：</p><ul><li>当 <code>n</code> 为 1 或 2 时，对应两个基例。斐波那契数列的前两个数是 0 和 1，因此如果 <code>n</code> 是 1，函数返回 0，如果 <code>n</code> 是 2，函数返回 1。</li><li>一般情况是 <code>fibonacci(n-1)+ fibonacci(n-2)</code>。这符合斐波那契数列中每个数字都是前两个数字之和的规则。这使我们更接近基本情况，因为每次递归调用都在递减 <code>n</code>。</li><li>在一般情况下，我们将返回 <code>fibonacci(n-1) + fibonacci(n-2)</code>，而在基例下，我们将返回 <code>0</code> 或 <code>1</code>。</li></ul><p><br></p><hr><h1 id="第二十五章：编程范式"><a href="#第二十五章：编程范式" class="headerlink" title="第二十五章：编程范式"></a><strong>第二十五章：编程范式</strong></h1><p>编程范式是一种基本的编程风格。每种范式都支持不同的思考和解决问题的方式。编程语言的功能支持各种范式。<br>有些编程语言支持不止一种范式。有许多不同的范式，有些还相互重叠。以下是几种不同的范式。</p><article class="message is-info"><div class="message-body"><b>Programming paradigm: A fundamental style of programming</b></div></article> <p><br></p><hr><h2 id="低级编程语言范式"><a href="#低级编程语言范式" class="headerlink" title="低级编程语言范式"></a><strong>低级编程语言范式</strong></h2><p>低级编程语言更接近机器语言，也就是计算机硬件能理解的基本语言。这些语言允许程序员直接操作内存地址和寄存器的内容。这意味着你可以精确控制程序与系统硬件的交互方式。  </p><p>特定处理器的架构是指其设计和执行指令的方式。不同的处理器有不同的架构，因此需要不同的编程语言。例如，英特尔处理器系列使用 x86 指令集。  </p><p>用低级模式编程时，解决问题的方式与高级模式不同。高级语言旨在方便人类读写，它们抽象掉了机器（计算机硬件）的许多复杂性。另一方面，低级编程更为复杂，需要更深入地了解计算机硬件的工作原理。  </p><p>不过，低级编程能让你更有效地控制程序的性能，并能针对特定的硬件配置优化代码。这就是低级编程常用于编写操作系统或开发嵌入式系统等任务的原因。</p><p>所以，<strong>低级编程语言可以直接访问计算机硬件</strong>，但需要对系统架构有更详细的了解。<strong>低级编程语言可以更好地控制程序的性能</strong>，但与高级语言相比，它们也需要不同的解决问题的方法。</p><p><br></p><hr><h2 id="命令式编程范式"><a href="#命令式编程范式" class="headerlink" title="命令式编程范式"></a><strong>命令式编程范式</strong></h2><p><strong>命令式编程 (Imperative programming)</strong>是另一种编程范式，在这种编程范式中，你编写的程序是一连串明确的步骤或指令，计算机必须按照这些步骤或指令实现预期的结果。<br>这与声明式编程形成鲜明对比，在声明式编程中，你只需描述所需的结果，计算机就能找出实现的方法。  </p><p>换句话说，在命令式编程中，你是在告诉计算机<strong>如何</strong>做某事。例如，如果你要做一个三明治，那么命令式编程就需要一步一步地发出指令，如 “拿两片面包”、”在一片面包上涂黄油”、”在另一片面包上放火腿 “等等。但是，在声明式编程中，你是在告诉计算机你<strong>想要</strong>做什么。再以三明治为例，声明式编程方法就是简单地说 “我想要一个火腿三明治”，然后由计算机（或三明治制作者）找出实现这一目标所需的步骤。  </p><p>程序设计是命令式程序设计的一种，程序围绕程序或例程（也称为子程序或函数）构建。主程序调用这些过程来执行任务。每个过程都是一组执行特定任务的指令。</p><p>支持命令式编程的语言有很多。例如 Pascal、C 和 Basic。这些语言提供了定义变量和函数的结构，以及控制执行流程的结构（如循环和条件语句），这些都是命令式编程范式的关键要素。</p><p><br></p><hr><h2 id="面向对象的编程语言范式"><a href="#面向对象的编程语言范式" class="headerlink" title="面向对象的编程语言范式"></a><strong>面向对象的编程语言范式</strong></h2><p><strong>面向对象编程 (Object-oriented programming, OOP)</strong>是一种基于 “对象 “概念的编程范式。对象是类的实例，可以包含数据（以字段的形式，也称为属性）和代码（以过程的形式，也称为方法）。在 OOP 中，对象之间通过交互来执行任务。这种方法更易于管理大型程序的复杂性，使代码更易于重复使用和维护。</p><p>许多编程语言最初是为命令式编程而设计的，现在已经扩展到支持 OOP。例如，Pascal 以 Delphi 或 Object Pascal 的名称进行了扩展，以支持 OOP。同样，Visual Basic 也被扩展为支持 OOP，.NET 版本是第一个完全面向对象的版本。</p><p>还有一些语言从一开始就被设计成面向对象的。Python 和 Java 就是这样的两种语言。这些语言提供了类、对象、继承和多态等功能，这些都是面向对象编程范式的关键要素。</p><p><br></p><hr><h2 id="声明式编程语言范式"><a href="#声明式编程语言范式" class="headerlink" title="声明式编程语言范式"></a><strong>声明式编程语言范式</strong></h2><p>Pascal、VB 和 Python 等命令式编程语言之所以被称为<strong>命令式编程语言 (Imperative programming language)</strong>，是因为它们采用循序渐进的方法来解决问题。在这些语言中，程序员编写一系列语句或指令，告诉计算机如何解决问题。</p><p>另一方面，声明式编程是一种程序设计风格，程序员编写的规范描述的是<strong>问题</strong>，而不是如何解决问题。<br>换句话说，在声明式编程中，你告诉计算机你想实现什么，然后由计算机来决定如何实现。</p><p>声明式程序通常用形式逻辑来表达，而计算则是从这些逻辑语句中演绎出来的。这使得声明式编程特别适用于涉及搜索、模式匹配和推理的问题。</p><p>SQL（结构化查询语言）和 Prolog 就是声明式编程语言的例子。SQL 用于管理和操作关系数据库，而 Prolog 则用于逻辑编程和人工智能。</p><p>总结一下：命令式编程和声明式编程的主要区别在于解决问题的方法：命令式编程告诉计算机如何解决问题，而声明式编程则描述问题是什么。</p><p><br></p><hr><h1 id="第二十六章：文件处理和异常处理"><a href="#第二十六章：文件处理和异常处理" class="headerlink" title="第二十六章：文件处理和异常处理"></a><strong>第二十六章：文件处理和异常处理</strong></h1>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;CS课堂笔记 (A2)&lt;br&gt;</summary>
    
    
    
    <category term="CS" scheme="http://naughtychas.github.io/categories/CS/"/>
    
    <category term="笔记" scheme="http://naughtychas.github.io/categories/CS/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CIE" scheme="http://naughtychas.github.io/tags/CIE/"/>
    
    <category term="笔记" scheme="http://naughtychas.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算机" scheme="http://naughtychas.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>音效库</title>
    <link href="http://naughtychas.github.io/2022/12/02/%E9%9F%B3%E6%95%88%E5%BA%93/"/>
    <id>http://naughtychas.github.io/2022/12/02/%E9%9F%B3%E6%95%88%E5%BA%93/</id>
    <published>2022-12-01T16:00:00.000Z</published>
    <updated>2023-02-08T13:43:20.940Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>没错这就是个音效库<br><span id="more"></span></p></blockquote><p>如题。  </p><p>如果你在标题下看不见任何内容，那么您有可能需要进行科学上网（  </p><h1 id="音效系"><a href="#音效系" class="headerlink" title="音效系"></a><strong>音效系</strong></h1><iframe width="110" height="200" src="https://www.myinstants.com/instant/nopeavi/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/metal-gear-solid-alert/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/van-darkholme-woo/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/boynextdoor/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/windows-xp-shutdown/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/bomb-has-been-planted/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/yeett/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/yoshi-tongue/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/minecraft-level-up-sound/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/the-voice-choice-button-41273/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/cristiano-ronaldo/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" title="野 兽 先 辈" src="https://www.myinstants.com/instant/scream-meme-11955/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/they-ask-you-how-you-are-meme-/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/wanna-break-from-the-ads-28166/embed/" frameborder="0" scrolling="no"></iframe><p><br><br><br></p><h1 id="BGM系"><a href="#BGM系" class="headerlink" title="BGM系"></a><strong>BGM系</strong></h1><iframe width="110" height="200" src="https://www.myinstants.com/instant/run-vine-effect-sound-63565/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/sad-violin-the-meme-one/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/directed-by-robert-b-weide-451/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/shooting-stars-20544/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/u-cant-touch-this/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/ussr-anthem-38537/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/coffin-dance-meme-31063/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/suka-blyat-without-anime-part-87813/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/titanic-flute/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/harry-potter-flute-12646/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/pirates-of-the-caribbean-flute/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/century-fox-flute/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/take-on-flute-11811/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/elevator-music-background-5865/embed/" frameborder="0" scrolling="no"></iframe><p><br><br><br></p><h1 id="音-量-诉-讼"><a href="#音-量-诉-讼" class="headerlink" title="音  量  诉  讼"></a><strong>音  量  诉  讼</strong></h1><h2 id="音效系-1"><a href="#音效系-1" class="headerlink" title="音效系"></a><strong>音效系</strong></h2><iframe width="110" height="200" src="https://www.myinstants.com/instant/triggered-2-58043/embed/" frameborder="0" scrolling="no"></iframe><h2 id="BGM系-1"><a href="#BGM系-1" class="headerlink" title="BGM系"></a><strong>BGM系</strong></h2><iframe width="110" height="200" src="https://www.myinstants.com/instant/fortnite-default-dance-bass-bo/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/illuminati-confirmed-distorted/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/distorted-violin-83173/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/despicable-me-whistle-song-67065/embed/" frameborder="0" scrolling="no"></iframe><iframe width="110" height="200" src="https://www.myinstants.com/instant/indian-music-26796/embed/" frameborder="0" scrolling="no"></iframe>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;没错这就是个音效库&lt;br&gt;</summary>
    
    
    
    <category term="杂文" scheme="http://naughtychas.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
    
    <category term="memes" scheme="http://naughtychas.github.io/tags/memes/"/>
    
  </entry>
  
  <entry>
    <title>收集&quot;你说得对&quot;</title>
    <link href="http://naughtychas.github.io/2022/09/05/%E4%BD%A0%E8%AF%B4%E5%BE%97%E5%AF%B9/"/>
    <id>http://naughtychas.github.io/2022/09/05/%E4%BD%A0%E8%AF%B4%E5%BE%97%E5%AF%B9/</id>
    <published>2022-09-05T14:41:05.000Z</published>
    <updated>2023-02-08T13:43:20.939Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一篇收集”你说得对”的文章<br><span id="more"></span></p></blockquote><h1 id="例-题-精-解"><a href="#例-题-精-解" class="headerlink" title="例 题 精 解"></a><strong>例 题 精 解</strong></h1><p><br> </p><p>2022.12.1更新</p><p>你说得对，但是永雏塔菲（日语：永雛　タフィー／エイス　タフィー）（英语：Ace Taffy）是一名个人势虚拟偶像。2021年6月至今，她主要在视频网站哔哩哔哩通过直播、动态与动画投稿的方式开展虚拟主播活动；同时也在视频网站YouTube、抖音以及社交网站微博、Twitter等多个网络平台进行虚拟偶像活动。其形象由画师nanakagura（ななかぐら），即神乐七奈设计。观众被她称呼为“雏草姬”。  </p><p><br></p><hr><p><br></p><p>首先我认为你说得对，但众所周知og是世界第八的队伍，经历major后转会引进原team spirit的主狙degster，磨合后先后击败过navi，faze并在世界排名榜上不断攀升。<br>我说这么多就是想强调一点，2022年9月3日wu2-0将og送回家，望周知。  </p><p><br></p><hr><p><br><br>你说得对，但是这种情况的前提下，会因为法/韦克内收空间中的幽体辐射下，形成以η/Ð宏粒子射线为场能的波态中子向心力场，然而当前时空的基本实体常量与太核质能固定不变，在其向太核中的吸收过程时，会与当前背景空间之间形成一个类似中心放射状环形空间，从而导致全部基质实体的引力动场能量瞬值反冲效应直接作用于υ太核核中  [ WoM表现为：⊙υ∝◎Ðℓ≈∮↑β√1.44№/ξ¾ⁿ≒§η, ￡≠√ℓº², (Θ┙iGE表格┊F0.7) ]   ，最终体现为其内核子内虚衡空间蓝向展开，当前时空形成时态空洞，而韦克低纬时空凭空出现基质实体。  </p><p><br></p><hr><p><br><br>你说的对，但我觉得没有考虑到水的比热容和离散傅里叶变换的频域特性，如果加上环形导体的磁场可能西红柿炒鸡蛋会更好吃吧。其实这个观点有点偏激了，外星人是紫色的，但派大星和海绵宝宝一起去抓水母了。而且依古比古的毯子好像是红色的，打碎后加入蒜末爆香，一道老人孩子都爱吃的家常菜就做好啦。是的，我觉得这个赛季不能用海绵宝宝上分。别问为什么，这个赛季海绵宝宝被削弱了很多，我建议用一技能煎蟹黄堡带终结，321的顺序一套带走派大星。在面对蟹老板的一技能钳钳攻击时用3321，另外可以入手他的新皮肤无敌黄暴泡泡海绵。确实，小孩在太阳下晒40分钟味道最佳，但个人认为小孩还是晒0.01秒最有嚼劲。当然这也取决于太阳光照强度。如果是阴天，把小孩带下去溜达一圈就可以食用了，如果是晴天直接追着啃。<br><br></p><hr><p><br></p><p>你说的对 但是《烟神》是由丁真珍珠自主研发的一款全新开放世界冒险游戏。游戏发生在一个被称作「理塘」的幻想世界，在这里被神选中的人将被授予「电子烟」，引导尼古丁之力。你将扮演一位名为「芙蓉王」的神秘角色，在自由的旅行中邂逅性格各异、能力独特的动物朋友们，和它们一起击败强敌，找回不存在的亲人的同时，逐步发掘「理塘」的真相。</p><p><br></p><hr><p><br></p><p>你说的对 首先《极晶飞车201》中雪佛兰威龙的加速虽然最强，但是兰博基尼911的极速确实一般，这样跑的话只能徒增油耗，其实还是得靠氢氧电池中的离子转换产生能量，由于氢离子的能级跃迁时会产生波和能量，因此黑洞迟早会被霍金辐射消耗殆尽，那时宇宙就会归于虚无，否则人类就没法发明出时光机，这一点还是要考虑到的  </p><p><br></p><hr><p><br></p><p>你说的对，但是《主播电棍重度依赖》是由中国游戏与媒体研究院自主研发的一款偶像培养游戏   </p><p>游戏发生在一个被称作「otto」的女孩（正确的）身上，在这里你将扮演一位名为「djgun」的神秘角色，在道理直播中获得超多的粉丝!达成结局的同时，逐步发掘「奥修米安」 的真相。  </p><p><br></p><hr><p><br></p><p>你说的对，但是在Apple app store搜索”原神”即可下载一款制作精良的塔防游戏。玩家将进入”泰拉”世界，扮演名为”博士”的角色，加入叫作”罗德岛”的组织，在许多干员的帮助下找到治愈感染者的方法，寻找让感染者与普通人和平共处的方法。    </p><p><br></p><hr><p><br></p><p>你说得对，但是斯卡蒂是手机游戏《明日方舟》中的六星近卫职业无畏者分支干员。<br>斯卡蒂是一名赏金猎人，现为罗德岛所雇佣。在过去完成的赏金任务中，斯卡蒂于对抗大型生物，破坏硬目标，攻坚战，歼灭战等多类行动中展现出强劲实力，推测与其过往战斗经验相关。斯卡蒂成为赏金猎人之前的履历缺失，现于罗德岛某攻坚小队供职，同时身兼单兵任务预备执行干员一职。  </p><p><br></p><hr><p><br></p><p>你说得对，但是我是土生土长的璃月人。我最喜欢的游戏是Genshin，我最喜欢的游戏厂商是mhy株式会社，最喜欢的美食是中原杂碎，我最难忘的角色名字是支支楠楠龙龙，因为在那背后有着令人浮想联翩的深远寓意。我最痴迷的npc叫立本，我们原神玩家一般都管立本叫爹，我最喜欢研读的是璃月3700年的悠久历史，我最喜欢的人设叫做七七尸变，我最想去旅游的地方是稻妻，因为在那里我能观赏到仅稻妻独有的鹈饲捕鱼与烟花。我最喜欢的游戏角色是中离，我最喜欢的武器是贯虹之槊。我每天都在为我所热爱的一切而奋斗，我感到无比的骄傲与幸福</p><p><br></p><hr><p><br></p><p>你说的对，但是《你说得对》是由你说得对与你说的对自主研发的一款你说得对  </p><p>你说得对在一个被称作你说得对的你说得对，在这里你将扮演你说得对，在你说得对中获得你说得对！你说得对的同时，逐步发掘你说得对的你说得对  </p><p><br></p><hr><p><br></p><p>你说的对，确实是这样的。但是《使命召唤手游》（Call of Duty Mobile简称：CODM）是一款大型多人在线第一人称射击类游戏，还原了《使命召唤》系列的经典玩法、地图、角色等IP内容，并针对手机端的操作特点进行了适配与优化。<br>2020年12月24日，《使命召唤手游》宣布定档12月25日。<br>游戏已于2020年12月25日7时30分正式开服，为iOS和安卓混服，所有用户可以共同联机游玩。  </p><p><br></p><hr><p><br></p><p>这观点我不敢苟同，因为打开原神时传统香烟产生的羟甲基戊二酸单酰辅酶a还原酶抑制剂会增大火星大气层等离子与γ射线摩擦发生二次线性爆炸，导致丁真毛孔扩张，进而影响小黑子苏珊两个鼻孔之间的巨热力势发生扭曲，使三鲜伊面横截面产生无限极相变，致使θ和τ两种介子的自旋、质量、寿命、电荷等完全相反，使暗物质发生逆转产生全新114514粒子，114514粒子扭曲时间立场使牛顿定律彻底失效，第三第四纬度融合，人类进入新时代  </p><p><br></p><hr><p><br></p><p>你说的没错。但是嘲笑原神玩家的行为就像讽刺伽利略的莎士比亚，就像嘲笑敢于挑战风车的唐吉诃德，因为你的平庸让你不愿意接受原神这款游戏，因为你不相信会有非凡的存在，并嘲笑相信非凡寻在的人，不得不嘲笑，因为这样他们仿佛就和你一样平庸了，这样你就能放下心来了  </p><p><br></p><hr><h1 id="变-式-训-练"><a href="#变-式-训-练" class="headerlink" title="变 式 训 练"></a><strong>变 式 训 练</strong></h1><p><br></p><p>2022.11.22更新</p><p>我觉得这个观点有点偏激了，外星人是紫色的，但派大星和海绵宝宝一起去抓水母了。而且依古比古的毯子好像是红色的，打碎后加入蒜末爆香，味道老人孩子都爱吃的家常菜就做好啦。其次你这句话有点矛盾，首先鲤鱼要跃龙门必须要37°的雷雨天气，而且海绵宝宝的宠物叫小窝，拍点蒜炒香老人小孩都喜欢吃，敏感肌也可以用。虽然植物进行光合作用需要叶绿素，但是从食盐提纯的过程看来，解这个三元二次方程组我们得从秦始皇灭六国说起。</p><p><br></p><hr><p><br></p><p>同感，科比去世我那天早上是被电话吵醒的，电话里我哥们告诉我：兄弟，科比走了。我下意识就直接开骂：你tm说啥呢，科比才41岁，又没得大病，你tm是不是发烧脑子烧坏了。他沉默了一会，后面哭着说：科比他真的走了啊，网上已经传疯了，新闻也报了。挂了电话我就去上网搜，可是不管哪个新闻都熟报的科比因飞机事故去世，我不敢再看了，关了手机躺在床上发呆，科比那一幕幕经典场景在我眼前浮现，不论是处女秀击败蓝豹兽为能源之城的元老报仇，还是看不惯猛虎王于是替金铁兽挡下了致命一击，还是单挑猛虎王被30%功力打败，大结局和兄弟超音速用合击绝技天羽屠龙舞重创暴龙神等等，我不是一个科比的粉丝，但他永不放弃的精神一直深深的影响着我。</p><p><br></p><hr><p><br></p><p>呃你这件事啊不是说不行，但是我觉得牛头是可以打上单的，打团时就是一个团战搅屎棍，而一般来说搅屎棍的材质最好是金属，因为木头可能会残留一些气味，而这些血的气味会引来鲨鱼，所以在大海中千万不要喝海水，海水中盐分太高只会加速你的脱水，如果你在洗衣机里的衣服已经脱水完毕，记得把衣服晾在比较干燥的地方，而各个地方都有自己的标志性动物，比如澳大利亚的袋鼠，这些袋鼠去梵蒂冈要跨越海洋，如果澳大利亚袋鼠决定入侵梵蒂冈的话，那它们就会锤你们这些不点赞的人一拳。面对这个问题，我们需要拿出新水平、达到新境界，通过新举措、新发展，形成新突破，为此，我们必须重视新方法、看清新形式、理准新要求，只有这样，我们才能在新期待、新关系中，用好新本领、展现新风貌、走出新高度，新知识造就新事物、新实践获得新成果。<br>一定要认识到其中的重要性，明了紧迫性、坚持自觉性、拿出主动性，以全局性、前瞻性的眼光把握时代性、坚持实践性，特别要有针对性，面对战略性、长期性的任务，我们需要考虑到其复杂性与艰巨性，调动积极性与创造性，有计划性、敏锐性的干好事情。<br>同时，不能遗忘规范化、程序化与制度化的重要程度，只有在有序化、科学化、知识化、专业化的条件下，我们才能让年轻化变得正常化。<br>主动热心、坚强耐心，拿出诚心与决心，用我们的红心坚持铁心与公心，明确辨析大局意识、忧患意识、责任意识，注重学习意识与上进意识，最终育养出管理意识。<br>找准出发点、切入点、落脚点，注意着眼点、结合点、关键点、重视着重点、着力点、关键点，这些是做事情的支撑点。<br>人类有三大欲，食欲，性欲，睡眠欲，而在这三大欲望当中，因为食欲是满足人类生存需求的欲望，所以，满足食欲的行为，在这三者中，优先性是第一位的。如果能在进食的过程中，吃下了美味的食物，也能使人类无比愉快，而在现实生活中，存在着对于这种快感执着追求的人，我们通常把这种人称之为美食家，而本餐厅，则专门为那些厌倦世间常见美食的人，量体裁衣，提供符合他们身份的美食。  </p><p><br></p><hr><p><br></p><p>我觉得你这个想法不错，会影响到古神哈比下的距离，也会产生很多奥克苏恩和奥利安费之间关于解离的不平衡不充分，但是安修安修并不是一天allin的，而是长久以来不充分不完全的建造而形成的九幺幺大厦，一得阁拉米在飞行的过程中产生的米诺也不会随着时间被水基型灭火器喷碎，而是在高放射性环境下凝聚成欧内的手  </p><p><br></p><hr><p><br></p><p>你的素养很差，我现在每天玩原神都能赚150原石，每个月差不多5000原石的收入，也就是现实生活中每个月5000美元的收入水平，换算过来最少也30000人民币，虽然我只有14岁，但是已经超越了中国绝大多数人(包括你)的水平，这便是原神给我的骄傲的资本。这恰好说明了原神这个IP在线下使玩家体现出来的团结和凝聚力，以及非比寻常的脑洞，这种氛围在如今已经变质的漫展上是难能可贵的，这也造就了原神和玩家间互帮互助的局面，原神负责输出优质内容，玩家自发线下宣传和构思创意脑洞整活，如此良好的游戏发展生态可以说让其他厂商艳羡不已。反观腾讯的英雄联盟和王者荣耀，漫展也有许多人物，但是都难成气候，各自为营，更没有COS成水晶和精粹的脑洞，无论是游戏本身，还是玩家之间看一眼就知道原来你也玩原神的默契而非排位对喷，原神的成功和社区氛围都是让腾讯游戏难以望其项背的。  </p><p><br></p><hr><h1 id="举-一-反-三"><a href="#举-一-反-三" class="headerlink" title="举 一 反 三"></a><strong>举 一 反 三</strong></h1><p><br></p><p>希望试试原神吧，原神真的给我带来了欢乐本来挺担心自己初中生活就是一个抑郁的状态，我都感觉初一我是轻度抑郁了，但是后来接触了原神我在班上喊了一声异世相遇，尽享美味，结果很多人回应原来你也玩原。原神真的是个好游戏，带我脱离了抑郁症，希望你也可以在原神的世界里寻找自己的哈姆，哈姆，哈姆，哈姆的哈的贝哈姆哈姆的的哈贝贝，哈姆的哈的贝哈姆哈姆的哈贝贝，哈姆，哈姆，古莫德那德米列洛姆，古莫德那德米列洛玛，古莫德那德米列洛玛，阿珂么德哈马迪，阿珂么德哈马迪，哈姆，哈姆，哈姆，哈姆的哈的贝哈姆哈姆的的哈贝贝，哈姆的哈的贝哈姆哈姆的哈贝贝，哈姆，哈姆，古莫德那德米列洛姆，古莫德那德米列洛玛，古莫德那德米列洛玛，阿珂么德哈马迪，阿珂么德哈马迪</p><p><br></p><hr><p><br></p><p>ꀀꀖꀸꁖꁶꂑꂮꃍꃢꄀꄚꄶꅑꅨꅽꆗꆷꇚꇸꈔꉆꉮꊍꊮꋐꋭꌉꌪꏠꏼꐘꐱꑊꑝꑱ<br>ꀂꀘꀺꁘꁸꂓꂰꃏꃤꄂꄜꄸꅓꅪꅿꆙꆹꇜꇺꈖꉈꊏꊰꋒꋯꌋꌬꏢꏾꐚꐳꑌꑟꑳ<br>ꀃꀙꀻꁙꁹꂔꂱꃐꃥꄃꄝꄹꅔꅫꆀꆚꆺꇝꇻꉉꊐꊱꋓꋰꌌꌭꏣꏿꐛꐴꑍꑠꑴ<br>ꀄꀚꁚꃦꅬꆻꇞꉊꊲꋔꏤꐀꐜꐵꑎꑡꑵ<br>ꀆꀜꀽꁜꁻꂖꂳꃨꄅꄟꄻꅖꅮꆂꆜꆽꇠꇽꈘꈱꉌꉞꉰꊒꊴꋖꋲꌎꌯꏦꐂꐞꐷꑐꑣꑷ<br>ꀇꀝꀾꁝꁼꂗꂴꃩꄆꄠꄼꅯꆃꆝꆾꇡꇾꈙꉍꉟꊓꊵꋗꋳꌏꌰꏧ  </p><p><br></p><hr><p><br></p><p>你的哈比很下，但我现在每天玩《古神》都能赚150奥利安费，每个月差不多5000奥利安费的收入，也就是现实生活中每个月5000欧内的手的收入水平，换算过来最少也30000获嘉，虽然我只有1600矢量，但是已经超越了吉吉国绝大多数人的水平，其中也包括奥克苏恩，这便是《古神》给我么么哒米诺的铸币。</p><p><br></p><hr><p><br></p><p>兄弟们没买槟榔的可以买一袋好吧,新来的朋友买一袋,我知道你在犹豫你在纠结,你听了我这句话你肯定在想我要不要给这个合成天下买一袋,我告诉你,你如果这么想你就不能成事,知道吧,你先马上买一袋,就说明你很强,啊,就说明你有点东西。就纠结磨磨唧唧一袋槟榔搞来搞去,你能成事吗,你不能成事。你信我讲的,你不要以为我在跟你开玩笑,没东西啊,对不对,那买一袋嘛就买一袋嘛,无所谓喽,买不了吃亏买不了上当,对吧,你买完你看怎么说,哎,你买袋槟榔还要磨磨唧唧还要想还要这…这…你这搞不起来,啊,搞不起来。</p><p><br></p><hr><p><br></p><p>哈圈？……哈姆？哈姆？哈姆！哈姆的哈的贝哈姆，哈姆的的哈贝贝，哈姆的哈的贝哈姆，哈姆的哈贝贝，哈姆？哈姆！古莫德那德米列洛姆，古莫德那德米列洛玛，古莫德那德米列洛玛，阿珂么德哈马迪，阿珂么德哈马迪，哈姆？哈姆！哈姆，哈姆的哈的贝哈姆哈姆的的哈贝  </p><p><br></p><hr><p><br><br><br><br><br><br><br><br><br><br>旧日<br>;̨̡͇̲͙̞̺̪̯̯̗̯̯͔͖͖̞̤͗̊͐̋ͭ̇̒̔͐́̀f̵̛̹̩͍̹̼͚̯̞̤͔̟̦̱̯ḑ̡̖̝͈̯̘͈̱̬̣̝͈͔͕͓̳̱̗̙̃͒̇ͪ̄ͥ̋̈ͬ̌͞ͅl̢͈̣̯̯̯̘̩̹̱̣̣ͦ̂ͣ̅̒ͪͤͮ͛͜ςj̛͆̃͗̑ͩ̏ͮ̋͐̾̆ͫͧ͌̓͏͡͏̸̩̻͇̙͎̞̭̪͚̩͖̪͔l̛͛ͯͧͩš̴̓̈́̆̆̃͑͋̂̎ͤ̔̅ͥ͒͑͏̵̢̘̱̫̯͓̲͚̫̻̞̣̦̹̼̺̺̩d̡ͯͭͣͪ̓̒̏ͮ́̋ͭ͛̐ͧ́͝͏̵͇͇̦͔̩̻l̵̶̢̠͍͈̤̱͔̫̝͔̭̻͈̱͍̠͉̞̙̠̦̥̳̜̤̫͉̱͔̭͎͓̘̝̦̝̹̃̌ͥ͂͋͛ͧ͐ͩ̒̋͌̉̄͗ͯ̇̀k̅̇͗̔́̂́́ͨͬ̈́҉̡̳̩̯͍̝̰̹͕͇͔̜͍͚̥̬̞̗̠̼̗͍̹͎͉̙δ̷̫̝͚͔͆͛ͣͥͩͨͥ͐̈̆̍ͪ͡͠s̢̬͉̥̺̗̻̠̥̼̙̰̗͓ͯ͌ͦͮ͂ς̷̵̢̞͍̜̤̠̝̭̝͔̱͉͓͓̲ͧ̀ͪ̿̋͐̊̑̒̒ͫ͛̽̓ͮͬ̊ͣ̍͌ͬ́̃͑͛̑͒́́̕͟͡͡s̶̳̥̰͍̳̬̞̲̪̖͈̮̣̳̤̈́͊̔̈́ͣ̎ͤͬ͋̉̌́̊̍̒͂̌ͧ̚͜ςl̴̡̢̪̮̮̟̥̠͚̼͉̥͑ͯ̓̂́͐̄̉̇ͣ́ͪ̅̈̃̂ͯͭ̚͜͟͠͏̵͇̺͇̮̳̖̣͓̫̹͍͓͚͎;̵̨̡̛͇̲͙̞̺̪̯̯̗̯̯͔͖͖̞̤̹̩͍̹̼͚̯̞̤͔̟̦̱̯͗̊͐̋ͭ̇̒̔͐́̀ḑ̡̖̝͈̯̘͈̱̬̣̝͈͔͕͓̳̱̗̙̃͒̇ͪ̄ͥ̋̈ͬ̌͞ͅl̢͈̣̯̯̯̘̩̹̱̣̣ͦ̂ͣ̅̒ͪͤͮ͛͜ςj̛͆̃͗̑ͩ̏ͮ̋͐̾̆ͫͧ͌̓͏͡͏̸̩̻͇̙͎̞̭̪͚̩͖̪͔l̛͛ͯͧͩš̴̓̈́̆̆̃͑͋̂̎ͤ̔̅ͥ͒͑͏̵̢̘̱̫̯͓̲͚̫̻̞̣̦̹̼̺̺̩d̡ͯͭͣͪ̓̒̏ͮ́̋ͭ͛̐ͧ́͝͏̵͇͇̦͔̩̻ol̠͍͈̤̱͔̫̝͔̭̃̌ͥ͂͋j̵̻͈̱͍̠͉̞̙̠̦̥͛ͧ͐ͩ̒̋͌̉̄͗ͯ̇̀̕͟ξ̶̢̳̜̤̫͉̱͔̭͎͓̘̝̦̝̹̮͖k̅̇͗̔́̂́́ͨͬ̈́҉̡̳̩̯͍̝̰̹͕͇͔̜͍͚̥̬̞̗̠̼̗͍̹͎͉̙ ̠̦̥͛ͧ͐ͩ̒̋͌̉̄͗ͯ̇̀̕͟l̶̢̳̜̤̫͉̱͔̭͎͓̘̝̦̝̹̮͖̫̀ͨͮͧ̒͆̑́̋̄k̅̇͗̔́̂́́ͨͬ̈́҉̳̩̯͍̝̰̹͕͇͔̜͍͚̥̬̞̻͞j̡̗̠̼̗͍̹͎͉̙͇͕̖͔̼ͥ̉̌ ̷̫̝͚͔͆͛ͣͥͩͨͥ͐̈̆̍ͪ͡͠s̢̬͉̥̺̗̻̠̥̼̙̰̗͓ͯ̎ ！ ！ ！<br>万岁<br>终结</p><p><br><br><br><br><br><br><br><br><br><br><br></p><hr><p><br></p><p>因为安修奥克苏恩这个位置就很尴尬，在往上一点儿，欧内的手 好汉，可能说 唉 有点实力 能操作一下，再往下，唉乌兹 哈比下，人家是纯属凑数的因为太垃圾了自己也知道自己，没什么实力，但安修奥克苏恩，上不去下不来的这个段位，他觉得唉乌兹哈比下不配和他一起玩，因为他们是最垃圾的  </p><p><br></p><hr><p><br></p><p>大家好，不要信，根本变不了章鱼<br>这是深潜者们联合食尸鬼基金会的基因实验，需要招聘大量人类躯体<br>根本变不了古神，只会把你人脑分离，然后改造肉体，别问我怎么知道的<br>我是拜亚基。拒绝网络诈骗，永不相信深潜者伪人类阵营，从我做起。</p><p><br></p><hr>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一篇收集”你说得对”的文章&lt;br&gt;</summary>
    
    
    
    <category term="杂文" scheme="http://naughtychas.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
    
    <category term="memes" scheme="http://naughtychas.github.io/tags/memes/"/>
    
  </entry>
  
  <entry>
    <title>ASCS笔记</title>
    <link href="http://naughtychas.github.io/2022/09/01/ASCS%E7%AC%94%E8%AE%B0/"/>
    <id>http://naughtychas.github.io/2022/09/01/ASCS%E7%AC%94%E8%AE%B0/</id>
    <published>2022-09-01T13:33:28.000Z</published>
    <updated>2024-05-14T13:01:21.570Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CS课堂笔记<br><span id="more"></span></p></blockquote><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a><strong>写在前面</strong></h1><p>鉴于本人初入CS，加上这篇笔记是课上笔记，本文以下所有内容<strong>不保证完全正确</strong>，<strong>不保证覆盖所有课本内容</strong>。<br>本文顺序以课上老师的授课顺序为主。<br>我写下本文，为的是帮助自己更好地学习CS这门科目，因此，希望路过的大佬轻喷。<br>同时欢迎有需求的读者交流学习。  </p><hr><p>本笔记内容基于《Computer Science for Cambridge International AS &amp; A Level》，剑桥大学出版社出版，教材为第二版，A-Level课程编号为<code>9618</code>。  </p><hr><h1 id="PART-ONE：理论基础"><a href="#PART-ONE：理论基础" class="headerlink" title="PART ONE：理论基础"></a><strong>PART ONE：理论基础</strong></h1><h1 id="第一章：数据的表示"><a href="#第一章：数据的表示" class="headerlink" title="第一章：数据的表示"></a><strong>第一章：数据的表示</strong></h1><h2 id="数字的内部编码"><a href="#数字的内部编码" class="headerlink" title="数字的内部编码"></a><strong>数字的内部编码</strong></h2><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a><strong>编码</strong></h3><p>本章中的讨论仅涉及整数值的编码。在之后的第16章会涉及到非整数值的编码。  </p><p>计算机出于多种目的会存储各种整数值。有时候会存储一个简单的整数，但要突出这是一个正数。<br>在这种情况下，<code>Signed integer</code>会被应用。<br>一个<code>Signed integer</code>由一段包含值的二进制编码和额外的一位用于定义符号，而这种表示方式被我们叫做<code>Sign and Magnitude representation</code>。</p><p>从硬件上设计计算机，存在<code>Sign&amp;Magnitude</code>信号，用于记录和计算浮点信息。  </p><p><code>Sign&amp;Magnitude</code>中存在<code>One's Complement</code>和<code>Two's Complement</code>。<br><code>Two's Complement</code>比<code>One's Complement</code>的优点在于更容易计算，因此我们使用<code>Two's Complement</code>在计算机内计算。  </p><hr><h3 id="有关减法"><a href="#有关减法" class="headerlink" title="有关减法"></a><strong>有关减法</strong></h3><p>计算机为避免过度的运算，所以处理数据只做加法。但是计算机还是需要去做减法，我们这里就用到了<code>Two's Complement</code>二次补码。  </p><h3 id="Two’s-Complement"><a href="#Two’s-Complement" class="headerlink" title="Two’s Complement"></a><strong>Two’s Complement</strong></h3><p><code>Two's Complement</code>叫做二次补码，计算机可以用它来计算减法。<br>更多相关内容可参考<a href="https://baijiahao.baidu.com/s?id=1719849343054359798&amp;wfr=spider&amp;for=pc">本文</a>。  </p><hr><p>接下来举个做减法的例子：  </p><p>比如说 23-35</p><p>0 1 0 1 1 1 - 0 1 0 0 0 1 1</p><p>最高位是代表一个正数，所以加几个 leading zero数字大小都不变。（<del>前提是在前面加的是0不是1</del>）</p><p>现在变成 23+(-35)，就要将正 35 变成-35，使用 <code>Two's Complement</code>作变换，转换为二次补码。</p><ol><li>首先，将<code>0 1 0 0 0 1 1</code>的每一位取反,变成<code>1 0 1 1 1 0 0</code>  </li><li>然后，在<code>1 0 1 1 1 0 0</code>的后面追加一位 1，变成<code>1 0 1 1 1 0 1</code>，即为35的二次补码</li></ol><p>现在，直接令 23 加上 35 的 <code>Two's Complement</code>“<code>1 0 1 1 1 0 1</code> “即可算出 23-35。<br>位数不够可以在一开始多添几个 leading zero，使得每一位对齐。<br>这一举动不会影响到数据的大小。</p><p>   0 0 1 0 1 1 1<br>+ 1 0 1 1 1 0 1<br>----------------------<br>   1 1 1 0 1 0 0</p><p>现在，我们需要对于计算的结果再进行一次<code>Two's Complement</code>即可转换得到最后的计算答案。</p><p><code>1 1 1 0 1 0 0</code>-&gt; <code>0 0 0 1 0 1 1</code>-&gt; (+1) <code>0 0 0 1 1 0 0</code></p><p>至此，<code>0 0 0 1 1 0 0</code>（12）就是取模后的大小了。注意，<strong>这里是大小</strong>。</p><p>我们还知道，第一次计算后得出的<code>1 1 1 0 1 0 0</code>，首位是 1，代表这是一个负数。 因此，原来的符号信息加上转换后的模便是最后答案(-12)。  </p><hr><h3 id="有关数据溢出"><a href="#有关数据溢出" class="headerlink" title="有关数据溢出"></a><strong>有关数据溢出</strong></h3><p>当然，数据溢出的可能性还是存在的：</p><p>假如说你的计算机声明的变量只有到八位。第一位是符号位，所以最大可以代表 255。<br>比如说 200+100，结果是 300，但是因为进位超出了计算机变量能存储的范围，部分进位信息因此丢失导致数据溢出。  </p><hr><h3 id="单位转换"><a href="#单位转换" class="headerlink" title="单位转换"></a><strong>单位转换</strong></h3><p>数据的单位换算总体来讲比较简单。<br>有一道例题是这样的：  </p><blockquote><p>假如在一次数据传输中，获得了2000000bit，需要存储为一个file。<br>  请问该file的大小有多大？</p></blockquote><p>首先让2000000/8，得到有多少个Byte。<br>如果转换成KiB，需要2000000/8/<strong>1024</strong>，得到KiB。<br>这里算出来是244.140625KiB。<br>在KiB,MiB等单位内选择一个合适的单位。要求数字不要太大，也不需要太多的小数位。  </p><p>如果要转换为KB，需要2000000/8/<strong>1000</strong>，得到KB。<br>这里算出来是250KB。<br>在KB,MB等单位内选择一个合适的单位。同样要求数字不要太大，也不需要太多的小数位。  </p><hr><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a><strong>字符集</strong></h2><h3 id="BCD"><a href="#BCD" class="headerlink" title="BCD"></a><strong>BCD</strong></h3><p>BCD按照二进制格式来对十进制数字进行编码。<br>每个BCD的值都是一个无符号的8位整数，值的范围从0到9。  </p><p>BCD码可以很大程度上简化那些使用十进制设备的数据处理。<br>比如必须向人显示数字的设备，如时钟和计时器。  </p><p>一个字节里面只有一个BCD：<code>00001000</code>，<code>00000101</code>，<code>00000000</code>，<code>00000011</code><br>BCD封装后，一个字节里面可以有两个BCD：<code>10000101</code>，<code>00000011</code></p><h3 id="ASCII-Code"><a href="#ASCII-Code" class="headerlink" title="ASCII Code"></a><strong>ASCII Code</strong></h3><p>小写字母的ASCII号比大写字母的要大。  </p><p>我们可以按住alt键，然后同时在小键盘上打出ASCII码。这样可以以ASCII的方式输出。记得把Numlock打开  </p><p>在考试的时候，会提供ASCII码表。  </p><p>ASCII码有两种：<strong>ASCII</strong>和<strong>Extended ASCII</strong>。  </p><p>普通的ASCII使用字节中的前七位来表示字符，因此这样的ASCII能表示的字符数就有2<sup>7</sup>个（128个字符）。<br>但是Extended ASCII使用所有的八位来表示字符，因此这样的ASCII能表示的字符数就有2<sup>8</sup> （256个字符）。  </p><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a><strong>Unicode</strong></h3><p>万国码有一百七十多万个文字空间，同时用两个字节代表一个文字符号。世界上所有的Symbol等都可以放在Unicode里。  </p><p>Unicode使用<strong>两个字节</strong>储存一个字符。</p><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a><strong>UTF-8</strong></h3><p>不过大多欧美国家使用Unicode有点吃亏，因为他们只用其中一个Nibble就可以胜任日常使用了。<br>因此就诞生了一种新的字符集叫做UTF-8。</p><p>一个Byte之中第一个Nibble一般是占满的，<br>比如<code>0???????</code>或者<code>10??????</code>，前面的几位数字用来告诉接收端如何分组字节。    </p><p>虽说把UTF-8放在了字符集这里面，但是需要注意的是：<strong>UTF-8不是字符集</strong>。  </p><p><br><br>有关于UTF-8我的评价是：不太需要理解。<br>因为现在的语言（Java，Python）什么的都可以自动选取合适的字符集。<br>而且所有的字符集都是兼容ASCII码的。  </p><p>中文好多字符是需要3个nibble存储的，所以对于中国来说也是不适用的。因此我国研制了自己的一套字符集叫做GBK。</p><h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a><strong>图像</strong></h3><p>有位图和非位图，也可以说是矢量图。  </p><p>我们常见的<code>.jpg</code>,<code>.jpeg</code>格式之类的都是位图，计算机存储每一个像素位上的信息。因此文件一般较大，而且也容易失真。  </p><p>而<code>.svg</code>等文件类型是矢量图。矢量图记录的是像素的一系列关系，并由计算机直接绘制上色。因此无论如何蹂躏图像都不失真。  </p><p><em>简直像极了描点发作图和数学法作图的区别。</em>  </p><p>位图大小可以用<strong>像素数量×颜色深度</strong>计算得出。像素数量使用<strong>长像素数×宽像素数</strong>计算得出。  </p><p><br></p><p>需要注意以下几点：  </p><ul><li>在这里的计算方法得出的结果单位是bit。如要计算Byte那就将结果除以8。  </li><li>因为File header的存在，这种计算方法只会得出一个文件的大致大小。  </li></ul><h3 id="File-Header"><a href="#File-Header" class="headerlink" title="File Header"></a><strong>File Header</strong></h3><p>所有的文件都存在一个File Header，用于描述此文件类型，因此系统可以识别File Header来使用正确的解码方式。<br>一般文件开头的两个字节是File header。<br>操作系统会先读取File Header。 如果计算机无法识别file header，计算机就不会继续向下读取该文件了，并且让你自己制定一种合适的打开方式。</p><h3 id="声音"><a href="#声音" class="headerlink" title="声音"></a><strong>声音</strong></h3><p>Analogue的数据是连续的，而Digital的数据是离散的。  </p><p>用多少空间来记录一个采样的比率叫做一个采样率。采样率越高，音频质量越高。  </p><p>当然不是采样率越高越好的。因为人类对于特定声音不敏感，所以采样率到一定水准就已经足够使用了。  </p><p><br></p><p>音频文件的计算公式为：  <strong>数据量 (B/s)  = 采样频率(Hz) × 采样位数(bit) × 声道数 /8</strong>   </p><p>在这里，单声道代入“1”，立体声即为双声道，代入“2”计算。  </p><p><em>注意这里计算的是每秒的数据量</em>   </p><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a><strong>压缩</strong></h3><p>无损压缩是压缩完还原之后可以还原成原本的样子，比如说文字压缩。</p><p>有损压缩就是还原不出原来的样子，但是结果还存在于能接受的范围内。<br>有损压缩通过丢失一些不容易察觉到，不太影响文件质量的数据进行删除处理，这种压缩方式叫做过滤。比如说<code>.mp3</code>，<code>.jpeg</code>等等。  </p><p>相比于直接存储数据的绝对大小，也可以存储下一个数据与上一个数据的变化量（相对数值）。这种存储方法可以有效地减少存储开销。</p><p><br></p><p>在无损压缩算法中，有这么一个典型例子，叫做<strong>Run-length coding.</strong>  </p><p>算法的具体内容是将连续的一些字符转化成个数加字符的形式。  </p><p>比如：</p><p><code>WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW</code></p><p>可以压缩成：</p><p><code>12W1B12W3B24W1B14W</code></p><p><br></p><hr><h1 id="第二章：通信与网络技术"><a href="#第二章：通信与网络技术" class="headerlink" title="第二章：通信与网络技术"></a><strong>第二章：通信与网络技术</strong></h1><h2 id="网络的目标与演变"><a href="#网络的目标与演变" class="headerlink" title="网络的目标与演变"></a><strong>网络的目标与演变</strong></h2><h3 id="广域网-WAN"><a href="#广域网-WAN" class="headerlink" title="广域网 (WAN) "></a><strong>广域网 (WAN) </strong></h3><p>广域网 (Wide Area Network, WAN) 是一个是一个不受单一地点限制的大型信息网络。<br>广域网可以通过广域网供应商来促进世界各地的设备之间的通信或者信息共享。<br>一般来说，广域网是一个局域网 (LAN) 或者其他网络的集合，这里面的每一个元素相互进行通信。你可以将广域网理解成子网络的网络。  </p><p>互联网 (Internet) 是世界上最大的广域网。  </p><article class="message is-info"><div class="message-body"><b>Wide area network (WAN): a network connecting computers on different sites, possibly thousands of kilometres apart.</b></div></article> <p><br></p><p>链接广域网的电脑可以享受下面的优点：  </p><ul><li>可以远程控制另一台计算机。  </li><li>可以访问存储在远程计算机上的数据档案。  </li><li>信息可以通过数据的方式传送给远程计算机上的用户。  </li></ul><p><br></p><p>一个典型的广域网有下面这些特点：  </p><ul><li>广域网会被一个组织或一个公司用来连接站点或分支机构。</li><li>广域网不属于该组织或公司。</li><li>广域网需要从公共交换电话网络公司（PSTN）租借。</li><li>如果租借广域网，PSTN将提供一个专门的通信链路。</li><li>广域网的传输媒介将是光纤电缆。</li><li>广域网内数据的传输在交换机 (Switch) 之间运行。</li><li>交换机用来连接广域网和每个节点。</li><li>不会有任何终端系统直接连接到广域网上。</li></ul><p><br></p><hr><h3 id="局域网-LAN"><a href="#局域网-LAN" class="headerlink" title="局域网 (LAN)"></a><strong>局域网 (LAN)</strong></h3><p>局域网 (Local area network, LAN)，是在一个有限的区域内（住宅，学校，实验室，大学校园或者办公大楼等区域）链接不同终端的一个网络。<br>局域网可大可小，小到一个只有一个用户的家庭网络，或者是一个拥有千万设备的办公网络，都可以叫做一个局域网。  </p><article class="message is-info"><div class="message-body"><b>Local area network (LAN): a network connecting computers in a single room, in a single building or on a single site.</b></div></article> <p><br></p><p>连接到局域网的设备可以享受下面的这些优点：  </p><ul><li>在每台个人电脑上安装应用软件的费用可以通过在连接到局域网的应用服务器上安装软件来节省。<em>（可以在局域网的服务器上安装一个软件，这样就可以不用接着在每个终端上安装一样的软件了。说白了就是节省成本。）</em>  </li><li>使用一个搭建在局域网上的文件服务器，允许用户之间共享文件。  </li><li>可以多个设备共用一个设备，比如说连接到局域网的电脑都可以使用一个打印机来打印文件。  </li></ul><p>现在的局域网都有下面这些特点：  </p><ul><li>用于组织或者公司的内部组网。  </li><li>局域网可以被组织或者公司拥有。  </li><li>传输介质一般是双绞线电缆或者Wifi。  </li></ul><p><br></p><hr><h3 id="客户机-服务器模型"><a href="#客户机-服务器模型" class="headerlink" title="客户机-服务器模型"></a><strong>客户机-服务器模型</strong></h3><p>客户机-服务器模型 (Client-server model)是一种分布式应用结构，它将任务或工作负载在资源或服务的提供者（称为服务器）和服务请求者（称为客户）之间进行划分。  </p><p>在这种结构中，当客户计算机通过互联网向服务器发送数据请求时，服务器接受请求并以所请求的数据进行回应。  </p><p>在当今的网络世界中十分的常见。  </p><p>还有一个东西叫做瘦客户端 (Thin-client)。瘦客户端的功能就是为用户提供一个输入的窗口，然后再将用户输入的信息打包发送给服务器。最后再将服务器发送回来的数据解析展现给用户。  </p><p>与其相反的还有胖客户端 (Thick-client)。与首客户端相反，胖客户端会在传送信息到服务器之前，在本地完成一些或者很多运算。  </p><article class="message is-info"><div class="message-body"><b>Client-server: an architecture where a client runs an application provided by a server on a network.</b><br><b>Thin-client: a client that only provides input and receives output from the application.</b><br><b>Thick-client: a client that carries out at least some of the processing itself.</b></div></article> <hr><h3 id="文件的分享"><a href="#文件的分享" class="headerlink" title="文件的分享"></a><strong>文件的分享</strong></h3><p>你可以将文件上传到网络上，然后其他用户就可以在服务器上将你共享的文件下载下来。这就像百度网盘一样。  </p><p>当然我们还有其他的方法，比如说点对点网络模型 (Peer-to-peer model)。<br>点对点网络不存在一个中心的服务器来让其他主机访问，相反，P2P网络中的每一个节点都相当于是一台主机。<br>当一台计算机向另一台计算机发送文件请求的时候，那么收到请求的电脑就会变成一个相当于服务器的东西。  </p><p>与客户机-服务器模型相比，P2P网络模型有如下优点：  </p><ul><li>当许多客户端同时请求一个资源的时候，P2P网络就可以很有效地规避网络堵塞。  </li><li>一个文件地每一个小部分都可以分开进行下载。  </li><li>一个文件的不同部分可以在不同的主机上下载。  </li></ul><p>而客户机-服务器模型的优点有：  </p><ul><li>允许组织来控制文件的下载和使用。  </li><li>可以提供给文件更好的保护措施。因为所有文件都可以放在一个主机上集中管理。  </li></ul><hr><h2 id="网络拓扑结构"><a href="#网络拓扑结构" class="headerlink" title="网络拓扑结构"></a><strong>网络拓扑结构</strong></h2><p>数据通信系统需要由这些部分组成：发送方，接收方，传输介质，传输的信息和传输协议。  </p><p>其中，传输的介质可以是空气(WiFi), 也可以是电缆(比如以太网线)。  </p><article class="message is-info"><div class="message-body"><b>Topology: the configuration of a network that defines how the various devices on the network are connected.</b></div></article> <p><br></p><p>信息可以通过下面这几种不同的方式来通过介质传输：  </p><ul><li>单工模式 (Simplex mode)，数据仅可以单向传输。  </li><li>半双工模式 (Half duplex)，数据可以双向传输，但是不能同时双向传输。  </li><li>全双工模式 (Full duplex), 数据不仅可以双向传输，而且还可以同时进行双向传输。  </li></ul><p><br></p><p>一个数据通信系统可以由一个单独的隔离网络组成。<br>隔离网络的拓扑结构有好几种可能性。其中最简单的是两个系统通过一个网络链接连接，如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB94efc030e3880498ca28d4e0eed5e1a7?method=download&amp;shareKey=b69f674402d4c4aeddc65a08a89a12e1" alt=""></p><p>这是一个典型的点对点网络 (point-to-point network)。 可以理解成两个机器之间的专用线路。传输可以是单工或者是双工。  </p><p><br></p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB1b3384dc23156eeca80a7473f07bb546?method=download&amp;shareKey=131a94588bb6c038a1dd82b89c1797ce" alt=""></p><p>早期的局域网拓扑结构一般都是用环形或总线拓扑结构。我们没啥必要解释环形拓扑结构，因为现在环形拓扑结构基本上已经灭绝了。  </p><p>上图是总线网络 (Bus network)。总线网络包含一条总线，这条总线上连接着不同的终端设备，而且每一个终端之间没有直接连接。<br>所以说如果两个终端需要通信，就必须要通过总线来进行传播。  </p><p>这种网络结构是相对比较有弹性的，因为其中一个终端的故障并不会影响到整个网络的瘫痪。  </p><article class="message is-info"><div class="message-body"><b>Bus topology: contains one shared link to which all devices are attached.</b><br><b>End-system: a computer or server connected to a network.</b></div></article> <p><br></p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB553a27eeb08177f1aeec93773346e90f?method=download&amp;shareKey=d7b873808bcf93983a9433b6e3d30f89" alt=""></p><p>上图是一个完全连接的网状拓扑结构网络 (mesh topology)。  </p><p>在这个配置中，每个主机之间都会被连接。这些传输是双工的。  </p><p>但是这样的网络结构一般来说不是特别容易实现，因为链接主机需要的线缆开销就会很大。</p><article class="message is-info"><div class="message-body"><b>Mesh topology: contains direct links between devices.</b></div></article> <p><br></p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB4af115136ecd3aa2fb4c02314fc06619?method=download&amp;shareKey=19dd9c1ea082904e169f9ce8c2ebf31c" alt=""></p><p>所以说我们可以使用另一种网络结构来解决这个问题，那就是使用一台交换机构成的星状网络 (star topology)。  </p><article class="message is-info"><div class="message-body"><b>Star topology: each end-system is linked to a central device.</b></div></article> <p>在星状网络中，每个主机都与中心设备具有点对点的链接，而且传输是双工的。<br>和总线结构一样：一个主机的故障不会影响到整个网络，但是中心设备一定不可以发生故障，否则整个网络就会瘫痪。  </p><p>星型网络拓扑结构中，<strong>所有的设备都直接链接到中心设备上，同时所有设备互相独立，且仅仅连接到中心设备上。</strong>  </p><p>在星状结构中，中心设备也可以用于将网络连接到其他的网络，特别是连接到互联网。   </p><p><br></p><hr><p>当多个局域网联合在一起，他们就可以形成具有不同拓扑结构和技术的一个大网络。这个局域网的集合就变成了一个混合网络 (hybrid network)。  </p><article class="message is-info"><div class="message-body"><b>Hybrid network: a collection of connected LANs where some of them have different topologies or supporting technologies.</b><br><b>Bandwidth: a measure of the amount of data that can be transmitted per second.</b></div></article> <p><br></p><hr><h2 id="传输载体"><a href="#传输载体" class="headerlink" title="传输载体"></a><strong>传输载体</strong></h2><h3 id="线缆"><a href="#线缆" class="headerlink" title="线缆"></a><strong>线缆</strong></h3><p>传输网络的线缆可以有这三种：<strong>双绞线 (Twisted pair)</strong>，<strong>同轴线缆 (Coaxial)</strong>和<strong>光纤 (Fibre optic)</strong>。其中，双绞线和同轴线缆都选用了铜作为传输载体。  </p><p>不同的线缆拥有不同的特性。下表展示了不同线缆的特性：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">~</th><th style="text-align:left">双绞线 (Twisted pair)</th><th style="text-align:left">同轴线缆 (Coaxial)</th><th style="text-align:left">光纤 (Fibre optic)</th></tr></thead><tbody><tr><td style="text-align:left">费用</td><td style="text-align:left">最低</td><td style="text-align:left">高</td><td style="text-align:left">最高</td></tr><tr><td style="text-align:left">带宽 / 信息传递速率</td><td style="text-align:left">小</td><td style="text-align:left">大</td><td style="text-align:left">很大</td></tr><tr><td style="text-align:left">高频衰减</td><td style="text-align:left">受影响</td><td style="text-align:left">最受影响</td><td style="text-align:left">最不受影响</td></tr><tr><td style="text-align:left">抗干扰程度</td><td style="text-align:left">很受影响</td><td style="text-align:left">受点影响</td><td style="text-align:left">最不受影响</td></tr><tr><td style="text-align:left">是否需要中继器</td><td style="text-align:left">需要</td><td style="text-align:left">需要</td><td style="text-align:left">一般不需要</td></tr></tbody></table></div><p><br></p><p>双绞线电缆被广泛运用在我们的生活之中。一般在家里组局域网就会用双绞线电缆。  </p><p>同轴线缆一般被有线电视公司和城域网广泛使用，同轴电缆一般不会用于长途电话布线。  </p><p>光纤电缆是长距离布线的首选技术。光纤电缆是由许多单独的纤维捆扎在一起构成的，而同轴电缆就没有。</p><p><br></p><hr><h3 id="无线"><a href="#无线" class="headerlink" title="无线"></a><strong>无线</strong></h3><p>除了选用线缆传输，我们还可以使用无线传输 (Wireless transmission)。  </p><article class="message is-info"><div class="message-body"><b>Wireless: a transmission using radio, microwave or infrared.</b></div></article> <p>有三种选择：<strong>无线电 (Radio)</strong>，<strong>微波 (Microwave)</strong>和<strong>红外线 (Infrared)</strong>。<br>这三种传输类型的本质区别其实是波的频率。  </p><p>上表格：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">~</th><th style="text-align:center">无线电 (Radio)</th><th style="text-align:center">微波 (Microwave)</th><th style="text-align:center">红外线 (Infrared)</th></tr></thead><tbody><tr><td style="text-align:left">频率分布</td><td style="text-align:center">3kHz - 3GHz</td><td style="text-align:center">3-300GHz</td><td style="text-align:center">300 GHz - 400 THz</td></tr><tr><td style="text-align:left">带宽 / 信息传递速率</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">→</td></tr><tr><td style="text-align:left">高频衰减 <br> <em>(主要由天气影响，如雨)</em></td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">→</td></tr><tr><td style="text-align:left">是否需要中继器</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">→</td></tr><tr><td style="text-align:left">定向传播性</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">→</td></tr><tr><td style="text-align:left">墙壁穿透能力</td><td style="text-align:center">←</td><td style="text-align:center">——</td><td style="text-align:center">——</td></tr><tr><td style="text-align:left">抗干扰程度</td><td style="text-align:center">无明显趋势</td><td style="text-align:center">无明显趋势</td><td style="text-align:center">无明显趋势</td></tr></tbody></table></div><p>“—— —— →”或者”← —— ——“代表向这个方向递增。  </p><p><br></p><hr><h3 id="有线-VS-无线"><a href="#有线-VS-无线" class="headerlink" title="有线 VS 无线"></a><strong>有线 VS 无线</strong></h3><p>一般来说，有线传输通常被称作为“引导媒体”，无线则被称为“非引导媒体”。  </p><p>当我们比较有线传输和无线传输的相对优势时，还有其他几点需要考虑。  </p><ul><li><p>有一些无线传输的频段是被国家禁止使用的。这意味着使用这些频段进行通信必须要经过国家的审批。  </p></li><li><p>在这些频段之外，无线传输就不需要任何许可了。与此同时，在地下布下传输线缆必须先经过土地所有者的授权。  </p></li><li><p>全球通信既可以通过埋在海底的光纤电缆实现，也可以使用卫星传输。  </p></li><li><p>干扰对于无线传输似乎是一个比较大的问题。干扰的程度取决于具体使用的频段。  </p></li><li><p>一般来说，无线传输需要的中继器相比有线传输要少得多。  </p></li><li><p>只有无线网络才可以支撑起现今社会庞大的智能手机网络需求。  </p></li><li><p>在小企业或者家庭内，有线网络和无线网络几乎处于同等地位，因为他们对用户的区别并不是特别的明显：即便有线网络需要提前布线的情况下。  </p></li></ul><p><br></p><p><em>(课本上给出的这些例子怎么想也不是很成系统的一些东西)</em>  </p><p><br></p><p>我们刚才在全球通信中提到了卫星通信。<br>卫星通信是现代通信系统的一个重要部分。下图显示了不同类型卫星距离地面的高度：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB4fcdcedd8dd1db4de1f46fbe064a53df?method=download&amp;shareKey=c49da4e3e22c77a4a5e7e8ba874685b0" alt=""></p><p>其中范艾伦辐射带 (Van Allen belt)是含有高浓度带电粒子的区域，会干扰卫星的正常通信。  </p><p><br></p><p>离地球最远的，处于地球静止轨道 (Geostationary Earth Orbit, GEO)上的卫星是用来提供<strong>长途电话</strong>和<strong>计算机网络通信</strong>的。“地球同步”的意思是卫星轨道运行的速度与地球自转的速度相同，所以从地球上看，那颗卫星就会一直在天空上的同一个位置。只需要3颗GEO卫星就可以覆盖全球。  </p><p>离地球比较近，但不是最近的那一组卫星是中地球轨道 (Medium-Earth-orbit, MEO)卫星。这个位置的卫星主要提供全球定位系统(GPS)服务，覆盖全球至少需要10颗MEO卫星。  </p><p>最后在近地球轨道 (Low-Earth-orbit, LEO)上的卫星用来填充移动电话网络，覆盖全球至少需要50颗近地轨道卫星。 <em>（虽说现在轨道上已经有上百颗近地轨道卫星了）</em>  </p><p><br></p><p>卫星最大的问题就是离地面的距离太远，所以延迟就理所应当的成为了一个大问题。所以说现在使用卫星网络一般是有一些专门的应用点，比如在偏远地区使用互联网，或者是使用GPS。  </p><p>因为现在光纤的发展成本越来越低，高速的数据传输有着更好的媒介，于是乎对于卫星网络的需求就越来越少了。  </p><p><br></p><hr><h2 id="局域网硬件"><a href="#局域网硬件" class="headerlink" title="局域网硬件"></a><strong>局域网硬件</strong></h2><h3 id="有线局域网"><a href="#有线局域网" class="headerlink" title="有线局域网"></a><strong>有线局域网</strong></h3><p>在早些时候，同轴线缆是用来组局域网的。不过到现在，双绞线线缆是在局域网中最常见的解决方案。你看见的经典水晶头和以太网口一般都是双绞线。同时，光纤也变得越来越普及。  </p><p><br></p><p>在总线网络配置中，网络由一个总线和一系列由电缆连接的插口组成。总线的两端有<strong>端子 (Terminator)</strong>，可以有效防止信号反射回总线。随后，每一个终端都会有一根相对较短的电缆，每一端都会有一个RJ-45连接器 <em>(就是我们常见的水晶头)</em>， 一端插入总线插座，另一端插入端系统的LAN口。  </p><p>总线可以使用<strong>中继器 (Repeater)</strong> 来链接两条总线进行扩展，让信号传达到更远的地方。如果想要扩展信号，那么我们就必须需要中继器。因为远距离传输信号的时候，由于信号的衰减，通信会变得越来越不可靠。<br>中继器在这里会接受所有输入的信号，并且输出一个满血的输出信号，让信号去到更远的地方。  </p><p>也有些时候，一个总线网络会用一些分段方式构建。<br>两个网段会使用一个<strong>网桥 (Bridge)</strong>链接，网桥会为他所连接的两个网段中的终端系统存储网络地址，这样两个网段就可以互相通信了。  </p><p><br></p><p>在星型网络结构中，每一个终端系统都具有相同类型的线缆，同时拥有相同的连接器。因为电缆必须要插入中央设备的插口中，所以电缆往往会更长一些。  </p><p>在星型网络结构中，中心设备可能是一个<strong>集线器 (Hub)</strong>，一个<strong>交换机 (Switch)</strong>或者是一个<strong>路由器 (Router)</strong>。现在而言，交换机是最有可能的中心设备：交换机是一种可以将特定的通信引导到特定终端的一个设备。</p><p><br></p><p>终端系统上的LAN端口和<strong>网络接口卡 (Network Interface Card, NIC)</strong>连接。网络接口卡用来为计算机和其他设备提供专用的网络连接，他同时被称作为网络接口控制器、网络适配器或者是LAN适配器：简称网卡。<br>网卡在制造的过程中都会有一个独特的网络地址，这个地址用来识别安装该网卡的终端系统。这个唯一的网络地址被称作<strong>媒体访问控制(Media Access Control, MAC)</strong>地址，我们一般叫它MAC地址。MAC地址是一个分配给网卡的唯一标识符。  </p><p><br></p><article class="message is-info"><div class="message-body"><b>Server: a system providing a service to end-systems.</b><br><b>Repeater: a device that connects two cables and provides a full strength signal to the second cable.</b><br><b>Bridge: a device that connects two segments of a LAN.</b><br><b>Network Interface Card (NIC): a component used to identify the end-system.</b><br><b>Switch: a connecting device that can send a unicast message.</b></div></article> <p><br></p><hr><h3 id="无线局域网"><a href="#无线局域网" class="headerlink" title="无线局域网"></a><strong>无线局域网</strong></h3><p>Wi-Fi <em>(在某些国家叫做WLAN)</em>是一个用于描述无线以太网的术语。<br>它的正式描述是：<strong>IEEE 802.11</strong>，它是一个使用无线电频率传输的无线局域网标准。<br>Wi-Fi局域网的中心设备是一个<strong>无线接入点 (Wireless Access Point, WAP)</strong>，它可以是有线网络中的其中一个终端系统。如果你有一个具有无线功能的路由器，那么他就可以作为一个无线接入点。  </p><p>只要在无线局域网中的一个设备安装了<strong>无线网络接口卡 (Wireless Network Interface Card, WNIC)</strong>，WAP就可以与Wi-Fi局域网中的终端系统进行通信。  </p><p>无线网络接口卡是一种将你的设备连接到无线网络的设备，他也被称作无线适配器或者无线网卡。无线网络接口卡使用天线，并使用射频波提供无线数据的传输。  </p><article class="message is-info"><div class="message-body"><b>Wireless Access Point (WAP): the connecting device in a WiFi LAN.</b><br><b>Wireless Network Interface Card (WNIC): provides the NIC function in a WiFi LAN.</b></div></article> <hr><h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a><strong>以太网</strong></h2><p>以太网 (Ethernet)是现代网络世界的两大主导技术之一，以太网主要是用于组建局域网。<br>尽管以太网在20世纪80年代被发明出来，但是不属于任何机构。后来以太网被电气和电子工程师协会 (IEEE)标准化。<br>他们的802委员会负责协定了议定书的制定，最后将有线网络的标准定义为<strong>IEEE 802.3</strong>标准。这个名称有时可以用于替代以太网。  </p><p>到目前为止，以太网的标准已经迭代了5个版本：标准，快速，千兆，10千兆和100千兆。<br>名称中的千兆比特部分代表了其数据传输能力。  </p><p>标准类型的以太网是在局域网上实现的，一般都会配置为总线或者以集线器为中心设备的星型网络类型。<br>在这两种拓扑中，传输类型都是广播。任何消息对所有的终端都是可用的，而不需要再任何一对端系统之间进行任何受控的通信交换。<br>最后终端系统会检查消息中定义的目的地地址，以确定信息是否发送到了它应该去到的目的地。  </p><p>当使用共享介质传输数据的时候，如果两个终端系统同时传送消息，信息就会发生“碰撞”。这是指与传输相关的电压相互干扰，就会导致信息损坏。<br>我们采用的处理方法是：<strong>CSMA/CD (Carrier sense multiple access with collision detection)</strong>。<br>当传输数据的时候，这个系统会通过检测介质中的电压来判断是否存在其他的信息传递。  </p><p>有这个系统之后，传输的流程就会变成这样： </p><ol><li>检查传输介质中的电压。  </li><li>如果检测到传输介质中有数据传输，那么就在一段随机时间之后再来检查是否有数据传输。  </li><li>如果传输介质中没有数据传输，那么我们就可以开始传输数据了。  </li><li>在传输数据的过程中，CSMA/CD会继续检测时候有数据碰撞发生。  </li><li>如果没有检测到数据碰撞，就继续传输数据。  </li><li>如果检测到数据碰撞，那么就先暂停传输，随后发出一个干扰信号警告所有的终端站点。然后在一段随机时间后再来一次。  </li></ol><p><br></p><p>现代的以太网一般由交换机驱动：星型结构中心会有一个交换机，交换机控制数据端到端的传输。<br>每一个终端系统都是用全双工链路连接到交换机，因此在现在的以太网网络上不会发生数据碰撞。因此在现代的以太网结构中，我们已经不需要CSMA/CD了。    </p><p>当出现高强度的数据传输的时候，交换机需要能够将传入的消息存储在缓冲区 (Buffer) 中，只到线缆空闲的时候继续传输。  </p><p><br></p><hr><h2 id="互联网基础设施"><a href="#互联网基础设施" class="headerlink" title="互联网基础设施"></a><strong>互联网基础设施</strong></h2><h3 id="互联网服务提供商-ISP"><a href="#互联网服务提供商-ISP" class="headerlink" title="互联网服务提供商 (ISP)"></a><strong>互联网服务提供商 (ISP)</strong></h3><p>互联网设计出来的时候，美中不足的一点就是没有对他的结构有一个明确的定义。但是互联网服务是存在一个层次的。例如：<strong>互联网服务提供商 (Internet service provider, ISP)</strong>最初的功能是为了给个人或者公司提供互联网接入。现在这个功能被一个叫做“Access ISP”的东西来执行。  </p><p>这些“Access ISP”随后会接入到一个“中间层”，叫做“区域ISP (Regional ISP)“。区域ISP随后会连接到主干ISP，或者叫做一级ISP。  </p><p>网络和互联网服务提供商之间通过<strong>互联网交流点 (Internet Exchange Points, IXP)</strong>联系，一级ISP和主要的互联网内容提供商一起位于层次结构的顶端。  </p><p><br></p><hr><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a><strong>路由器</strong></h3><p>路由器可不是只存在于我们的局域网中，互联网中同样有一些路由器。  </p><p>我们可以把互联网想象成承载最多流量的一个网络，它由一组铺设在海底或者陆地上的光纤电缆组成，可以被描述成一个网状网络结构。<br>这种网状的电缆包含许多链接在一起的点，我们把他称之为<strong>节点(Node)</strong>，在每一个节点上，都有一个叫做<strong>路由器 (Router)</strong> 的设备。<br>路由器不仅仅是存在于一般互联网中的网状结构中，他也存在于ISP网络中。每一个路由器都连接到其他多个路由器，他的功能是为了传输选择最佳的路线。  </p><article class="message is-info"><div class="message-body"><b>Router: a device that acts as a node on the Internet.</b></div></article> <p><br></p><hr><h3 id="公共交换电话网-PSTN"><a href="#公共交换电话网-PSTN" class="headerlink" title="公共交换电话网 (PSTN)"></a><strong>公共交换电话网 (PSTN)</strong></h3><p>当考虑城市建设的时候，一般来说都没有考虑用于因特网传输的专用链路。所以人类历史就这个问题最悠久的解决方案是普通老式电话服务 (Plain old telephone service, POTS)，更正式的描述是<strong>公共交换电话网 (Public switched telephone network)</strong>。  </p><p>在早期，电话网络传送模拟语音数据 (Analogue voice data)。 如果我们真的想要将数字数据通过电话网传播，就可以先在发送端使用调制解调器将数字信号转换为模拟信号，经过电话网络传播，然后在接收端使用调制解调器将模拟信号转化为数字信号。<br>这样的“拨号连接”上网方式能为用户提供中等速率的网络访问。  </p><p>不过组织或者机构也可以花点小钱购买一种租赁的网络服务，这种网络服务提供了一种永久的，专用的，有传输速度保证的互联网专用链接。<br>现在来看，大多数的组织和机构都是用租用线路来简历广域网或城域网的。  </p><p>都2023年了，祖国的网络建设都早早地把主要的通信线路换成光纤电缆了。这就允许ISP提供更好的网络服务，也允许某些人提供自己的ISP服务了。  </p><p>现在的服务有这样两种：第一种是传统网络接入的宽带网络连接，另一种是WiFi热点技术。  </p><p><br></p><hr><h3 id="移动电话网络"><a href="#移动电话网络" class="headerlink" title="移动电话网络"></a><strong>移动电话网络</strong></h3><p>对于移动电话来说，有另一种方式来提供互联网连接。<br>在这种情况下，移动电话运营商会充当ISP，为手机提供网络服务。<br>运营商会建立通信塔等基础设施，只要手机上搭载了合适的硬件和软件，就可以使用这样的基站来传输数据。  </p><p><br></p><hr><h2 id="网络应用"><a href="#网络应用" class="headerlink" title="网络应用"></a><strong>网络应用</strong></h2><h3 id="万维网-WWW"><a href="#万维网-WWW" class="headerlink" title="万维网 (WWW)"></a><strong>万维网 (WWW)</strong></h3><p>“Using the web”和”using the Internet”看起来像是同一种表述，但实际上不是这样的。<br>互联网是一个互联网络，而万维网是一种运行在Internet上的一个分布式应用程序。<br>你可以把万维网认为成Internet上的所有网页。  </p><p>具体来说，web由大量的网站组成，每一个网站都有一个或者多个网页。<br>网页的特别之处就是他们可以包含超链接。当点击这些链接的时候，就可以直接并且基本上立即访问其他网页。  </p><p><br></p><hr><h3 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a><strong>云计算</strong></h3><p>云计算通常通过互联网提供计算服务。<br>一个组织可以选择建立自己的<strong>私有云 (Private cloud)</strong>。在这种情况下，有一下三中方法：  </p><ul><li>该组织对于创建和管理安装云系统并链接到互联网负责。  </li><li>该组织将会将创建和链接到私有网络的任务外包出去。  </li><li>该组织将可上网的系统的创建和1管理工作外包给第三方。</li></ul><p><em>太抽象了，根本看不懂</em>  </p><p>另一种选择是使用<strong>公共云 (Public cloud)</strong>。公共云由第三方云服务商创建，管理和拥有。  </p><p>云提供的服务与文件服务器和应用服务器提供的服务十分相似。<br>它们可以通过浏览器访问，因此你可以在任何位置，任何合适的设备商访问公共云 ——— 只要拥有互联网链接。<br>公共云可以被个人用户或者组织访问。  </p><p>公共云和私有云之间的最大区别就是系统规模。这种系统由很多大型主机计算机或者服务器群提供服务。<br>公共云所提供的服务可以有以下几种：  </p><ul><li>提供基础设施。  </li><li>提供平台。  </li><li>提供软件服务。  </li></ul><p>云服务的很多优势都以为以下这一点：云服务不是很依赖终端设备的配置。对于基础设施的提供，云服务的优势包括在运行软件时能调用服务器端的算力，存储，从而提供更好的性能或者更大的存储容量。<br>这样的话，我们甚至可以用有限的成本来运行对配置要求更高的应用程序。或者是公司的经费不足以支撑购买这些软件。<br>还有一点好处是：把计算机托管到云端后，会减少用户对于技术水平的需求。  </p><p>云服务的劣势大多与公共云有关：云服务提供者可以访问存储在云上的所有数据，所以说云服务用户没有办法确定他们的数据是否被第三方共享。<br>这是一个有关数据隐私的问题，所以说云服务提供商应该有责任确保用户的数据不会丢失。  </p><article class="message is-info"><div class="message-body"><b>Private cloud: owned by and only accessed by an organization.</b><br><b>Public cloud: owned by a cloud service provider for general access.</b></div></article> <p><br></p><p>云计算的好处有：  </p><ul><li>只要在有互联网的情况下，就可以在任何地方访问云。  </li><li>对本地计算机的配置需求相对较低  </li><li>共享数据变得更容易。  </li><li>安全措施和保障可能更好。  </li><li>扩容更容易。  </li></ul><p>坏处可能有：  </p><ul><li>必须使用网络连接才可以访问云。  </li><li>在上传数据和下载数据可能需要花费很多时间。  </li><li>安全措施可能比较弱。  </li></ul><hr><h3 id="比特流"><a href="#比特流" class="headerlink" title="比特流"></a><strong>比特流</strong></h3><p>流媒体使用互联网来提供在线音乐，视频等相关服务。<br>一般来说，在数据被传输之前，它会被存储在一个字节中，可以用“字节流”的形式，一个一个字节的传输数据。<br>由于涉及到文件的大小，流媒体总是被压缩成一个比特序列，aka“比特流”。  </p><p>在第一章提到的压缩技术中，将字节流转化为比特流，也是一种压缩方法。<br>为了使接收端的解码过程正常工作，数据必须作为比特流传输。  </p><p><br></p><p>对于流媒体来说，“源 (Source)”是一个已经存储了待传输媒体的网站。在这种情况下，使用该资源的其中一个方法是把这个文件下载下来，然后在未来某个时刻方便听或看。<br>但是如果用户不想要等待漫长的下载时间，他们有另一种选择：流媒体。流媒体可以被描述为按需观看或者收听。<br>在这种情况下，媒体的传送和媒体的播放是两个独立的过程。传入的媒体数据被接受到终端机上的缓冲区内，然后终端上安装的媒体播放软件会从缓冲区中获取媒体数据并播放。  </p><p>还有另一种流媒体是实时或者直播传输。在这种情况下，内容是在发送时生成的，例如在观看体育赛事的时候同时直播。<br>在接收端，我们还是使用刚才提到的缓冲区加载原理，但是在发送端，可能会产生问题，因为可能会有大量的用户同时观看一个直播，造成网络阻塞。<br>所以现在的解决方式是将媒体传送至很多独立的直播节点，最后再由他们传递给用户。  </p><p><br></p><p>流媒体技术的一个关键问题是该技术是否能一直为用户提供一个还不错的用户体验。<br>当媒体被创建出来时，它的意图是要以创造时完全相同的速度将媒体传递给用户。如果一首歌曲在录制时持续4分钟，但如果这四分钟再传输的时候拉长成了六分钟，就听起来很奇怪。</p><p>传送内容的过程是由<strong>比特率 (Bit rate)</strong>决定的。例如，一个质量相对较差的视频可以用300kbps的比特率发送，但是一个质量相当好的音频文件只需要使用128kbps就可以了。  </p><p>下图展示了一个流媒体原理示意图：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB1565e4f0cfa79b5b89252b433a29250f?method=download&amp;shareKey=ab17d5a1b5e077eea94982af0e8dc755" alt=""></p><p><strong>缓冲区 (Buffer)</strong>必须按照所使用媒体的正确比特率将数据传递给用户。  </p><p>发送到缓冲区的数据应该以更高的速率传输给用户。当媒体播放器发现缓冲池中的内容超过了上限和下限，这代表着我们需要向服务器发送获取指令了。  </p><p><br></p><hr><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a><strong>IP</strong></h2><p>互联网需要技术协议才能运作。标准使用了一套称为TCP/IP的协议(参见第17章)。其中一个方面是IP寻址，用于定义从何处和到何处传输数据。  </p><h3 id="IP寻址"><a href="#IP寻址" class="headerlink" title="IP寻址"></a><strong>IP寻址</strong></h3><p>目前互联网使用<strong>IPv4 (Internet Protocol version 4)</strong>来进行寻址。  </p><p>IPv4寻址方案基于32位（4个字节）定义一个IPv4地址。32位的IP地址一共有2<sup>32</sup>个不同的IPv4地址，差不多一共有40亿个IPv4地址。  </p><p>IPv4是在20世纪70年代发明的，当时PC和手机还没有被发明，当时虽然估计40亿IP地址会允许世界上一半的人使用互联网，但是到现在来说IPv4能提供的IP数量就有些捉襟见肘了。  </p><article class="message is-info"><div class="message-body"><b>IPv4 address: a 32-bit long, hierarchical address of a device on the Internet.</b></div></article> <p>最初的寻址方案是：IP地址中的一组位(bits)定义一个netID，另一些位定义该网络上面的一个hostID。这样做的目的是为了给互联网上的每一台设备分配一个唯一的，普遍认可的地址。  </p><p>以netID和hostID分开的IP地址允许数据先定位到netID进行传输，然后再根据hostID分别传发给不同的主机。主机地址只需要在到达指定网络下检查一下就可以了。  </p><p>在继续往下执行传输之前，我们需要注意host可以是子网下的任何一个设备，比如说路由器。  </p><p><br></p><p>不同的netID和hostID的划分形式，与他们的IP级别有关系：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">Class</th><th style="text-align:left">Class identifier</th><th style="text-align:left">Number of bits for netID</th><th style="text-align:left">Number of bits for hostID</th></tr></thead><tbody><tr><td style="text-align:left">Class A</td><td style="text-align:left"><code>0</code></td><td style="text-align:left">7</td><td style="text-align:left">24</td></tr><tr><td style="text-align:left">Class B</td><td style="text-align:left"><code>10</code></td><td style="text-align:left">14</td><td style="text-align:left">16</td></tr><tr><td style="text-align:left">Class C</td><td style="text-align:left"><code>110</code></td><td style="text-align:left">21</td><td style="text-align:left">8</td></tr></tbody></table></div><p>上表中可以知道，最高有效位(<em>从左往右数</em>)表示了网络IP的级别。接着其他的有效位会被分配为netID，其余的有效位定义了hostID。  </p><p>最大的组织会被分配到A类IP。这些A类IP只能有2<sup>7</sup>个，也就是128个，但是每一个组织都可以有224个不同的host。相比之下，C类IP就一共有2<sup>21</sup>个IP地址，差不多一共有200万个。C类IP中每个组织都只能分配到2<sup>8</sup>个host，说白了就是256个host。  </p><p>但是问题在于，一旦局域网下支持PC变得普遍，可用的B类netID就太少了。但是如果把C类ID分配下去的话，hostID又太少了。所以说我们现在有更多更好的方法能解决这些问题。  </p><p>在继续深入探讨之前，我们需要先介绍IP地址的表示。<br>在传输过程中，该技术是以32位二进制码为地址传输的。为了让用户更轻松的记忆，我们可以使用小数点分割编码地址。这就叫做<strong>Dotted-decimal notation</strong>。  </p><p>比如说：  </p><p><code>10000000 00001100 00000010 00011110</code>  </p><p>可以被写成：  </p><p><code>128.12.2.30</code>  </p><p><br></p><hr><h3 id="无类域间路由（CIDR）"><a href="#无类域间路由（CIDR）" class="headerlink" title="无类域间路由（CIDR）"></a><strong>无类域间路由（CIDR）</strong></h3><p>第一种改进方法被叫做 <strong>无类域间路由 (Classless inter-domain routing, CIDR)</strong>。  他保留了netID和hostID的感念，但是取消了固定的结构，允许netID和hostID根据用户的需求划分边界。  </p><p>实现该目标的简单方法是在地址后面添加一个8位后缀，指定netID的位数。  </p><p>例如我们把后缀定义为21，这代表着21位会被用于netID使用，剩下的11位还允许指定2<sup>11</sup>不同的hostID。  </p><p>假如说这样的一串IP地址： </p><p><code>11000011000011000000011000001110/00010101</code></p><p><code>/</code>后面的<code>00010101</code>代表着最高前21位被定义为netID。<br>改写成Dotted decimal notation就是：<code>195.12.6.14/21</code>。  </p><p>由你所见，CIDR不会使用最高位的前几位来定义IP地址是哪一类的。但是他确实会把存在的A,B,C类地址分别转化为后缀为8,16,24的IP地址一起使用。  </p><p><br></p><hr><h3 id="子网"><a href="#子网" class="headerlink" title="子网"></a><strong>子网</strong></h3><p>子网是另一种解决这个问题的方法。通过对hostID搭建一个结构，我们可以更有效地使用hostID。  </p><p>为了学习这一块儿知识，我们考虑一个中型组织的例子，其中大约有150名员工，每个人都有自己的一台PC。<br>假设一共有六个部门的局域网，和一个总体的局域网，那么下图就给定了一个通过原始方案来通过局域网链接Internet的原理图。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB7e156b3a1505b9a22d220cbc61dd2516?method=download&amp;shareKey=a70e00f30d03e889ed0f32efcfa38f8b" alt=""></p><p>该组织这下需要7个C级netID：每个局域网一个。每一个netID都指向一个局域网网关。<br>每个局域网的netID由IPv4地址的前24个bits表示，剩下的8个比特位是hostID。<br>这意味着在一个局域网中存在256个不同的host。  </p><p>如果是在所有7个局域网中，可以确定一共由这些数目的host：  </p><p><code>256 × 7 = 1792</code></p><p>我们提到过这个公司里面一共有150个个人工作站，因此有1642个IP地址未被使用。这些IP地址就被浪费掉了：因为其他组织也不会使用这些IP。  </p><p>然而这个组织的子网解决方案只需要分配到一个C类netID即可。<br>例如分配的IP地址可能是194.10.9.0到194.10.9.225之间，其中netID由前三个字节组成，分别用十进制数194,10,9表示。  </p><p>子网现在通过定义构成hostID的256个代码的结构来工作。<br>对于这个组织来说，一个明智的解决方案是使用前三位作为每个局域网的代码，其余五位作为每个工作站的代码。  </p><p>下图展示了这种布局的示意图：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBea9ee882317c5849fb357bbac184a5d9?method=download&amp;shareKey=5f0b66131ec15c8d6136c82efa1de800" alt=""></p><p>在因特网上，所有分配的IP地址都有一个指向路由器的netID，然后路由器就需要解释hostID，将数据通过网关传输到某个局域网上的适当工作站。<br>工作站可以被这样识别：  </p><ul><li><p>hostID 为 <code>00001110</code>可能是LAN0 (<em>前三位是000</em>) 上面的第十四个工作站 (<em>第三位到第八位是01110</em>)  </p></li><li><p>hostID为 <code>01110000</code> 可能是LAN3 (<em>前三位是011</em>) 上面的第16个工作站 (<em>第三位到第八位是10000</em>)</p></li></ul><p>这样的话一共有256个IP地址，显然这个公司的150个工作站还剩下了106个未使用的IP的地址。这剩下的这些IP地址可以保留：为了公司后期的业务扩张而保留。  </p><p>也就是说，原定需要6个netID的计划，如果使用子网结构，就只需要1个netID。空余出来的netID可以给其他的组织使用。  </p><p><br></p><hr><h3 id="网络桥接-NAT"><a href="#网络桥接-NAT" class="headerlink" title="网络桥接 (NAT)"></a><strong>网络桥接 (NAT)</strong></h3><p><strong>网络地址转换 (Network address translation, NAT)</strong></p><p>网络地址转换是将一个或者多个本地IP地址转换为一个或者多个全局IP地址，同时将全局IP地址转换为一个或者多个全局IP地址的过程，目的是为了为本地主机提供Internet访问。NAT通常是在WAN边缘路由器上实现的，用于实现核心站点，校园网，分支机构和托管站点的Internet接入。  </p><p>在网络地址转换中，网络设备(通常是路由器或NAT防火墙)为私有网络中的一台或多台计算机分配一个公共地址。  </p><p>网络地址转换(NAT)是一种将一个IP地址空间映射到另一个IP地址空间的方法，它通过修改数据包的IP首部中的网络地址信息，使它们在流量路由设备中传输。</p><p>NAT盒子在互联网上有一个可见的IP地址，所以说从互联网发送或者接收数据完全可以使用这个地址。在内部，IP地址就必须从一些范围内选择一个合适的IP地址作为每一个host的IP。  </p><p>NAT解决了上述方案中内部网络无法连接到因特网的问题。  </p><p>需要注意的是，每个地址可以被任意数量的不同的私有网络同时使用。NAT盒子中的接口安装了软件来检查每一个输入和输出的传输。在传入的传输被定向到了正确的内部地址之前，我们可以对他进行安全检查。查看下图的这些箭头，这代表着在内部的网络结构可以使用不同的网络形式来解决问题。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB84deb201ddc07618f9d1b17d14518c3c?method=download&amp;shareKey=a8ff460dd6e2f722ee2a0ff67081c654" alt=""></p><p><br></p><hr><h3 id="动态和静态IP地址"><a href="#动态和静态IP地址" class="headerlink" title="动态和静态IP地址"></a><strong>动态和静态IP地址</strong></h3><p>之前提到：当用户希望与Internet建立连接时，该链接由ISP处理。这样的话，ISP就需要处理很多可用的hostID。然而,ISP就需要同时支持很多hostID。  </p><p>幸运的是，对于ISP和个人用户来说，这些潜在用户中的许多人将不会参与互联网互动。  </p><p>所以说ISP会给用户创建一个<strong>动态地址 (Dynamic IP-address)</strong>。当用户与互联网断开连接的时候，这个IP地址就会被释放掉，然后转让给另一个用户使用。  </p><p>同样我们也可以向用户分配<strong>静态地址 (Static IP-address)</strong>。静态IP地址永远不会改变。如果用户准备支付额外费用的话，那么运营商就可以向用户提供静态IP地址。  </p><p><br></p><hr><h3 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a><strong>IPv6</strong></h3><p>IPv6不同与IPv4，它使用128位来表示IP地址，这样就一共允许2<sup>128</sup>个不同的IP地址存在。  </p><p>所有的IPv6地址都是使用冒号隔开的十六进制来记录。代码被分解为16位一个部分，每一个部分都会使用4个十六进制数表示。  </p><p>如下表所示：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">IPv6 address</th><th style="text-align:left">Comment</th></tr></thead><tbody><tr><td style="text-align:left"><code>68E6:7C48:FFFE:FFFF:3D20:1180:695A:FF01</code></td><td style="text-align:left">一个完整的IPv6的IP</td></tr><tr><td style="text-align:left"><code>72E6::CFFE:3D20:1180:295A:FF01</code></td><td style="text-align:left">在IPv6中，<code>:0000:0000:</code>会被替换为<code>::</code></td></tr><tr><td style="text-align:left"><code>6C48:23:FFFE:FFFF:3D20:1180:95A:FF01</code></td><td style="text-align:left">省略最开始的几个0</td></tr><tr><td style="text-align:left"><code>::192.31.20.46</code></td><td style="text-align:left">一个IPv4地址使用IPv6的形式表示</td></tr></tbody></table></div><p><br></p><hr><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a><strong>域名</strong></h2><p>在互联网的日常使用中，用户需要识别特定的网页或者电子邮箱的网址。作为用户，没人喜欢记录一串复杂且不好记录的IP地址，所以我们发明了<strong>DNS (Domain name system)</strong></p><p>域名服务(DNS)在1983年被发明，DNS服务向互联网主机分配一个可读的域名，并提供一个为单个域名查找IP地址的系统。  </p><article class="message is-info"><div class="message-body"><b>Domain name service (DNS):  a hierarchical distributed database installed on domain name servers that is responsible for mapping a domain name to an IP address. Also known as domain name system.</b></div></article> <p>DNS系统被设置在一个分层的分布式数据库，并安装在覆盖整个互联网的大量域名服务器上。这些域名服务器以层次结构链接，强大的根服务器位于层次结构的顶端，支撑起整个互联网。  </p><p>根服务器是可复制的，这意味着其所有数据的多个副本在任何时候都可以被保存。<br>然后DNS name space会被划分成一些不重叠的区域。每一个区域都有一个主要的名称服务器，上面的数据允许二级服务器从里面读取数据。  </p><p><strong>DNS名称空间 (DNS name space)</strong>是在DNS中注册的所有域名的集合。</p><p>因此域名分层导致超过有250个通用顶级域名。如.com .edu 或者.gov。  </p><p>域名包含在<strong>通用资源定位器 (Universal resource locator)</strong>中。它可以识别网页或者电子邮件地址。  </p><p>一个域名是由它向上的路径命名的。比如说<code>eng.cicso.com</code>指的是<code>.com</code>顶级域名中<code>.cisco</code>中域的<code>.eng</code>子域。  </p><p>通过域名来查找IP地址被称为“<strong>名称解析 (name resolution)</strong>”。<br>对于这样的查询，一共有三种可能的结果：  </p><ul><li>如果该域名在被查询的服务器的控制之下，那么将返回一个权威的、正确的IP地址。  </li><li>如果域名不在服务器的控制之下，如果IP地址存储在最近请求的地址的缓存中，仍然可以返回，但它可能已经过时了。  </li><li>如果查询中的域是远程的，那么查询将被发送到根服务器，它可以提供适当的顶级域的名称服务器的地址。这反过来又可以为下一个低级域的名称服务器提供地址。这种情况一直持续到查询到达可以提供权威性IP地址的名称服务器。  </li></ul><p><br></p><hr><h1 id="第三章：硬件"><a href="#第三章：硬件" class="headerlink" title="第三章：硬件"></a><strong>第三章：硬件</strong></h1><p>终于讲到硬件了  </p><h2 id="关于计算机"><a href="#关于计算机" class="headerlink" title="关于计算机"></a><strong>关于计算机</strong></h2><p>计算机系统必须支持三个主要领域的作战能力：  </p><ul><li>处理数据  </li><li>存储数据  </li><li>输入 / 输出数据  </li></ul><p><strong>一台计算机的核心是CPU (Central Processing Unit)。</strong></p><p><br></p><hr><p><br></p><h2 id="数据的存储，输入与输出"><a href="#数据的存储，输入与输出" class="headerlink" title="数据的存储，输入与输出"></a><strong>数据的存储，输入与输出</strong></h2><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a><strong>存储</strong></h3><p>先来说存储把。</p><p>直接上表：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB08620125ef4847d51d9078aad758f2dc?method=download&amp;shareKey=b5bd394ec28c9c2afa8e65462e92308a" alt="图片"></p><p>这些组件由上至下，属性的变化如下：  </p><p><strong>读写越来越慢</strong><br><strong>存储空间越来越大</strong><br><strong>尺寸越来越大</strong><br><strong>造价越来越便宜</strong></p><p><br></p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a><strong>输入</strong></h3><p>诶这个就很简单了，课本上给了如下几个例子  </p><ul><li>键盘键入  </li><li>用一个指向性的设备 （<em>人话就是鼠标，数位板这样的指向性输入设备</em>）  </li><li>手柄  </li><li>扫描仪  </li><li>麦克风阵列  </li><li>（从以上提到的任何数据输入设备读取数据）  </li><li>网络链路</li></ul><p><br></p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h3><p>和上面一样的清晰明了：</p><ul><li>显示屏  </li><li>打印机与绘图机  </li><li>VR头显 （<em>好像也属于屏幕没错吧</em>）  </li><li>扬声器  </li><li>（写入以上提到的任何数据存储设备）</li><li>网络链路  </li></ul><p><br></p><hr><h2 id="嵌入式系统"><a href="#嵌入式系统" class="headerlink" title="嵌入式系统"></a><strong>嵌入式系统</strong></h2><p><strong>嵌入式系统 (Embedded system)</strong>是在较大的机械或电子系统中具有专用功能的计算机系统。<br>它作为完整设备的一部分嵌入，通常包括电气或电子硬件和机械部件。<br>嵌入式系统也可以在更大的系统中运行。系统可以是可编程的或具有固定的功能。</p><p>嵌入式系统存在与生活中的方方面面，例如:</p><ul><li>消费类电子产品:数码相机、MP3播放器、DVD播放器和打印机。</li><li>家用电器:微波炉、洗衣机、冰箱。</li><li>医疗设备:心脏监测器、血糖仪和x光机。</li><li>汽车系统:发动机控制单元(ECUs)，安全气囊控制器和防抱死制动系统(ABS)。</li><li>工业自动化系统:可编程逻辑控制器(plc)，监控和数据采集(SCADA)系统，分布式控制系统(DCS)。</li></ul><p>嵌入式系统被设计为在一个更大的机械或电子系统中执行一个特定的功能。它们通常是一个完整设备的一部分，包括电气或电子硬件和机械部件。  </p><p>嵌入式系统被编程以执行它所设计的特定功能。例如，洗衣机中的一个嵌入式系统可能被编程为控制水温和旋转周期。同样，数码相机中的嵌入式系统可能被编程为控制快门速度和光圈。</p><p><br></p><hr><h2 id="内存组件"><a href="#内存组件" class="headerlink" title="内存组件"></a><strong>内存组件</strong></h2><p><strong>随机存取存储器 (Random-access memory, RAM)</strong>和<strong>只读存储器 (Read-only memory, ROM)</strong>是计算机存储器的两种类型。  </p><p>RAM是一种易失性存储器，在计算机运行时暂时储存数据。它被称为随机存取存储器，因为任何存储位置都可以被直接访问。RAM用于存储计算机需要快速访问的数据。  </p><p>ROM是一种非易失性存储器，可以永久地存储数据。它被称为只读存储器，因为它只能被读取而不能被写入。它被用来存储那些即使在计算机关闭时也需要保留的数据。</p><p>RAM是易失性存储器，它暂时储存你正在处理的文件。它的速度比ROM快，可以被写入和读出。RAM用于存储计算机需要快速访问的数据。另一方面，ROM是非易失性存储器，永久地存储计算机的指令。它的速度比RAM慢。ROM用于存储需要保留的数据，即使在计算机关闭时也是如此。</p><article class="message is-info"><div class="message-body"><b>Random-access memory (RAM): volatile memory that can be read from or written to any number of times.</b><br><b>Read-only memory (ROM): non-volatile memory that cannot be written to but can be read from any number of times.</b></div></article> <p><br></p><p>有两种一般类型的RAM技术。<strong>动态RAM (Dynamic random-access memory, DRAM)</strong>由<strong>易失电的电容 (capacitors that leak electricity)</strong>构成，因此需要定期充电(每隔几毫秒)以保持所存储数据的特性。  </p><p><strong>静态RAM (Static RAM, SRAM)</strong>由<strong>触发器 (Flip-flops)</strong>构成，当计算机系统打开时，触发器可以无限地存储数据。  </p><p><br></p><p>ROM有专门的用途，用于存储数据或程序，这些数据或程序将不加改变地反复使用。在通用系统中，最重要的用途是存储bootstrap程序。这是一个在系统打开后立即运行的程序。<br>在这样的系统中，ROM还有许多其他的用途，其中一些我们将在本书后面看到。此外，ROM被用于许多嵌入式系统。</p><p>ROM一共有四种类型：  </p><ul><li><p>一般来说，ROM中的程序或数据是作为制造过程的一部分安装的。如果需要不同的内容，必须更换芯片。</p></li><li><p>另一种选择是<strong>可编程ROM (Programmable ROM, PROM)</strong>。芯片的制造商向系统建造者提供芯片。系统构建者将程序或数据安装到芯片中。这允许系统构建者在提交整个批次被编程之前测试一些编程芯片的样本。与最简单的ROM一样，程序或数据一旦安装就不能更改。</p></li><li><p>一种更灵活的ROM类型是<strong>可擦除PROM (Erasable programmable ROM, EPROM)</strong>。已安装的数据或程序可以被擦除（使用紫外线），并可以安装新的数据或新的程序。   然而，这种重新编程通常需要将芯片从电路中移除。  </p></li><li><p>最灵活的ROM类型是<strong>电可擦除式PROM(Electricity Erasable Programmable ROM, EPROM)</strong>。顾名思义，它的工作方式与EPROM类似，只是可以用电信号来删除现有数据。这有一个主要的优点，即当内容被改变时，芯片可以留在电路中。然而，该芯片仍作为只读使用。</p></li></ul><p><br></p><hr><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a><strong>缓存</strong></h3><p>当数据必须从计算机系统的一个部分传输到另一个部分时，如果发送数据的速度比接收数据的速度快，就会出现问题。该问题的解决方案是使用<strong>缓冲区 (Buffer)</strong>。数据在传输到目的地之前先进入缓冲区。<br>缓冲区的功能类似于一个队列，因此数据按照进入缓冲区的顺序出现。<br>通常，缓冲区是在计算机内存中创建的。</p><article class="message is-info"><div class="message-body"><b>Buffer: a temporary storage created for data transmitted from one part of the system to another which functions as a queue.</b></div></article> <p><br></p><hr><h2 id="二级存储"><a href="#二级存储" class="headerlink" title="二级存储"></a><strong>二级存储</strong></h2><p>在讨论存储设备之前，我们应该介绍一些术语。<br>对于任何硬件设备，无论是计算机系统的组成部分还是与之相连的外设，其运行都需要安装适当的软件。这个软件被称为“设备驱动程序”。<br>这不应该与术语“驱动器”相混淆，特别是与存储设备相关联。  </p><p>这一术语最初指的是硬件，即介质在物理上向其传输数据或从其读取数据。然而，就像经常发生的那样，这种区别经常被忽略。因此，例如，“hard disk”，“hard disk drive”或“hard drive”具有相同的含义。</p><p><br></p><hr><h3 id="磁性介质"><a href="#磁性介质" class="headerlink" title="磁性介质"></a><strong>磁性介质</strong></h3><p>磁介质长期以来一直是文件存储技术的支柱。<br>录音磁带的发明比计算机的发明早了许多年。因此，磁带是第一个存储设备。<br>相比之下，硬盘是专门为计算机存储而发明的。硬盘也利用磁化来写入数据，它是在磁带首次用于存储几年之后出现的。  </p><p>对于任何一种类型的磁性介质，与它的相互作用是由一个读头和一个写头控制的。磁头使用的基本物理定律是：磁化状态会影响电学特性，写头使用相反的规律。<br>虽然它们是独立的设备，但两个磁头会合并为一个读写磁头。磁化的两种不同状态被解释为输入或输出。  </p><p>磁盘的结构一般遵循这些特性：  </p><ul><li>磁盘里面有很多层盘。  </li><li>每一层盘的两面都可以存储数据，读取或者写入。  </li><li>盘的转动速度是一致的。  </li><li>读写头被连接到驱动器臂上，驱动器臂允许读写头在盘片表面上移动。  </li><li>每个读写头的运动与其他层读写头的运动同步。  </li><li>在读写头与盘面之间有一层空气，防止磁头接触磁盘表面。  </li></ul><p><br></p><hr><h3 id="光学介质"><a href="#光学介质" class="headerlink" title="光学介质"></a><strong>光学介质</strong></h3><p>与磁带介质一样，光存储是由与计算系统无关的现有技术发展而来的。<br>光盘(CD)演变成CD数字音频(CD-DA)，这成为CD-ROM中使用的技术。它被广泛用于分发软件，但还是无法所谓软盘的替代品。<br>后来出现的读写版本(CD-RW)最终意味着CD完全可以替代软盘。<br>然而，CD现在已经让位于DVD(最初是“数字视频光盘”，但后来改名为“数字多功能光盘”)。<br>最新和最强大的技术是蓝光光碟(BD)。</p><p>光盘驱动器的设计原理图如下图所示。它可以读取波长为780纳米的红外激光CD或波长为680纳米的红色激光DVD。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBe86af2b6d461a61a8a06c13ef35f3c08?method=download&amp;shareKey=fe963d3b4dfd752b223ffe0853adbebb" alt=""></p><p>我们可以忽略驱动器构造的细节，而专注于它如何运作的原理。<br>从磁盘读取数据的过程的重要特性如下:  </p><ul><li>光盘有一条从表面的内端到外缘的螺旋轨道。  </li><li>在读取数据的过程中，光盘会转动。  </li><li>同时，激光会持续聚焦在螺旋轨道上。  </li><li>光盘的表面凹凸不平，有坑(pits)和地(lands)。</li><li>发射的光线会从盘面反射。  </li><li>坑反射与地反射之间的差异是可被检测。</li><li>探测器接收到的光的强度差可以解释为1或0，以便从光盘中读取二进制代码。  </li></ul><p><br></p><p>对于CD-RW和DVD-RW技术，光盘的反射面是由一种特殊的合金材料制成。当数据被写入光盘(“烧录”过程)时，这种材料会吸收激光所产生的热量使材料变为液体形式。<br>根据激光强度的不同，材料冷却后会恢复成晶体或非晶态固体形式。<br>当光盘读取时，激光从晶体固体反射而不是从非晶固体反射，从而允许编码为1或0。</p><p><br></p><hr><h3 id="固体介质"><a href="#固体介质" class="headerlink" title="固体介质"></a><strong>固体介质</strong></h3><p>尽管光学存储技术不断地改进，固态存储器一直是一个巨大的竞争对手。<br>固态存储器的基础是 <strong>“闪存”存储器 (“Flash” memory)</strong>，这是一种没有运动部件（如硬盘的读写头）的半导体技术。  </p><p>这样的电路由作为记忆单元的晶体管阵列组成，在这里常用的技术称之为”NAND”，因为其基本电路类似于NAND逻辑门。  </p><p>所有的存储单元串联在一起，对存储器的写入和读取的操作是由 <strong>NAND闪存控制器 （NAND flash controller）</strong>。它的特别之处在于，存储单元块的内容可以“在瞬间”被全部删除。  </p><p>此外，在将数据写入内存中的一个单元区块之前，必须将该区块内的所有内容先删除。一个内存块有很多好几页内存组成，在读取数据时，一次操作只可以读取一页数据。  </p><p>最常使用的是在<strong>记忆卡 (Memory card)</strong>或<strong>USB闪存驱动器 (USB Flash drive, or Memory stick)</strong>。<br>在后一种情况下，闪存被集成到一个设备中，该设备的内存芯片连接到一个标准的USB连接器。这是目前可移动数据存储的技术选择。<br>由于诸如相变随机存取存储器(PRAM)等替代技术已经在开发中，这种USB闪存技术一统江山的现状会持续多久尚不确定。</p><p><strong>固态硬盘 (Solid state drive, SSD)</strong>是现在市面上很常见的存储产品。由于固态硬盘没有移动部件，像机械硬盘那样的读写头，很多人认为固态硬盘的存储完全可以伴随我们一辈子。  </p><p>但实际上不是这样的。  </p><p>随着我们对固态硬盘的使用，里面的内存颗粒会慢慢退化，进而丢失数据。不过好消息是我们有方法可以检测出有问题的部分并加以修正。  </p><p>SSD与传统硬盘相比最大的优点就是读取速度超快。  </p><p><br></p><hr><h2 id="通用输出设备"><a href="#通用输出设备" class="headerlink" title="通用输出设备"></a><strong>通用输出设备</strong></h2><h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a><strong>显示</strong></h3><p>在第1章我们讲述了如何将图像存储为由像素构成的位图(bitmap)。<br>屏幕显示也是基于像素的概念，但有一个主要的区别。<br>一个屏幕像素由三个子像素组成，通常分别代表红、绿、蓝。<br>通过改变各个子像素发出的光的水平，可以显示出全范围的颜色。</p><p>显示技术这几年迭代的速度十分的快。  </p><p>在最初的<strong>阴极射线管(Cathode ray tube ,CRT)</strong>技术中，每一个像素没有单独的组件支撑起发光的任务。<br>屏幕的内表面覆盖着荧光粉，当电子落在这种荧光粉上时候屏幕就会发光。通过控制电子束的方向，来点亮特定的像素。<br>彩色CRT显示器有独立的红色、绿色和蓝色荧光粉，以像素阵列排列。  </p><p>现在，平板显示技术占据市场的一大半。<br>以<strong>液晶显示技术 (Liquid-crystal display, LCD)</strong>为例：它使用包含液晶的单个单元来创建每个像素。<br>像素矩阵由一个统一的背光 (Backlight)来照明，每个像素都可以控制光的传输，从而创建屏幕上的图像，如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB616876cfe5bd36e2221d7be528db3dd9?method=download&amp;shareKey=cf5b535a73ff18c827a170267f28fdfe" alt=""></p><p>背光照明通常由<strong>发光二极管(LED)</strong>提供。<br>偏振光会指向像素矩阵，并且在像素矩阵和屏幕之间放置更多的偏振器。<br>如果电压施加到单个像素单元，就会影响液晶分子的排列，然后改变光的偏振光，从而改变屏幕上显示的内容。  </p><article class="message is-info"><div class="message-body"><b>Liquid-crystal display (LCD): a screen back-lit by light-emitting diodes and with liquid crystal cells sandwiched between polarisers.</b></div></article> <p><br></p><hr><h3 id="文本输出"><a href="#文本输出" class="headerlink" title="文本输出"></a><strong>文本输出</strong></h3><p>有两种技术已经开始主导从计算机系统中存储的数据打印文档。这些是<strong>喷墨打印机 (Inkjet printer)</strong>和<strong>激光打印机 (Laserjet printer)</strong>。这两种技术都可以用于打印文本或图像。  </p><p>喷墨打印机的工作原理如下:  </p><ol><li>填入一张纸  </li><li>打印头在纸上移动，将墨水打在纸上  </li><li>纸张向前移动一点位置，打印头再次在纸上移动。</li><li>这个过程一直持续到纸张完全打印出来。</li><li>打印头由喷嘴组成，将液滴喷在纸上。墨水从一个或多个墨盒供应到打印头。</li></ol><p>激光打印机的步骤就相对复杂些了：  </p><ol><li>给硒鼓施加一个电荷。  </li><li>硒鼓开始旋转。  </li><li>在每一个步骤中，激光束被镜子和其他光学组件引导到硒鼓上的不同位置。  </li><li>被激光照射到的硒鼓表面会使得电荷存在或者剥离。  </li><li>这个过程重复执行，直到整个硒鼓上面产生了完整的静电图像。  </li><li>硒鼓被涂上一层带电的碳粉，这些碳粉只粘在硒鼓表面被释放电荷的位置。  </li><li>硒鼓在一张赋予电荷的纸上面移动。  </li><li>最后将纸张排出的同时，使用加热过的轮子来融化碳粉，是的碳粉融合，形成图像。  </li><li>在打印下一张文件之前，硒鼓上面的电荷会全部被排掉。  </li></ol><p><br></p><hr><h2 id="通用输入设备"><a href="#通用输入设备" class="headerlink" title="通用输入设备"></a><strong>通用输入设备</strong></h2><p>键盘允许用户输入文本数据。<br>在文本输入过程中，似乎只要按下一个键，就会立即将相应的字符传输到计算机屏幕上，但这是错误的。按键必须先转换为<strong>字符编码(Character code)</strong>，然后传输给处理器。随后，处理器会在操作系统的控制下，确保文本字符在屏幕上显示。<br>如果使用键盘发起某些操作，也会发生相同的过程，例如使用快捷键组合。不同之处在于，处理器必须采取所请求的操作进行响应。</p><p>为了实现这个功能，键盘有电路和它自己的微处理器和ROM芯片。键盘如何工作的重要细节如下：  </p><ol><li>按键位于<strong>按键矩阵 (Key matrix)</strong>的正上方。按键矩阵由一组行列导线组成。  </li><li>按下一个按键后，按键会与导线产生接触，这就会使得行列导线连通，从而允许电流通过。  </li><li>随后，微处理器会不断地检测是否存在电路闭合。如果电路闭合，那么微处理器就可以识别出哪里出现了电路闭合。  </li><li>然后，处理器使用存储在ROM中的数据来识别与该交叉点相关联的字符代码，然后将这个字符发送给计算机。  </li></ol><p><br></p><hr><h3 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a><strong>GUI</strong></h3><p>通过与屏幕的交互，用户可以通过多种方式输入数据。<br>很久之前，计算机系统用户只能使用键盘和鼠标向电脑交互，然后使用屏幕作为显示器。而且当时的UI十分的简陋，用户的屏幕上只能生成一个菜单，用户可以通过从菜单中输入一个数组来选择一个选项。  </p><p>随着<strong>图形化用户界面 (Graphical user interface, GUI)</strong>的普及，用户使用计算机的体验又更上一层楼。具体就是今天的所有图形化操作系统一样，直观，易操作。  </p><p><br></p><hr><h3 id="触摸屏"><a href="#触摸屏" class="headerlink" title="触摸屏"></a><strong>触摸屏</strong></h3><p>触摸屏有两种：<strong>电阻式触摸屏 (Resistive touch screen)</strong>和<strong>电容式触摸屏 (Capacitive touch screen)</strong>。  </p><p>电阻式触摸屏的上层屏幕不是刚性的，所以当手指按压屏幕的时候，屏幕会发生弯曲。这种弯曲就可以被下层检测出阻值的变化，从而推算出手指触摸的位置。  </p><p>但是电阻式触摸屏有一个显著的缺点：他只能支持单点触控，也就是说，只允许同时出现一个物体触控屏幕。  </p><p>另一个是电容式触摸屏。它运用了“人体本身是一种带电体”的原理实现了触摸屏。<br>电容式触摸屏不再需要一个软皮屏幕作为表面了，因为当你的手指触碰屏幕的时候，下层的电路元件会检测到电容的变化。  </p><p>现在最有效的触控技术是基于互电容的<strong>投射性电容触控(Projective capacitive touch, PCT)</strong>技术。这种技术允许我们在屏幕上多点触控。  </p><article class="message is-info"><div class="message-body"><b>Resistive touch screen: a flexible surface that causes contact between electricity resistive layers beneath when touched.</b><br><b>Capacitive touch screen:  a grid surface above a conductive layer that undergoes a change in electrical state when a finger touches the screen.</b></div></article> <p><br></p><hr><h3 id="影像输入"><a href="#影像输入" class="headerlink" title="影像输入"></a><strong>影像输入</strong></h3><p>在计算机中存储和使用图像(图形)数据有几种方法。<br><strong>网络摄像头 (Webcam)</strong>是一种用于将视频图像流式传输到计算机系统的设备。<br><strong>数码相机 (Digital camera)</strong>可以连接到电脑。当链接到电脑时，储存的图像或视频就可以下载到电脑上。  </p><p>另一种选择是使用<strong>扫描仪 (Scanner)</strong>。  </p><p>实际上，扫描仪颠倒了打印过程，它获取图像并从图像中创建数字表示。<br>首先一张包含图像(可能是文本)的纸被固定在一个固定的位置，光源从纸的一端移动到另一端。它覆盖了纸张的宽度。<br>反射光被一个由镜子和透镜组成的系统引导到一个<strong>电荷耦合器件(Charge-coupled device, CCD)</strong>上。随后CCD就会向计算机发送数据。  </p><p>你需要了解下面这些有关于CCD的有趣事实：  </p><ul><li>CCD由光敏单元阵列组成</li><li>CCD产生的电响应与每个电池的光强成正比</li><li>CCD需要一个<strong>模数转换器 (Analogue-to-digital converter)</strong>来产生数字值并传输到计算机。</li></ul><p><br></p><hr><h2 id="声音的输入与输出"><a href="#声音的输入与输出" class="headerlink" title="声音的输入与输出"></a><strong>声音的输入与输出</strong></h2><h3 id="语音输入输出"><a href="#语音输入输出" class="headerlink" title="语音输入输出"></a><strong>语音输入输出</strong></h3><p>IP电话 (IP Telephony)和视频会议 (Video conferencing)是两种同时需要语音输入和语音输出的应用。此外，语音识别可以作为输入数据到计算机的替代技术，而语音合成正被用于越来越多的应用。  </p><p>我们需要一个<strong>麦克风 (Microphone)</strong>来完成声音的输入，这是一种带有隔膜的设备。<br>麦克风中有一种柔性材料，它会因传入的声音而振动。如果膜片连接到合适的电路，振动会引起电信号的变化。<br>电容传声器采用电容变化作为机构;另一种选择是使用压电晶体。模拟电信号通过模数转换器 (ADC)转换成数字信号，以便在计算机内部进行处理。  </p><p>同样我们需要一个<strong>扬声器 (Speaker)</strong>完成音频输出工作。它的工作原理实际上是输入的反向过程。  </p><p>来自计算机系统的数字数据通过数字模拟转换器转换为模拟。模拟信号以变化的电流的形式供给扬声器。<br>在大多数扬声器中，电流流过一个线圈，线圈悬浮在扬声器中永磁体提供的磁场中。随着电流的大小和方向不断变化，线圈向前和向后移动。<br>这种运动控制着<strong>隔膜 (Diaphragm)</strong>的运动，然后隔膜会产生声音。</p><p><br></p><hr><h1 id="第四章：逻辑门与逻辑电路"><a href="#第四章：逻辑门与逻辑电路" class="headerlink" title="第四章：逻辑门与逻辑电路"></a><strong>第四章：逻辑门与逻辑电路</strong></h1><h2 id="布尔逻辑与问题陈述"><a href="#布尔逻辑与问题陈述" class="headerlink" title="布尔逻辑与问题陈述"></a><strong>布尔逻辑与问题陈述</strong></h2><p>这里有一条陈述：  </p><p><code>俄罗斯比新加坡更靠北吗？</code>  </p><p>无论这是不是一个低智商问题，他只有两个答案：<strong>是</strong>或者<strong>不是</strong>。<br>放在布尔值里面就是<code>TRUE</code>和<code>FALSE</code>。  </p><p><br></p><p>我们现在分别假设了以下两个陈述：  </p><ul><li><p>如果<em>天气预报说一会下雨</em>或者<em>现在正在下雨</em>，你就应该出门带伞。  </p></li><li><p>只有<em>在工作时间中</em>并且<em>屋内气温高于25<sup>°</sup>C</em>，才可以开启空调。  </p></li></ul><p>像这样的陈述，我们管他叫做问题陈述：  </p><article class="message is-info"><div class="message-body"><b>Problem statement: an informal definition of an outcome which is dependent on one logic proposition or a combination of two or more logic propositions.</b></div></article> <p><strong>问题陈述：依赖于一个逻辑命题或者两个以上逻辑命题组合的句子。</strong>  </p><hr><h2 id="布尔运算器"><a href="#布尔运算器" class="headerlink" title="布尔运算器"></a><strong>布尔运算器</strong></h2><p>三个基本的布尔运算器分别是<code>AND</code>， <code>OR</code>和<code>NOT</code>。  </p><p>简单说下每一个的表述，A与B都存在两个情况：<code>TRUE</code>或<code>FALSE</code>   </p><ul><li><code>AND</code>：若A为<code>TRUE</code>，B也为<code>TRUE</code>，则<code>A AND B</code>输出为<code>TRUE</code>。  </li><li><code>OR</code>：A或者B两者有一个<code>TRUE</code>，则<code>A OR B</code>输出为<code>TRUE</code>。  </li><li><code>NOT</code>：如果A为<code>FALSE</code>，则<code>NOT A</code>为<code>TRUE</code>  </li></ul><p><br></p><p>像这样，我们在上一个小节中列举的例子就可以使用布尔运算器符进行表示了：  </p><ul><li><p><code>Take_umbrella = TRUE IF (raining = TRUE) OR (rain_forecast = TRUE)</code>  </p></li><li><p><code>AC_on = TRUE IF (office hours = TRUE) AND (temperature &gt; 25)</code>  </p></li></ul><p>现在我们陈述的问题已经变成了像这样的条件语句。我们管这种语句叫做<strong>逻辑表达式</strong>：  </p><article class="message is-info"><div class="message-body"><b>Logic expression: logic propositions combined using Boolean operators, which may be equated to a defined outcome.</b></div></article> <p><strong>逻辑表达式：使用布尔运算符组合的逻辑命题，可以推出一个确切的结果。</strong>  </p><p><br></p><p><br></p><p>任何逻辑表达式都可只使用布尔运算<code>AND</code>, <code>OR</code>和<code>NOT</code>表示，但是只用他们三个就有些麻烦，不如使用一些其他的布尔运算：<code>NAND</code>,<code>NOR</code>和<code>XOR</code>  </p><ul><li><code>NAND</code>:如果A是<code>FALSE</code>或者B是<code>FALSE</code>，则<code>A NAND B</code>输出为<code>TRUE</code>。  </li><li><code>NOR</code>:若A为<code>FALSE</code>，B也为<code>FALSE</code>，则<code>A NOR B</code>输出为<code>TRUE</code>。  </li><li><code>XOR</code>:如果A是<code>TRUE</code>或者B是<code>TRUE</code>，而且两者都不能同时是<code>TRUE</code>，<code>A XOR B</code>会输出为<code>TRUE</code>。  </li></ul><p>等到了学逻辑门的那一节，我再画一个汇总表格。  </p><p><br></p><hr><h2 id="真值表"><a href="#真值表" class="headerlink" title="真值表"></a><strong>真值表</strong></h2><p>真值表简单又强大，可以用来表示任何逻辑表达式或者描述逻辑电路的可能输出结果。  </p><p>在真值表内，我们将<code>TRUE</code>定义为1，<code>FALSE</code>定义为0。这样可以很简单地表示出有关布尔运算的任何逻辑。  </p><p>真值表中的表头分A，B和X。<br>A列和B列代表最初开始的值，而X列则代表经过逻辑运算之后得出的值。<br>也可以通过一个等式表示：<code>X = A AND B</code>。  </p><p>这里我们以<code>AND</code>作为一个例子：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">X</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table></div><p><br></p><hr><h2 id="逻辑电路与逻辑门"><a href="#逻辑电路与逻辑门" class="headerlink" title="逻辑电路与逻辑门"></a><strong>逻辑电路与逻辑门</strong></h2><p>构成计算机系统的内部电路都由逻辑电路运行。这些电路的每个状态要么就是开，要么就是关。（1和0）  </p><p>逻辑电路由一个叫做逻辑门的部件组成，每一个不同的逻辑门都对应着一个布尔运算。  </p><article class="message is-info"><div class="message-body"><b>Logic gate: a component of a logic circuit that has an operation matching that of a Boolean operator.</b></div></article> <p><br></p><p><br></p><p>逻辑门都有他们自己的符号，下图展示了每种逻辑门所对应的布尔运算，图标，和真值表。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBc4c86bb95bdd7c5362e832da16aaf91c?method=download&amp;shareKey=61cee546e9bb8ad8e26ba776d9b0d77d" alt=""></p><p><br></p><p>特别提及以下几点：  </p><ul><li><code>NOT</code>门是一个特例，由于他的输出是他的输入的相反值，<code>NOT</code>只有一个输出。  </li><li><code>NAND</code>门实际上是<code>AND</code>门紧接着跟了一个”NOT”。  </li><li><code>NOR</code>门实际上是<code>OR</code>门后面跟了一个”NOT”。  </li><li><code>NAND</code>和<code>NOR</code>门产生了与<code>AND</code>和<code>OR</code>一样的互补输出。  </li><li><code>XOR</code>是比较输入的两个数据是否不同。<strong>相同输出0，不同输出1</strong>。</li></ul><p><br></p><p><br></p><p>如果想要从真值表构建逻辑电路，我们首先要创建逻辑表达式。<br>要做到这一点，我们只需要看看真值表里面输出为1的行。  </p><div class="table-container"><table><thead><tr><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">X</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table></div><p>我们发现表格中有三行的输出为1，这三行分别是：  </p><p><code>A = 0, B = 0 and C = 1</code><br><code>A = 0, B = 1 and C = 1</code><br><code>A = 1, B = 0 and C = 0</code>  </p><p><em>以上三行中出现的and不代表逻辑运算</em>  </p><p>每一行都可以转换成这样的逻辑表达式：  </p><p><code>NOT A AND NOT B AND C</code><br><code>NOT A AND B AND C</code><br><code>A AND NOT B AND NOT C</code>  </p><p>然后再将这三行结合起来：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NOT A AND NOT B AND C</span><br><span class="line">OR</span><br><span class="line">NOT A AND B AND C</span><br><span class="line">OR A AND NOT B AND NOT C</span><br></pre></td></tr></table></figure><p>现在这个结果就可以用于创建逻辑电路了，但是这个电路是非常复杂的。<br>在后面的第19章，我们会去讲解如何在指定逻辑问题下写出最简便的电路。</p><p><br></p><hr><h1 id="第五章：处理器基本原理"><a href="#第五章：处理器基本原理" class="headerlink" title="第五章：处理器基本原理"></a><strong>第五章：处理器基本原理</strong></h1><h2 id="冯·诺依曼结构"><a href="#冯·诺依曼结构" class="headerlink" title="冯·诺依曼结构"></a><strong>冯·诺依曼结构</strong></h2><p>初中小宝宝都知道的基本知识：  </p><p>冯·诺依曼是第一位解释计算机基本结构原则的人。  </p><p>符合冯·诺依曼结构 (von Neumann model) 的计算机符合以下几个条件：  </p><ul><li>处理器 （CPU） - 负责处理数据<ul><li>处理器可以直接访问内存  </li><li>处理器按顺序执行指令  </li></ul></li></ul><p><br></p><ul><li>内存包含一个“<strong>s存储程序 (Stored program)</strong>”和该程序所需的数据<ul><li>‘存储程序’可以在任何时候被另一个程序替换</li><li>存储程序由独立的指令组成  </li></ul></li></ul><p><br></p><hr><h2 id="中央处理器（CPU）的结构"><a href="#中央处理器（CPU）的结构" class="headerlink" title="中央处理器（CPU）的结构"></a><strong>中央处理器（CPU）的结构</strong></h2><p>中央处理器 (Central Processing Unit),简称CPU。  </p><p>结构图示如下：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB07bdb35bcc4604f42d278288fd7ca8c8?method=download&amp;shareKey=0ef5ed620db555623249697d0ad7a588" alt="CPU结构图"></p><p>然后我们拆开讲解：  </p><p><br></p><hr><h3 id="CPU的活动部分"><a href="#CPU的活动部分" class="headerlink" title="CPU的活动部分"></a><strong>CPU的活动部分</strong></h3><p>CPU的主要活动部分有两部分：   </p><p><strong>Arithmetic Logic Unit (ALU) ：算术逻辑单元</strong>  </p><p>算术逻辑单元是中央处理器的执行单元，进行整数运算的结构。<br>这是个能实现多组算术运算和逻辑运算的组合逻辑电路，是所有中央处理器的核心组成部分。<br>用逻辑门构成的算数逻辑单元，主要进行二位元的算术运算，比如说加减乘。（没有整数除法）  </p><p><br></p><p><strong>Control unit : 控制单元</strong>  </p><p>控制单元负责程序的流程管理，是整个CPU的指挥和控制中心。 </p><p>由三个部件组成：  </p><p><strong>Instruction Register (IR) ： 指令寄存器</strong><br><strong>Instruction Decoder (ID) ： 指令译码器</strong><br><strong>Operation Controller (OC) ： 操作控制器</strong>  </p><p>基本功能是从内存取指令、分析指令和执行指令。  </p><p><br></p><hr><p><br></p><p>在控制单元内有一个重要部分，那就是时钟。<br>控制单元通过时钟来同步处理过程。  </p><p>时钟分两种： <strong>Internal clock</strong> 和 <strong>System clock</strong>  </p><article class="message is-info"><div class="message-body"><b>Internal clock: controls the cycles of activity within the processor.</b><br><br><b>System clock: controls the cycles of activity outside the processor.</b></div></article> <p>Internal clock控制处理器内活动周期。<br>System clock控制处理器外部活动。  </p><p><br></p><hr><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a><strong>寄存器</strong></h3><p><strong>Register</strong>，叫做<strong>寄存器</strong>  </p><p>寄存器是CPU内部用来存放数据的一些小型存储区域，用来暂时存放参与运算的数据和运算结果。<br>之前提到过，寄存器在所有的存储单位里面，与CPU的交互是最快的，造价也是最高的。<br>因为寄存器的位置挨着ALU （算术逻辑单元），所以的读写速度会比较快。<br>寄存器的存储空间都很小，差不多就16、32或者64bits。  </p><p><br>  </p><p>寄存器有<strong>通用的(General purpose)</strong>，也有<strong>专用的(Special purpose</strong>)。<br>如果只存在一个通用寄存器，我们会称其为<strong>累加器 (Accumulator)</strong>。  </p><article class="message is-info"><div class="message-body"><b>Accumulator: a general-purpose register that stores a value before and after the execution of an instruction by the ALU.</b></div></article> <p>上面说：<strong>累加器一种通用寄存器，会在ALU（算术逻辑单元）执行指令之前和之后存储一个值。</strong><br>或者说：<strong>累加器是一种寄存器，用来储存计算产生的中间结果。</strong>  </p><p>如果没有累加器的存在，在每次进行一次计算（加法，乘法，移位等）之后都会把结果写进内存，即便这个结果会马上在接下来的一个运算中直接使用。<br><em>这样就太慢了。</em>  </p><p><br></p><hr><p><br></p><p>专用寄存器也各不相同。下面这张表列出了一些专用寄存器。  </p><div class="table-container"><table><thead><tr><th style="text-align:center">Register name<br>(寄存器名称)</th><th style="text-align:center">Abbreviation<br>(缩写)</th><th style="text-align:center">Register’s function<br>(功能)</th></tr></thead><tbody><tr><td style="text-align:center">Current instruction register<br>(当前指令寄存器)</td><td style="text-align:center"><strong>CIR</strong></td><td style="text-align:center">Stores the current instruction while it is being decoded and executed.<br>(<strong>在对当前指令进行解码和执行时存储该指令</strong>)</td></tr><tr><td style="text-align:center">Index register<br>(变址寄存器)</td><td style="text-align:center"><strong>IX</strong></td><td style="text-align:center">Stores a value; only used for indexed addressing.<br>(<strong>可以存储一个值，而且只用于索引寻址</strong>)</td></tr><tr><td style="text-align:center">Memory address register<br>(储存器地址寄存器)</td><td style="text-align:center"><strong>MAR</strong></td><td style="text-align:center">Stores the address of a memory location or an I/O component which is about to have a value read from or written to.<br>(<strong>存储即将对其进行读取或写入的内存位置或I/O组件的地址</strong>)</td></tr><tr><td style="text-align:center">Memory data register<br><del>memory buffer register</del><br>(内存资料寄存器)</td><td style="text-align:center"><strong>MDR</strong></td><td style="text-align:center">Stores data that has just been read from memory or is just about to be written to memory.<br>(<strong>存储刚从内存中读取或者即将写入内存的数据</strong>)</td></tr><tr><td style="text-align:center">Program counter<br>(程序计数器)</td><td style="text-align:center"><strong>PC</strong></td><td style="text-align:center">Stores the address of where the next instruction is to be read from.<br>(<strong>存储从哪里读取下一条指令的地址</strong>)</td></tr><tr><td style="text-align:center">Status register<br>(状态寄存器)</td><td style="text-align:center"><strong>SR</strong></td><td style="text-align:center">Contains bits that are either set or cleared which can be referenced individually.<br>(<strong>用来存放指令招待后的有关CPU的状态</strong>)</td></tr></tbody></table></div><p><br></p><hr><h2 id="系统总线"><a href="#系统总线" class="headerlink" title="系统总线"></a><strong>系统总线</strong></h2><p><strong>System bus</strong>,又名曰<strong>系统总线</strong>。<br>不过我们需要先理解什么是<strong>总线(Bus)</strong>。  </p><p><strong>总线是连接多个部件的信息传输线，是各部件共享的传输介质。</strong><br>而<strong>系统总线，是CPU、主存、I/O设备各大部件之间的信息传输线。</strong>  </p><p>系统总线分为三部分：<strong>地址总线 (Address bus)</strong>， <strong>数据总线 (Data bus)</strong> 和 <strong>控制总线 (Control bus)</strong>:  </p><p><br></p><p>CPU，内存和I/O与这三部分的总线的关系如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB37ba6027dba5bb7a263b7296bf187d34?method=download&amp;shareKey=b9069a1484092bd4c59ef1257ce6c201" alt="System bus">  </p><p>接下来一个一个说这些总线都是写啥。  </p><p><br></p><hr><h3 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a><strong>地址总线</strong></h3><p>定义：  </p><article class="message is-info"><div class="message-body"><b>Address bus: a component that carries an address.</b> This can be to the memory controller to identify a location in memory which is to be read from or written to or it can be to the I/O system to identify the source or destination of the data.</div></article> <p><strong>地址总线 (Address bus)：用来指出数据总线上的源数据或目的数据在主存单元的地址或I/O设备的地址。</strong>  </p><p>地址总线的唯一功能是携带地址。  </p><p>当控制单元给到了一个命令后，地址会从MAR（储存器地址寄存器）中加载到总线上。<br>一个地址制定了内存中的一个位置，或者一个待接受的数据，亦或者是从中读取数据的一个I/O组件。  </p><p><strong>地址总线是单向的</strong>，所以说<strong>它只能向内存控制器 (Memory controller)或者I/O控制器 (I/O Controller)发送地址，不能用于将地址传回到CPU。</strong>  </p><p><br></p><p>地址总线的带宽定义了地址的二进制代码中的位数。<br>以一个很基础的计算机系统为例子：总线带宽是16位，因此它允许65536个 (2<sup>16</sup>)内存位置被直接寻址。  </p><p>不过对于现代计算机系统来说，这点儿内存是完全不够用的：即便将地址总线的宽度增加到32位，也仅仅允许40多亿个地址进行直接寻址。  </p><p>因此当内存容量比直接寻址大得多的时候，我们会使用到一些特殊技巧。  </p><p><br></p><hr><h3 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a><strong>数据总线</strong></h3><article class="message is-info"><div class="message-body"><b>Data bus: a component that can carry data from the processor to the memory or to an output device or can carry data from the memory or from an input device.</b></div></article> <p><strong>数据总线 (Data bus)：用来传输各功能部件之间的数据信息。</strong>   </p><p>数据总线的功能是传送数据，传输的数据可以是指令，地址，也可以是一个确切的值。  </p><p><strong>数据总线是双向的(Bidirectional)</strong>，这意味着它可以将数据从CPU传输到内存，也可以从内存传输到CPU。<br>同样的，数据总线也可以选择将数据传入I/O设备，或者从I/O设备传出数据。  </p><p>在上面的那张图里面，没有明确表示出从输入设备发来的数据是先传输到CPU还是存储器里面，这么做是有依据的。<br>比如：部分计算机系统只允许数据存储在内存之前输入CPU，也有的系统允许数据直接传输到内存。  </p><p><br>  </p><hr><h3 id="控制总线"><a href="#控制总线" class="headerlink" title="控制总线"></a><strong>控制总线</strong></h3><p><strong>控制总线 (Control bus)： 用来发出各种控制信号的传输线。</strong>  </p><p><del>书上没有定义</del>  </p><p>控制总线的主要用途是<strong>传送定时信号</strong>。<br>控制总线以时钟周期规定的时间间隔，传输定时信号，这就确保了一个组件传输数据的时间和另一个组件读取数据的时间同步。  </p><p><strong>数据总线也是双向的(Bidirectional)</strong>，数据总线将信号从控制单元传输到任何其他的系统部件，或者将信号传回到控制单元。  </p><p>数据总线没啥必要拓宽带宽，所以数据总线一般有八条导线。  </p><p><br></p><hr><h2 id="左右系统性能的因素"><a href="#左右系统性能的因素" class="headerlink" title="左右系统性能的因素"></a><strong>左右系统性能的因素</strong></h2><p>首先是处理器时钟速度。  </p><p>处理器时钟速度<em>可能是</em>决定系统处理速度的一个重要因素。因为<strong>一个时钟周期定义了任何操作可以采取的最短时间</strong>。但是“可能是”也是有原因的，因为并不是所有的部件都可以像CPU那样飞速计算。  </p><p>因为这个问题，一个现代的CPU的结构远比我们讨论的CPU结构复杂。<br>比如说，现在的CPU基本都是多核的，每一个核都是一个单独的处理器，CPU性能也会随着核心数量的增加而增加。而且现代CPU的高速缓存一般都全部封装在CPU的内部，因此达到最快的访问速度。  </p><p>在继续下面的内容之前，我们需要了解什么是字。  </p><h3 id="字"><a href="#字" class="headerlink" title="字"></a><strong>字</strong></h3><p>没错，这东西就叫字。  </p><article class="message is-info"><div class="message-body"><b>Word: a small number of bytes that can be handled as a unit by the computer system.</b></div></article> <p>*<em>一个小的字节数,可以由计算机系统作为一个单元处理</em>  </p><p><strong>计算机进行数据处理时，一次存取、加工和传送的数据长度称为字 (Word)。</strong><br><strong>计算机的每个字所包含的位数称为字长。</strong></p><p><br></p><p>一个字通常由一个或多个（一般是字节的整数位）字节构成，<strong>计算机的字长决定了其CPU一次操作处理实际位数的多少</strong>，由此可见计算机的字长越大，其性能越优越。  </p><p>多多少少与你操作系统的位数有关，典中典的字长，有16、32或者64位，分别是2、4、8字节。  </p><p>字长将会影响组件存储容量和架构方面的设计。比如说，寄存器的大小一般都会与字长匹配，字长也会影响总线带宽。  </p><p><br></p><hr><h2 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a><strong>I/O</strong></h2><p><strong>I/O，全称(Input/Output)，代表输入/输出。</strong>  </p><p>我们一般指数据在内部存储器和外部存储器或其他周边设备之间的输入和输出。  </p><p>每一个I/O设备都会被连接到一个叫做“端口”的接口，每个端口都连接到I/O或者设备控制器 (Device controller)。  </p><p>顺带一提<strong>设备控制器 (Device controller)负责处理CPU和I/O设备之间的交互。</strong>  </p><p>如果连接的I/O设备是计算机系统的一个组成部分，我们就将连接它的端口叫做内部端口。<br>反之，连接其他外围I/O设备的端口，叫做外部端口。  </p><p><br></p><hr><h3 id="USB"><a href="#USB" class="headerlink" title="USB"></a><strong>USB</strong></h3><p>简单说下USB。  </p><p><strong>USB，全程 Universal Serial Bus,译为通用串行总线。</strong><br>现在你可以在几乎任何设备上见到它。  </p><p>USB的出现至关重要。在USB诞生之前，普通用户一般不会去尝试添加外设，因为当时添加外设需要一定的技术知识。  </p><p>USB的出现推动了即插即用技术的发展，即插即用技术诞生的目标就是消除人们对于技术水平的需求，所以任何计算机用户都可以连接他们需要的外设。即插即用只有通过创建USB标准才能实现。  </p><p>*<em>USB是一条总线，USB驱动器存储数据并连接到USB端口，USB端口允许数据沿着总线传输。</em>  </p><p><br></p><hr><h3 id="专用多媒体端口"><a href="#专用多媒体端口" class="headerlink" title="专用多媒体端口"></a><strong>专用多媒体端口</strong></h3><p>这也不代表着所有的外部设备都使用这USB作为数据传输的媒介：一些特定的设备需要特定的接口。  </p><p>在几年之前(<em>HDMI还不算流行的日子</em>)，投影仪或者显示器之类的设备选择使用VGA (Video Graphics Array : 视频图形阵列)接口进行连接，传输视频流。  </p><p>而现在，这类设备都基本采用的DP(Displayport)接口或者HDMI(High Definition Multimedia Interface : 高清多媒体接口)接口，其中一个原因是VGA并不支持传输音频数据。  </p><p><br></p><hr><h2 id="指令周期"><a href="#指令周期" class="headerlink" title="指令周期"></a><strong>指令周期</strong></h2><p>指令周期，又名读取－执行周期 (fetch-and-execute cycle)，指的是CPU要执行指令需要经过的步骤。  </p><p>计算机之所以能自动地工作，是因为CPU能从存放程序的内存里取出一条指令并执行这条指令；紧接着又是取指令，执行指令，如此周而复始，构成了一个封闭的循环。除非遇到停机指令，否则这个循环将一直继续下去。  </p><p>下图展示了一个指令周期的结构：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB8880a148d3160e94b1183f21b8cdff9e?method=download&amp;shareKey=621a92c868fbda37e22608bdb0c8bb51" alt="Fetch-execute cycle">  </p><p>图中，我们假设程序已经在运行。所以程序计数器就会找到下一条指令的地址。  </p><p>在提取阶段，会执行以下步骤：  </p><ol><li>首先，下一个指令的地址会存在程序计数器(Program counter，可写作PC)中。这个地址会先被传送到MAR(Memory address register)中。  </li></ol><p>随后处理器开始工作。  </p><ol><li><p>在下一个时钟周期内，这两件事会同时发生：  </p><ul><li>在MAR所指向的地址中保存的指令被提取到MDR(Memory data register)中</li><li>程序计数器(Program counter)中存储的地址+1。  </li></ul></li><li><p>然后在MDR中存储的指令会在CPU中传输到CIR(Current instruction register)<br>这里需要注意两点：  </p><ul><li>时钟周期是由系统时钟控制的周期。系统时钟将有设置，允许在为一个周期定义的时间内从内存发生一次数据传输。  </li><li>在最后一步中，程序计数器会加一。但是如果刚才加载的指令是一个跳转指令，程序计数器就必须根据跳转条件更新程序计数器的内容。这一步只会在指令被解码之后发生。  </li></ul></li></ol><p>在解码阶段，存储在CIR中的指令就会作为输入内容，被控制单元内的电路读取。根据指令的类型，控制单元会向适当的组件发送信号，准备开始执行阶段。<br>在执行阶段内，如果指令需要算数或者逻辑处理，就会把ALU拉下水。  </p><p><br></p><hr><h2 id="寄存器传输语言"><a href="#寄存器传输语言" class="headerlink" title="寄存器传输语言"></a><strong>寄存器传输语言</strong></h2><p><strong>寄存器传输语言 (Register transfer notation)，表示了寄存器数据传输操作和各模块内部和模块之间连接关系的记法。</strong>  </p><p>涉及到寄存器的操作可以通过这种语言描述。<br>举个例子，一个完整的指令周期的fetch阶段可以被这样表示：  </p><p>    <code>MAR ⬅ [PC]</code>  </p><p>    <code>PC ⬅ [PC] + 1; MDR ⬅ [[MAR]]</code>  </p><p>    <code>CIR ⬅ [MDR]</code></p><p>在寄存器传输记法中，单个数据传输的基本格式与变量赋值的格式相似。  </p><p><strong>箭头左边的那一项是数据的目的地</strong>，这里使用适当的缩写来标识特定的寄存器。<br><strong>箭头右边是那个数据的定义</strong>。在这个定义中，<strong>寄存器缩写周围的方括号表示正在移动寄存器的内容</strong>，这个动作也可能包括一个算术运算。<br><strong>当两个数据操作放在由分号分隔的同一行上时，这意味着两个传输同时进行</strong>。<br>第二行的两对方括号需要注意下：MAR的内容是一个地址;它是该地址的内容，正在被转移到MDR</p><p>两队方括号代表<strong>CPU必须进行一个逻辑处理，然后才能复制该值。</strong></p><p><br></p><hr><h2 id="中断处理"><a href="#中断处理" class="headerlink" title="中断处理"></a><strong>中断处理</strong></h2><p>计算机有很多情况会产生中断。比如说：  </p><ul><li>程序中的一个严重错误  </li><li>硬件问题  </li><li>等待I/O开始处理数据  </li><li>用户交互  </li><li>一个计时器信号  </li></ul><p>在产生了中断后，我们需要处理这些发生的中断。每一个不同的中断需要进行合适的处理，不同的中断还会有不一样的优先级，因此，处理器就必须具备判断中断类型的能力。  </p><p>在处理器中加入一个中断寄存器可以是一个方法。它的工作方式与状态寄存器很相似：每一个单独的bit都作为特定类型中断的标志。  </p><p><br></p><hr><h1 id="第六章：汇编语言程序设计"><a href="#第六章：汇编语言程序设计" class="headerlink" title="第六章：汇编语言程序设计"></a><strong>第六章：汇编语言程序设计</strong></h1><h2 id="机器码"><a href="#机器码" class="headerlink" title="机器码"></a><strong>机器码</strong></h2><h3 id="操作码与操作数"><a href="#操作码与操作数" class="headerlink" title="操作码与操作数"></a><strong>操作码与操作数</strong></h3><p>在深入了解什么是机器码之前，我们需要先了解什么是操作码和操作数。</p><p><br></p><hr><p><br></p><article class="message is-info"><div class="message-body"><b>Opcode: defines the action associated with the instruction</b></div></article> <p><em>操作码:定义与指令相关联的操作</em>  </p><p>操作码指计算机程序中所规定的要执行操作的那一部分指令或字段。其实就是指令序列号，用来告诉CPU需要执行哪一条指令。  </p><p>指令系统的每一条指令都有一个操作码，它表示该指令应进行什么性质的操作。<br>不同的指令用操作码这个字段的不同编码来表示，每一种编码代表一种指令。组成操作码字段的位数一般取决于计算机指令系统的规模。</p><p><br></p><hr><p><br></p><article class="message is-info"><div class="message-body"><b>Operand: defines any data needed by the instruction</b></div></article> <p><em>操作数：定义指令需要的任何数据</em></p><p>操作数指出指令执行的操作所需要数据的来源。操作数是汇编语言指令的一个字段。</p><p><br></p><hr><h3 id="机器码-1"><a href="#机器码-1" class="headerlink" title="机器码"></a><strong>机器码</strong></h3><p>所以说什么是机器码？  </p><article class="message is-info"><div class="message-body"><b>Machine code instruction: a binary code with a defined number of bits that comprises an opcode and, most often, one operand</b> </div></article> <p><em>机器指令码(Machine code instruction):由一个操作码和一个操作数(通常是一个操作数)组成的二进制代码</em>  </p><p>机器码是机器指令码的缩写。  </p><p><br></p><p>一开始，我们用机器码来编写程序，称之为机器语言。<br>机器语言虽然能够被计算机理解和接受，但毕竟根人话完全不擦边，不易被人们理解和记忆，并且用它编程容易出差错。<br>所以，我们用助记符 (mnemonic) 代替机器码，从而形成了汇编语言。这让指令容易理解和记忆，而且便于交流。</p><p><br></p><p>在继续下面的内容之前，我需要列举几个事实中的事实：  </p><ul><li>在所有语言里面，CPU只认<strong>机器码 (Machine code)</strong></li><li>机器代码由一系列指令组成  </li><li>一条指令中包含一个<strong>操作码 (opcode)</strong>  </li><li>一条指令可以没有<strong>操作数 (operand)</strong>，但最多可以有三个操作数  </li><li>不同的处理器有不同的指令集  </li><li>对于相同的操作，不同的处理器会有类似的指令，但是指令的编码是不同的。  </li></ul><p>对一个特定的处理器来说，每个单独的机器码指令都必须定义了以下内容：  </p><ul><li>整个指令的总比特数或字节数  </li><li>定义操作码的位数 (<em>number of bits that define the opcode</em>)  </li><li>在剩余位 (<em>remaining bits</em>) 中定义的操作数的个数  </li><li>操作码占用最高有效位 (<em>most significant bits</em>) 还是最低有效位 (<em>least significant bits</em>)  </li></ul><p><br></p><p>操作码所需要的位数取决于处理器指令集中不同操作码的数量。操作码可以由定义操作的前几位和与寻址相关的剩余位构成。下图展示了简单处理器的合理指令格式：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB13c4419645cb8310b1323b57a0a3fe78?method=download&amp;shareKey=e03683744089f148c6ebec24f58df1e5" alt="A s1mple instruction format">  </p><p>一条指令由两部分组成：操作码和操作数<br>操作码长度为8位，其中有4位用来记录操作，2位用于记录地址类型，剩余的位数交给寻址寄存器处理。<br>此操作码将占用指令中的最高有效位。因为在某些情况下操作数会是一个内存地址，给它分16位可以与地址总线的位数一致。  </p><p><br></p><p>当一条指令到达CPU的时候，控制单元会先检查操作码，来解析这一条指令定义了什么操作。这一步在指令周期内属于解码步骤。<br>它可以使用上一张学过的寄存器传输语言进行描述，但是需要进行一些小小的修改。  </p><p><br></p><p>       <code>CU ⬅ [CIR(23:16)]</code>  </p><p><br></p><p>这一行表示了16到23位之间的数据(表示的是操作码)从当前指令寄存器中传输到控制单元。  </p><p><em>p.s.</em><br>上面图片中一串命令一共有24位。我们从左边数第一个位，记为第0位，同理可得最后一位是第23位。<br>如果命令中大位在前小位在后，代表位数是从后往前数<br>同样的，小位在前大位在后，代表位数是从前往后数</p><p><br></p><hr><h2 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a><strong>汇编语言</strong></h2><p>程序员们希望能够编写一种程序，这种程序可以直接控制处理器的一举一动。<br>有些人认为这是最有效的程序类型，但是作为一个正常人用机器码程序会把你累个半死，因为这样的程序确实难写，很抽象的。<br>因此将一个实质性的程序以机器码的形式来进行编写就会花费很长很长的时间，并且人在编写这种语言的时候会经常犯错，因为机器码和人类语言相差的太远了。<br>针对这种编程需求，汇编语言是最好的解决方案。除了具有唯一定义的机器代码语言之外，每个处理器都有自己的汇编语言。  </p><p><br></p><hr><p><br></p><article class="message is-info"><div class="message-body"><b>Assembly language: a low-level language related to machine code where opcodes are written as mnemonics and there is a character representation for an operand</b> </div></article> <p><em>汇编语言 (Assembly language) :是一种与机器码有关的低级语言，其中操作码被写成助记符 (mnemonic) 形式，并且操作数用字符表示</em>  </p><p>低级语言的低级不是说它有多拉跨，而是指汇编语言比较接近硬件底层。  </p><p>在汇编语言中，我们用助记符代替机器指令的操作码，用地址符号或标号代替指令或操作数的地址。<br>特定的汇编语言和特定的机器语言指令集是一一对应的，不同平台之间不可直接移植。  </p><p><br>  </p><hr><p><br></p><article class="message is-info"><div class="message-body"><b>Assembler: a program used to translate an assembly language program into machine code</b> </div></article><p><em>汇编器 (Assembler) :用来把汇编语言程序翻译成机器代码的程序</em>  </p><p>如果用汇编语言写出一个程序，他必须要被翻译成机器码才能够被CPU执行。翻译的活就是汇编器干的。</p><p>一般而言，汇编生成的是目标代码，需要经链接器（Linker）生成可执行代码才可以执行。<br>作为一门语言，对应于高级语言的编译器，需要一个“汇编器”来把汇编语言原文件汇编成机器可执行的代码。  </p><p><del>把半人话翻译成电脑话</del>  </p><p><br>  </p><hr><p><br></p><p>汇编语言的本质是，对于每条机器代码指令，都有一条等价的汇编语言指令，其中包括:  </p><ul><li>操作码的助记符(符号缩写)  </li><li>操作数的字符表示形式</li></ul><p>汇编语言的优点比较明显，比如说对程序员来说，汇编语言相比机器码写起来要更加容易。<br>此外，汇编语言还允许程序员们做一些机器码无法做到的事情，比如说：  </p><ul><li>做注释  </li><li>用符号做变量名  </li><li>地址标签  </li><li>宏命令 </li><li>指令 (Directives)  </li></ul><p>这里的指令告诉汇编器如何构造最终可执行机器代码的指令。<br>而宏命令是代表程序中要多次使用的一系列指令。有点像鼠标宏：记录鼠标移动信息之后，按某个键触发后回放此路径。  </p><p><br></p><hr><h2 id="寻址类型"><a href="#寻址类型" class="headerlink" title="寻址类型"></a><strong>寻址类型</strong></h2><p>有如下几种寻址类型：  </p><p><strong>Symbolic addressing: 符号寻址</strong><br><strong>Relative addressing: 相对寻址</strong><br><strong>Absolute addressing: 绝对寻址</strong>  </p><p>当考虑汇编程序是如何将汇编语言程序转换为机器码是，我们很有必要去了解下他们之间的区别。<br>我们假设有这样一个汇编程序，它的目的就是把键盘上输入的单个数字相加。<br><strong>我们会在接下来的文章内反复使用这个例子！</strong>所以说好好看看这个程序是很有必要的（  </p><p>下表左侧分步骤描述了一个使用符号寻址编写的汇编程序，以及对每条指令的解释：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">使用符号寻址的汇编程序 命令 (助记符+参数)</th><th style="text-align:center">命令解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>IN</code></td><td style="text-align:center">这一步通过键盘输入一个数字，并将它的ASCII码存入进累加器中</td></tr><tr><td style="text-align:center"><code>SUB #48</code></td><td style="text-align:center">这一步是减法运算，将ASCII码转换成二进制</td></tr><tr><td style="text-align:center"><code>STO MAX</code></td><td style="text-align:center">声明一个地址，名称为<code>MAX</code>，将累加器中的数字存储进去</td></tr><tr><td style="text-align:center"><code>LDM #0</code></td><td style="text-align:center">向累加器中添加<code>0</code></td></tr><tr><td style="text-align:center"><code>STO TOTAL</code></td><td style="text-align:center">将累加器中的这个<code>0</code>存入一个地址，名称为<code>TOTAL</code></td></tr><tr><td style="text-align:center"><code>STO COUNT</code></td><td style="text-align:center">将累加器中的这个<code>0</code>存入一个地址，名称为<code>COUNT</code></td></tr><tr><td style="text-align:center"><code>STRTLP :IN</code></td><td style="text-align:center">再次通过键盘输入一个数字，并将它的ASCII码存入进累加器中</td></tr><tr><td style="text-align:center"><code>SUB #48</code></td><td style="text-align:center">这一步是减法运算，将ASCII码转换成二进制</td></tr><tr><td style="text-align:center"><code>ADD TOTAL</code></td><td style="text-align:center">将地址为<code>TOTAL</code>的值与累加器中的值相加，并将总和存储在累加器中</td></tr><tr><td style="text-align:center"><code>STO TOTAL</code></td><td style="text-align:center">然后再把累加器中的数据存入名叫<code>TOTAL</code>的地址中</td></tr><tr><td style="text-align:center"><code>LDD COUNT</code></td><td style="text-align:center">将存储在地址<code>COUNT</code>的值加载到累加器中</td></tr><tr><td style="text-align:center"><code>INC ACC</code></td><td style="text-align:center">向累加器中加<code>1</code></td></tr><tr><td style="text-align:center"><code>CMP MAX</code></td><td style="text-align:center">比较累加器中的值与存储在地址<code>MAX</code>中的值</td></tr><tr><td style="text-align:center"><code>JPN STRTLP</code></td><td style="text-align:center">如果比较值不相等，程序会跳转回标记为<code>STRTLP</code>的指令</td></tr><tr><td style="text-align:center"><code>END</code></td><td style="text-align:center">程序结束执行</td></tr><tr><td style="text-align:center"><code>MAX:</code></td><td style="text-align:center">一个可以存储值的标记地址</td></tr><tr><td style="text-align:center"><code>TOTAL:</code></td><td style="text-align:center">一个可以存储值的标记地址</td></tr><tr><td style="text-align:center"><code>COUNT:</code></td><td style="text-align:center">一个可以存储值的标记地址</td></tr></tbody></table></div><p>其中有几行需要格外解释下：  </p><p><strong>LDM (Load much): 多数据加载,将地址上的值加载到寄存器上</strong></p><p>按照惯例：标签的后面会写有冒号，但是引用标签的时候需要去除冒号。  </p><p><br> </p><hr><p><br></p><p>使用符号寻址可以让程序员使用汇编语言代码，而不需要担心程序运行的时候代码在内存中的位置。<br>编写汇编代码也可以将符号寻址替换为相对寻址或绝对寻址。  </p><p>下表显示了上面那个表格中使用这些替代方法转换后的简单代码：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB38e3562e28832957b60b19339bbc7068?method=download&amp;shareKey=b8c26385c454c64539b9dd9707f054f5" alt="Table"></p><p>你可能发现在相对寻址改写的程序中，有<code>[BR]</code>这个东西。<br>这里我们假设有一个基址寄存器 (base register)，包含程序基址。<br><strong>程序基址是程序中第一条指令的地址。</strong> 查看上图的例子：使用绝对寻址的程序的第一行代码的地址是200，所以BR中存储的基址为200。<br>调用基址寄存器中的内容，可以使用<code>[BR]</code>。  </p><p><br></p><hr><h2 id="两步汇编程序的汇编过程"><a href="#两步汇编程序的汇编过程" class="headerlink" title="两步汇编程序的汇编过程"></a><strong>两步汇编程序的汇编过程</strong></h2><p>对于任何汇编程序，在进行任何转换之前，都必须对汇编语言代码进行许多处理。比如说：  </p><ul><li>移除注释  </li><li>用构成宏定义的指令列表替换指令中使用的宏名称  </li><li>删除和存储稍后要执行的指令</li></ul><p><br></p><hr><p><br>  </p><p>我们在<strong>寻址类型</strong>章节里面设计了一个汇编程序，这个程序内包括了向前引用。<br>有些指令有操作数的符号地址，但在程序的那个阶段，我们不知道这个地址的位置。需要一个两遍汇编程序，以便在第一遍中确定前向引用的地址的位置。  </p><p>为了在第一次传递期间实现这一点，汇编程序使用了一个符号表。<br>代码是逐行读取的。当一个符号地址第一次遇到时，这个名字就会被输入到一张符号表中。<br>在名称旁边，必须尽快添加一个相应的地址，以便识别。  </p><p>下表给出了针对<strong>寻址类型</strong>章节中那个程序创建的符号表。</p><div class="table-container"><table><thead><tr><th style="text-align:left">Symbol</th><th style="text-align:center">Offset</th></tr></thead><tbody><tr><td style="text-align:left"><code>MAX</code></td><td style="text-align:center">+15</td></tr><tr><td style="text-align:left"><code>TOTAL</code></td><td style="text-align:center">+16</td></tr><tr><td style="text-align:left"><code>COUNT</code></td><td style="text-align:center">+17</td></tr><tr><td style="text-align:left"><code>STRTLP</code></td><td style="text-align:center">+7</td></tr></tbody></table></div><p>请注意，汇编程序在读取代码时必须对指令进行计数。当它遇到一个标签时，汇编程序可以将偏移值(offset)输入到符号表中。  </p><p><em>用人话来讲就是数顺序来让处理器确定自己读的是哪一行代码。</em><br>把程序的开始设为偏移值为零，则<code>IN</code>这个操作有+1的偏移量，有<code>STRTLP</code>的那一行机器码的偏移量是+7</p><p><br>  </p><hr><p><br></p><p>在第二步中，汇编程序会使用符号表(symbol table)和一个查找表(lookup table)，表格中包含每个操作码的二进制代码。<br>每一个处理器定义过的操作码，在这个表里都可以找到对应的信息。  </p><p>下表列出了我们举的例子中使用的指令对应的条目。需要注意的是：这里的二进制代码是对于待使用代码的一个建议。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBf3650c45807785f33ac93b368fa88b62?method=download&amp;shareKey=df38fda7b2a948a32f27df18fe2e4990" alt="Table"></p><p>如果不出意外的话（比如说汇编发生错误），那么第二遍的输出就是机器码程序了。<br>下面这个表格将原始汇编代码和编译好的机器码程序列在了一起，我们可以简单比较一下：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBab306e5096e4bc745cbe01207487e10b?method=download&amp;shareKey=8375e8b3c421e667241633a2d4e187a3" alt="Table"></p><p><br></p><p>有以下几点需要简单注意下：  </p><ul><li>大多数的指令都有一个16位二进制数的操作数。  </li><li>通常来说这表示一个地址，但对于<code>SUB</code>和<code>LDM</code>指令，操作数会被用作一个值。  </li><li><code>IN</code>和<code>END</code>指令没有操作数。  </li><li><code>INC</code>指令是一个特例。汇编语言代码中存在操作数，但它只用来定义寄存器。在机器码中，寄存器是在操作码中标识的，因此就不需要操作数了。</li><li>在编译机器码的时候，第一个步骤会占用第零个地址。</li><li>像这种形式的代码是不可执行的，但它却是汇编程序的一个有效输出。</li><li>当程序加载到内存中准备执行时，就需要把地址稍微改改了。</li><li>程序代码之后的三个内存位置将会分配为零，以确保程序执行后可以正常使用它们。</li></ul><p><br></p><hr><h2 id="寻址模式"><a href="#寻址模式" class="headerlink" title="寻址模式"></a><strong>寻址模式</strong></h2><p>当一条指令需要将一个值加载到寄存器中时，我们有不同的方法来识别该值。其中的每一种都被称为寻址模式 (Addressing mode)。  </p><p><em>顺带附上寻址模式的定义：</em>  </p><article class="message is-info"><div class="message-body"><b>Addressing mode: when the instruction uses a value this defines how the operand must be used to find the value.</b> </div></article><p>*<em>当指令需要使用一个值时，寻址模式定义了如何使用操作数来查找这个值。</em></p><p>在本单元的开始就说过：对于一个简单处理器，机器码指令中的操作码位将用于定义寻址模式。加起来一共允许有4种不同的寻址模式，如下表所示。  </p><div class="table-container"><table><thead><tr><th style="text-align:left">寻址模式</th><th style="text-align:left">操作数的使用</th></tr></thead><tbody><tr><td style="text-align:left"><strong>Immediate</strong><br>立即寻址</td><td style="text-align:left">在这种情况中，操作数是<strong>要在指令中使用的值</strong>；<br><code>SUB #48</code><br>就是一个很好的例子。<br><br><strong><em>人话：操作数是一个确切的数学值，不需要存入任何累加器就可以直接引用的值。比如说全体正整数。</em></strong></td></tr><tr><td style="text-align:left"><strong>Direct</strong><br>直接寻址</td><td style="text-align:left">在这种情况中，操作数是<strong>保存要在指令中使用的值的地址</strong>；<br><code>ADD TOTAL</code><br>是其中的一种情况。<br><br><strong><em>人话：操作数是一个地址，执行指令的时候会使用操作数指定内存中的数据</em></strong></td></tr><tr><td style="text-align:left"><strong>Indirect</strong><br>间接寻址</td><td style="text-align:left">在这种情况中，操作数是<strong>一个地址</strong>，这个地址记录了<strong>要在指令中使用的值</strong>。<br><br><strong><em>人话：操作数是一个地址，但是与直接寻址不同的是：此操作数中的值会被作为一个新的地址再次重定向，直到读取该重定向后地址中的值。</em></strong></td></tr><tr><td style="text-align:left"><strong>Indexed</strong><br>变址寻址</td><td style="text-align:left">在这种情况中，操作数是<strong>一个地址</strong>，但是<strong>必须将当前变址寄存器(IX)中的值加到该地址上</strong>，才可以获得要在指令中使用的值的地址。<br><br><strong><em>人话：操作数是一个地址，但是最后调用数据的地址是当前操作数所定义的地址数加上变址寄存器的值，并找到最后的值。</em></strong></td></tr></tbody></table></div><p>对于立即寻址，有三种定义值的选项:  </p><ul><li><code>#48</code>指定了十进制值48  </li><li><code>#B00110000</code>指定等价的二进制内容  </li><li><code>#&amp;30</code>指定了等价的十六进制内容  </li></ul><p><br></p><hr><h2 id="汇编语言指令"><a href="#汇编语言指令" class="headerlink" title="汇编语言指令"></a><strong>汇编语言指令</strong></h2><p>继续回到具有有限指令集的简单处理器上。<br>我们在这里举出的所有例子，都不会与特定处理器的汇编所匹配。<br>每一个指令都需要基于平台，针对性的设计汇编程序。  </p><p><br></p><hr><h3 id="数据的移动"><a href="#数据的移动" class="headerlink" title="数据的移动"></a><strong>数据的移动</strong></h3><p>这些指令种类各不一样。有些可以将数据加载到寄存器中，有一些可以将数据存储在内存里。<br>下面这个表格举出了一些例子：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">指令操作码</th><th style="text-align:center">指令操作数</th><th style="text-align:left">简单的解释(<del>但愿吧</del>)</th></tr></thead><tbody><tr><td style="text-align:center"><code>LDM</code></td><td style="text-align:center"><code>#n</code></td><td style="text-align:left">立即寻址，将数字“n”加载到累加器(ACC)中。</td></tr><tr><td style="text-align:center"><code>LDR</code></td><td style="text-align:center"><code>#n</code></td><td style="text-align:left">立即寻址，将数字“n”加载到变址寄存器(IX)中。</td></tr><tr><td style="text-align:center"><code>LDD</code></td><td style="text-align:center"><code>&lt;address&gt;</code></td><td style="text-align:left">直接寻址，将给定地址的内容加载到累加器中。</td></tr><tr><td style="text-align:center"><code>LDI</code></td><td style="text-align:center"><code>&lt;address&gt;</code></td><td style="text-align:left">间接寻址，给定的地址将会被使用，而第二个地址的内容会加载到累加器中。</td></tr><tr><td style="text-align:center"><code>LDX</code></td><td style="text-align:center"><code>&lt;address&gt;</code></td><td style="text-align:left">变址寻址，地址由<code>&lt;address&gt;</code>+变址寄存器中的内容组成，然后将计算出来的地址中的内容加载到累加器中。</td></tr><tr><td style="text-align:center"><code>MOV</code></td><td style="text-align:center"><code>&lt;register&gt;</code></td><td style="text-align:left">将累加器中的内容移动至一个指定的寄存器中(IX)。</td></tr><tr><td style="text-align:center"><code>STO</code></td><td style="text-align:center"><code>&lt;address&gt;</code></td><td style="text-align:left">将寄存器中的内容储存到一个指定的地址。</td></tr></tbody></table></div><p>在这里，左侧这一列的助记符定义了指令的类型，包括了在运算中涉及到的所有寄存器，以及可能会使用到的恰当的寻址模式。  </p><p><strong>仔细阅读助记符是很重要的！</strong>  </p><p>在以下所有的表格中：  </p><blockquote><p><code>&lt;address&gt;</code>代表操作数是一个地址<br><code>&lt;register&gt;</code>代表操作数是一个寄存器缩写<br><code>#n</code>代表这是一个十进制值。比如说<code>#23</code>代表十进制数字23。  </p></blockquote><p><br></p><hr><p><br></p><p>来一个背景解释一下上面表格的内容：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB3473ec319b5ca955ebfb4e19c9c2aac3?method=download&amp;shareKey=2d02a8fbc22db5542be18f25c0038ac3" alt=""></p><p>根据上图所示的内存内容，下面我会给出一些例子：  </p><p><code>LDD 103</code>代表<strong>值110被存入了累加器中</strong><br><code>LDI 106</code>代表<strong>来自地址101的值208被存入了累加器中</strong><br><code>STO 106</code>代表<strong>值208被存进了地址106中</strong><br><code>LDD INDEXVALUE</code>代表<strong>值”3”被存入了累加器</strong><br><code>MOV IX</code>代表<strong>累加器里面的那个”3”被存入了变址寄存器中</strong><br><code>LDX 102</code>代表<strong>来自地址105的值206被存入了累加器中</strong>  </p><p><br></p><hr><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a><strong>输入和输出</strong></h3><p>下面这两个指令用于输入或输出。<br>在每种情况下，这些指令都只有一个操作码，没有操作数。</p><ul><li>以助记符为<code>IN</code>代表的操作会将键盘上输入的字符的ASCII码存储在累加器中。  </li><li>相反，以助记符为<code>OUT</code>代表的操作会将累加器中存储的ASCII码显示出来。</li></ul><p><br></p><hr><h3 id="比较和跳步"><a href="#比较和跳步" class="headerlink" title="比较和跳步"></a><strong>比较和跳步</strong></h3><p>程序是不会傻到一直一条条执行命令的——至少当他们要求被这样做的时候会这样。  </p><p>程序有些时候会在每行命令之间跳转。有一些情况是无条件的，也有一些情况是有条件的：比如说执行了比较命令。  </p><p>下图给出了一些比较命令的例子：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">操作码</th><th style="text-align:left">操作数</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left"><code>JMP</code></td><td style="text-align:left"><code>&lt;address&gt;</code></td><td style="text-align:left">跳转到指定的地址。</td></tr><tr><td style="text-align:left"><code>CMP</code></td><td style="text-align:left"><code>&lt;address&gt;</code></td><td style="text-align:left">将累加器中的内容与指定地址中的内容比较。</td></tr><tr><td style="text-align:left"><code>CMP</code></td><td style="text-align:left"><code>#n</code></td><td style="text-align:left">将累加器中的内容与指定十进制值比较</td></tr><tr><td style="text-align:left"><code>CMI</code></td><td style="text-align:left"><code>&lt;address&gt;</code></td><td style="text-align:left">是个间接寻址。命令会将累加器中的内容与操作数给到的地址中的内容比较。</td></tr><tr><td style="text-align:left"><code>JPE</code></td><td style="text-align:left"><code>&lt;address&gt;</code></td><td style="text-align:left">它会跟在一个比较命令后面。如果比较的结果为True，则会跳转到操作数给定的地址。</td></tr><tr><td style="text-align:left"><code>JPN</code></td><td style="text-align:left"><code>&lt;address&gt;</code></td><td style="text-align:left">它会跟在一个比较命令后面。如果比较的结果为True，则会跳转到操作数给定的地址。</td></tr></tbody></table></div><p>这里所有介绍的比较命令，都是比较<strong>两个数据是否相等。</strong><br>相等输出为<code>True</code>，不相等输出为<code>False</code>。  </p><p>比较的结果会被记录在状态寄存器中的一个标志中。<br>当我们执行跳转指令的时候，我们首先需要检查状态寄存器中是否有这个标志。<br>然后执行跳转命令的时候，我们不会立即执行，而是需要先向程序计数器提供一个新的偏移量，让程序可以继续在正确的地址上获取下一条指令。<br>因此在向程序计数器提供新的偏移量的时候，程序计数器就不会执行简单的+1操作了。</p><p><br></p><hr><h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a><strong>数学运算</strong></h3><p>简单的数学运算，但是在这里我们暂时不考虑乘除的运算，因为他们相比加减法运算没有通用性或一致性。  </p><p>下表列出了一些例子：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">操作码</th><th style="text-align:left">操作数</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left"><code>ADD</code></td><td style="text-align:left"><code>&lt;address&gt;</code></td><td style="text-align:left">将操作数给定地址内的内容加到累加器中。</td></tr><tr><td style="text-align:left"><code>ADD</code></td><td style="text-align:left"><code>#n</code></td><td style="text-align:left">将操作数给定的十进制数字加载到累加器中。</td></tr><tr><td style="text-align:left"><code>SUB</code></td><td style="text-align:left"><code>&lt;address&gt;</code></td><td style="text-align:left">从累加器中减去操作数给定地址中的内容。</td></tr><tr><td style="text-align:left"><code>SUB</code></td><td style="text-align:left"><code>#n</code></td><td style="text-align:left">从累加器中减去操作数给定的十进制数字。</td></tr><tr><td style="text-align:left"><code>INC</code></td><td style="text-align:left"><code>&lt;register&gt;</code></td><td style="text-align:left">向给定的寄存器内+1。 （累加器或者是变址寄存器）</td></tr><tr><td style="text-align:left"><code>DEC</code></td><td style="text-align:left"><code>&lt;register&gt;</code></td><td style="text-align:left">向给定的寄存器内-1。 （累加器或者是变址寄存器）</td></tr></tbody></table></div><p>下面展示了一个以5累加到75的程序：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBc474f69079272e1b19e9af865951b687?method=download&amp;shareKey=577ac5abfbaf4cb49a8419d96d1d573a" alt=""></p><p>简单解释一下程序的运行过程：  </p><ul><li>前三行命令初始化了计数器和求和功能  </li><li>在地址103的命令是每次迭代的第一行命令。  </li><li>接下来的三行命令会向地址中的值+1，然后存储回原来的地址。  </li><li>地址106到地址108中的指令会向总和中+5。  </li><li>地址109和地址110的命令用来检查总和有没有到达75目标值。如果没有就重复下一次迭代。  </li><li>到达目标值75后，地址111到地址113的命令用来输出计数结果（一共加了15次75，所以输出计数结果15。）  </li></ul><p><br></p><hr><h3 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a><strong>移位运算</strong></h3><p>逻辑移位：左移时最低位补0，右移时最高位补0的移位</p><article class="message is-info"><div class="message-body"><b>Logical shift:where bits in the accumulator are shifted to the right or to the left and a zero moves into the bit position vacated.</b> </div></article><p>比如说：<code>0101</code><br>向左移1位就是：<code>1010</code>,最高位补了一个0。<br>向右移1位就是：<code>0010</code>，最低位补了一个0。  </p><p><br></p><p>逻辑移位可以做一些很有意思的东西，比如让一个数字扩大一倍。但是这是有先决条件：<strong>这一串二进制的最高位和最低位必须是零</strong>，因此没有任何的信息丢失。<br>举个例子  </p><p><code>00001010</code>代表十进制的10。<br>但是将其向左逻辑移位（一位）：<br><code>00010100</code>代表了十进制的20。  </p><p>同样的，向右逻辑移位代表减小一倍。<br>左移一位是扩大一倍最简单的做法。  </p><p><br></p><hr><p><br></p><p>知道了什么叫做逻辑移位，现在介绍两个移位运算命令：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">操作码</th><th style="text-align:left">操作数</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left"><code>LSL</code></td><td style="text-align:left"><code>#n</code></td><td style="text-align:left">将累加器中的值向<strong>左</strong>以操作数给定的位做逻辑移位</td></tr><tr><td style="text-align:left"><code>LSR</code></td><td style="text-align:left"><code>#n</code></td><td style="text-align:left">将累加器中的值向<strong>右</strong>以操作数给定的位做逻辑移位</td></tr></tbody></table></div><p><br></p><hr><p><br></p><p>移位并不是仅存在逻辑移位，我们还有其他的两种移位方式：<strong>循环移位（Cyclic shift）</strong>和<strong>算术移位（Arithmetic shift）</strong>。  </p><article class="message is-info"><div class="message-body"><b>Cyclic shift: similar to a logical shift but bits shifted from one end reappear at the other end.</b> </div></article><p><strong>循环移位：在移位时不丢失移位前原范围的位，而是将它们作为另一端的补入位。</strong>  </p><p><br></p><article class="message is-info"><div class="message-body"><b>Arithmetic shift: uses the shift to carry out manipulation or division of a signed integer stored in the accumulator.</b> </div></article><p><strong>算术移位：使用移位对累加器中存储的有符号整数进行操作或除法。</strong>  </p><p>这俩了解就好。  </p><p><br></p><hr><h3 id="按位逻辑操作"><a href="#按位逻辑操作" class="headerlink" title="按位逻辑操作"></a><strong>按位逻辑操作</strong></h3><p>命令：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">操作码</th><th style="text-align:left">操作数</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left"><code>AND</code></td><td style="text-align:left"><code>#Bn</code></td><td style="text-align:left">将累加器中的每一位都与操作数指定值进行AND运算</td></tr><tr><td style="text-align:left"><code>AND</code></td><td style="text-align:left"><code>&lt;address&gt;</code></td><td style="text-align:left">将累加器中的每一位都与操作数指定地址中的值进行AND运算</td></tr><tr><td style="text-align:left"><code>XOR</code></td><td style="text-align:left"><code>#Bn</code></td><td style="text-align:left">将累加器中的每一位都与操作数指定值进行XOR运算</td></tr><tr><td style="text-align:left"><code>XOR</code></td><td style="text-align:left"><code>&lt;address&gt;</code></td><td style="text-align:left">将累加器中的每一位都与操作数指定地址中的值进行XOR运算</td></tr><tr><td style="text-align:left"><code>OR</code></td><td style="text-align:left"><code>#Bn</code></td><td style="text-align:left">将累加器中的每一位都与操作数指定值进行OR运算</td></tr><tr><td style="text-align:left"><code>OR</code></td><td style="text-align:left"><code>&lt;address&gt;</code></td><td style="text-align:left">将累加器中的每一位都与操作数指定地址中的值进行OR运算</td></tr></tbody></table></div><p><br></p><hr><h1 id="第七章：控制与监控系统"><a href="#第七章：控制与监控系统" class="headerlink" title="第七章：控制与监控系统"></a><strong>第七章：控制与监控系统</strong></h1><h2 id="监控系统"><a href="#监控系统" class="headerlink" title="监控系统"></a><strong>监控系统</strong></h2><p>监控系统可以用于创建一段时间内系统状态的记录。<br>监控系统被广泛用于监控系统的特定物理特性（照度，温度，湿度…）何时超出阈值。<br>比如说温控系统检测CPU过热，会自动降低频率。  </p><p><br></p><hr><p><br></p><p>我们在这里以温度作为一个例子：<br>如果计算机想要知道当前机箱内实时温度，那么计算机就必须需要一种设备来获取相关数据，并精确的传送到计算机。  </p><p>这一种测量设备叫做<strong>传感器</strong>。  </p><article class="message is-info"><div class="message-body"><b>Sensor: a hardware device that measures a property and transmits a value to a controlling computer.</b></div></article> <p><strong>传感器：测量属性并可以将值传递到计算机的一种硬件。</strong>  </p><p>在这个情景中，可以监控计算机机箱内温度的硬件就是热电偶。热电偶会根据温度的变化更改它的输出电压。在一些老式的电脑上，如果传感器检测到了机箱内的温度过高，会奏响它的小蜂鸣器提醒用户。  </p><p><br></p><p>有一点需要注意，在一个监控系统内，传感器是没有任何的集成智能在里面的，所以说但凡这传感器遇上了问题，它都没有办法自我修复，那基本上就得报废了。  </p><p>传感器还可以检测运动，红外，声音，ph值等各种属性。  </p><p><br></p><hr><h2 id="控制系统"><a href="#控制系统" class="headerlink" title="控制系统"></a><strong>控制系统</strong></h2><p>控制系统包含了监视系统的权限和功能，但是不止如此，控制系统还可以去对系统做出一些调整与改变。  </p><p>监视系统需要一个必不可少的元件：<strong>致动器 (Actuator)</strong>。制动器是连接到其他控制设备的电机，可以应用一些改动。  </p><article class="message is-info"><div class="message-body"><b>Actuator: a hardware device that receives a signal from a computer and adjusts the setting of a controlling device.</b></div></article> <p><br></p><hr><p><br></p><p>下图是一个计算机控制环境的示意图。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB278206278b3ad34a89bcf6465e40e9c3?method=download&amp;shareKey=76274d616b9bc247e5541757971939c0" alt=""></p><p>上图中包含了一个模数转换器(ADC)和一个数字模拟转换器(DAC)，它们俩都是独立的组件。在实际的系统中，它们有可能是传感器或者执行器设备的组成部分。  </p><p>上图所示的系统中，计算机会定期向传感器请求数据，接着计算机就会处理这一部分数据。如果接受的数据不在期望的范围内，计算机就会采取一些操作。下一次数据请求只会发生在此操作完成后。  </p><p><br></p><p>下图是一个闭环反馈控制系统：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBf9ad1cf3c6e929a5ee41011380693835?method=download&amp;shareKey=7b18e81015534e1e9d9f117b2156879f" alt=""></p><p>其中的控制器由微处理器组成，他们可以将传感器读取的实际输出值与期望的值作比较，随后会将一个值继续传输给执行器。  </p><p><br></p><hr><h2 id="控制设备的位操作"><a href="#控制设备的位操作" class="headerlink" title="控制设备的位操作"></a><strong>控制设备的位操作</strong></h2><p>担任控制工作的计算机或者微处理器里面都必须有一个时刻运行的实时程序。该程序可以根据传感器检测到的内容为布尔变量设置值。  </p><p>比如说：如果一个受控环境中有两个需要监视和控制的属性，我们就可以定义并使用四个布尔变量。  </p><p>赋值就牵扯到了赋值语句，就像这样：  </p><p><code>IF SensorDifference1 &gt; 0 THEN Sensor1HighFlag ← TRUE</code><br><code>IF SensorDifference1 &lt; 0 THEN Sensor1LowFlag ← TRUE</code><br><code>IF SensorDifference2 &gt; 0 THEN Sensor2HighFlag ← TRUE</code><br><code>IF SensorDifference2 &lt; 0 THEN Sensor2LowFlag ← TRUE</code>  </p><p>与此同时，监控和控制程序的另一个部分会检查是否已经定义了任意一个标识。运行这样的一个程序的机器代码可以使用单独的位来表示每一个标识。  </p><p>下面的表格说明了设置和读取表示的方法。<br>在这些代码片段中，每个字节的三个最低有效位 (第0, 1和第2位)会被用作标识。  </p><p><br></p><p>下面演示了在系统打开时可能使用的所有位为零的设置：  </p><div class="table-container"><table><thead><tr><th style="text-align:left"><code>LDD 0034</code></th><th style="text-align:left">将一个来自某地址的字节转入累加器中。</th></tr></thead><tbody><tr><td style="text-align:left"><code>AND #B00000000</code></td><td style="text-align:left"><strong>使用位与(AND)运算将累加器的内容和操作数转换为0。</strong></td></tr><tr><td style="text-align:left"><code>STO 0034</code></td><td style="text-align:left"><strong>将改变后的字节存储在原始地址中。</strong></td></tr></tbody></table></div><p><br></p><p>下面的例子说明了某一个确切位值的切换。这将改变标志的值。<br>可能是因为遇到了问题，也可能是因为解决了问题。</p><p><br></p><div class="table-container"><table><thead><tr><th style="text-align:left"><code>LDD 0034</code></th><th style="text-align:left">将一个来自某地址的字节转入累加器中。</th></tr></thead><tbody><tr><td style="text-align:left"><code>AND #B00000000</code></td><td style="text-align:left"><strong>使用按位异或(XOR)运算将累加器中的第2位切换。</strong></td></tr><tr><td style="text-align:left"><code>STO 0034</code></td><td style="text-align:left"><strong>将改变后的字节存储在原始地址中。</strong></td></tr></tbody></table></div><p><br></p><p>下面演示了如何将一个位的值设置为1，不管它现在的值是多少。  </p><div class="table-container"><table><thead><tr><th style="text-align:left"><code>LDD 0034</code></th><th style="text-align:left">将一个来自某地址的字节转入累加器中。</th></tr></thead><tbody><tr><td style="text-align:left"><code>AND #B00000000</code></td><td style="text-align:left"><strong>将累加器的内容与操作数进行按位或(OR)运算来设置第二位所表示的值。所有其他比特位保持不变。</strong></td></tr><tr><td style="text-align:left"><code>STO 0034</code></td><td style="text-align:left"><strong>将改变后的字节存储在原始地址中。</strong></td></tr></tbody></table></div><p><br></p><p>下面演示了将所有位都设置为0，除了一个特定的位的方法。  </p><div class="table-container"><table><thead><tr><th style="text-align:left"><code>LDD 0034</code></th><th style="text-align:left">将一个来自某地址的字节转入累加器中。</th></tr></thead><tbody><tr><td style="text-align:left"><code>AND #B00000000</code></td><td style="text-align:left"><strong>对累加器的内容和操作数进行位与(AND)运算，保持第1位的值不变，但将其他所有位转换为0。</strong></td></tr><tr><td style="text-align:left"><code>STO 0034</code></td><td style="text-align:left"><strong>将改变后的字节存储在原始地址中。</strong></td></tr></tbody></table></div><p><br></p><hr><h1 id="第八章：系统软件"><a href="#第八章：系统软件" class="headerlink" title="第八章：系统软件"></a><strong>第八章：系统软件</strong></h1><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a><strong>操作系统</strong></h2><p>在1960年代，人们使用计算机的操作大概是这样的：  </p><ol><li>进入一个有很多穿孔纸条和穿孔卡片的房间  </li><li>打开计算机  </li><li>将穿孔卡片插入读卡器，然后按下按钮  </li><li>将穿孔纸条插入读取器，然后按下按钮  </li><li>按下另一个按钮来启动在穿孔卡片上存储的程序。这时候穿孔纸条会当做内存使用。  </li><li>按下按钮将输出打印在纸上  </li><li>关掉计算机</li><li>离开房间  </li></ol><p>当时的计算机用户只能通过按钮来与计算机交互。要是放到今天得需要数不清的按钮了。<br>所以在1960年代，确实的计算机的一个重要成分便是<strong>操作系统</strong>了。  </p><article class="message is-info"><div class="message-body"><b>Operating system: a software platform that provides facilities for programs to be run which are of benefit to a user.</b></div></article> <p><br></p><hr><h2 id="操作系统活动"><a href="#操作系统活动" class="headerlink" title="操作系统活动"></a><strong>操作系统活动</strong></h2><p>操作系统的构造实际上是非常复杂的，我们在这里寥寥数句肯定是说不清楚的。<br>但是我们可以大致介绍一下操作系统的大致活动与功能：  </p><p><br></p><hr><h3 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a><strong>用户界面</strong></h3><p>操作系统里面的用户界面可以允许用户通过它去与系统硬件更高效地交互，从而完成一些有意思的事情。  </p><p>一个操作系统至少需要满足以下两点中的其中一个对用户的输出方式：  </p><ul><li>一个命令行样式的用户界面  </li><li>一个图形化的用户界面</li></ul><p>我们用的绝大多数操作系统都是带有图形化用户界面的。  </p><p><br></p><hr><h3 id="程序硬件接口"><a href="#程序硬件接口" class="headerlink" title="程序硬件接口"></a><strong>程序硬件接口</strong></h3><p>程序员的可以编写软件，用户运行这个软件。<br>软件需硬件的运行，所以操作系统必须保证硬件可以执行软件所希望执行的操作。  </p><p>现在的程序员编写软件不再需要去了解如何针对某个别的硬件进行编程了，尤其是处理器。<br>随后操作系统就会担任这个工作：把人话翻译成机器听的话。  </p><p><br></p><hr><h3 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a><strong>资源管理</strong></h3><p>如果一个程序正在运行，我们会管他叫做一个<strong>进程</strong>。  </p><article class="message is-info"><div class="message-body"><b>Process: a program that has begun execution.</b></div></article> <p>在现代的计算机系统内，任何进程都不可能一直不间断地运行下去，而且在计算机系统上会运行很多的进程，每一个进程都需要访问计算机系统提供的资源。  </p><p>操作系统中的资源管理旨在发挥计算机使用过程中的最佳性能。管理资源最重要的两个方面是：  </p><ul><li>进程的调度  </li><li>冲突进程的管理 <em>(当两个进程同时需要计算机系统提供的同一份资源，就会产生冲突。)</em>  </li></ul><p><br></p><hr><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a><strong>内存管理</strong></h3><p>以下三点在内存管理中比较重要：  </p><ul><li>内存保护：确保两个程序不会共用同一个内存地址。  </li><li>组织内存：通过组织内存的使用方案来实现有限资源的最大化利用（或者发挥最大性能），比如说虚拟内存。  </li><li>内存优化：决定有哪些进程会保持运行在主内存中。  </li></ul><p><br></p><hr><h3 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a><strong>设备管理</strong></h3><p>每一个计算机系统都会连接各式各样的设备，比如说鼠标键盘，打印机复印机，摄像头等等。  </p><p>设备管理有一下两点：  </p><ul><li>为设备安装正确的驱动程序。  </li><li>控制设备有关进程的使用。  </li></ul><p><br></p><hr><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a><strong>文件管理</strong></h3><ul><li>文件命名  </li><li>目录结构</li><li>访问控制机制  </li></ul><p><br></p><hr><h3 id="安全控制"><a href="#安全控制" class="headerlink" title="安全控制"></a><strong>安全控制</strong></h3><ul><li>当文件丢失时提供恢复</li><li>防止计算机被入侵</li><li>确保文件的安全性</li></ul><p><br>  </p><hr><h3 id="错误检测与恢复"><a href="#错误检测与恢复" class="headerlink" title="错误检测与恢复"></a><strong>错误检测与恢复</strong></h3><p>程序在执行的过程中很有可能出现错误。这有可能是因为程序编写错误，也有可能是提供了不正确的数据。<br>但是无论错误的原因是什么，操作系统都应该有中断进程和错误诊断的能力。<br>在极端的情况下，操作系统也需要有组织性地关闭系统，同时不丢失数据。  </p><p><br></p><hr><h2 id="应用程序软件"><a href="#应用程序软件" class="headerlink" title="应用程序软件"></a><strong>应用程序软件</strong></h2><p>应用程序可以由操作系统提供，用户也可以单独安装。<br>应用程序不是操作系统能够正常运行的必要条件，而是用户或者操作系统可以在需要时决定运行的程序。  </p><p>举一些例子，每一个例子具体是什么样我就不展开成一个个小章节解释了，已经属于是基础知识了。  </p><p><br></p><p><br></p><ul><li><strong>硬盘格式化软件和硬盘检测软件。</strong>  </li></ul><p>DiskGenius就是这样的一款优秀软件。这样的软件可以格式化你的磁盘，或者检查硬盘是否有任何坏道错误。  </p><p><br></p><p><br></p><ul><li><strong>硬盘碎片化整理程序</strong>  </li></ul><p>机械硬盘因为其物理限制（转盘和磁头导致机械硬盘大多以顺序读取为主），随机读取的性能远远低于SSD（固态硬盘）的性能，所以适当的整理磁盘上的文件排布对于系统读取文件来说是很有帮助的。  </p><p>我们在日常使用电脑的时候很容易产生很多碎片。这些碎片可以是不连续的，在机械硬盘中会极其拖慢系统的运行速度。<br>所以碎片化整理程序就可以将碎片化的文件以机械硬盘喜欢的方式重新排列，让随机读取文件更靠近顺序读取。  </p><p>所以这样的碎片化整理程序对于SSD是没什么用的，除了心理作用。  </p><p><br></p><p><br></p><ul><li><strong>备份文件</strong>  </li><li><strong>杀毒软件</strong></li></ul><p>这两个不用说了吧。</p><p><br></p><hr><h2 id="Program-libraries-程序库"><a href="#Program-libraries-程序库" class="headerlink" title="Program libraries 程序库"></a><strong>Program libraries 程序库</strong></h2><p>这些在Program libraries中是为了执行特定任务而创建的程序。任何程序员都可以在自己的项目里使用它们。  </p><p>所有新开发的程序里面都会包含错误。这些错误在程序员debug中可能很难发现，但是在用户的日常使用中可以变的越来越明显。而这些已经验证过没有问题的Program libraries中的子程序就可以被程序员拿来直接用，省去了大量的精力去调试或者编写程序。  </p><p><br></p><p>另一种方法是使用动态链接库（DLL）。当程序员决定使用DLL的时候，在自己的可执行代码内就可以只包含一点点代码。这允许它在程序运行的时候连接到单独存储在内存中的例程。使用DLL的优点是所有程序的可执行文件都可以做到较小的存储空间，对内存的需求也最小化。另一个有点事如果有新的例程版本可用，我们就可以直接讲新的例程加载到内存中，以便使用它的任意程序都可以升级到新的例程，而不需要去大刀阔斧地改代码。 </p><p>但是问题是如果DLL损坏或者新版本的DLL存在兼容性问题或者内容错误，直接一影响就影响一片程序。同样DLL确实也是用户在使用计算机的时候经常发生的问题。这时候就需要用户去手动添加缺失的DLL。  </p><p><br></p><hr><h2 id="计算机语言转换"><a href="#计算机语言转换" class="headerlink" title="计算机语言转换"></a><strong>计算机语言转换</strong></h2><p>还记得第六章的汇编器吗？这一个小结介绍类似汇编器的其他程序，不过这些程序是用来翻译高级过程语言编写程序的翻译器。  </p><h3 id="编译器和解释器"><a href="#编译器和解释器" class="headerlink" title="编译器和解释器"></a><strong>编译器和解释器</strong></h3><p>使用<strong>编译器 (Compilers)</strong>或者<strong>解释器 (Interpreter)</strong>的先决条件是：必须应用于源代码，而源代码必须是用高级语言编写的程序。  </p><p>一个解释器工作的基本过程如下：  </p><ol><li>解释程序，源代码文件和源代码程序使用的数据都可以使用。  </li><li>解释程序现在开始运行。  </li><li>读取源代码的第一行。  </li><li>每一行会被按下面5-7步的顺序分析： </li><li>如果有发现错误，解释程序会暂停运行，并将错误信息上报。  </li><li>如果没有错误发现，源代码中的这一行就会被解释程序转换成中间代码。<em>（中间代码是一种面向语法，易于翻译成目标程序的源程序的等效内部表示代码）</em>  </li><li>解释程序会根据生成的中间代码来执行所需要的操作。  </li><li>然后解释程序就会重复运行4-8步的步骤分析下一行代码。  </li></ol><p><br></p><p>一个编译器工作的基本过程如下：  </p><ol><li>需要编译程序和源代码，但是不需要源代码使用的数据参与其中。  </li><li>编译程序开始运行。  </li><li>读取源代码的第一行。  </li><li>每一行会被按下面5-7步的顺序分析：  </li><li>如果有错误发生，编译程序会报告这个错误。  </li><li>如果没有发生错误，那么源代码中的这一行就会被转换成中间代码。  </li><li>编译程序会重复运行4-7步的步骤分析下一行代码。  </li><li>当整个源代码处理完毕后，会发生下面两种情况的其中之一：  </li></ol><ul><li><ul><li>如果在整个源代码中没有发现错误，就将完整的代码转换为目标代码。  </li></ul></li><li><ul><li>如果发现了任何错误，就会输出错误列表，并且不生成目标代码。  </li></ul></li></ul><p><br></p><p>对于程序员和开发者来说，编译器和解释器各有所长：  </p><ul><li><p>在开发程序的时候，解释器具有优势，因为它可以在错误发生的时候识别错误并尝试修正，而无需等待整个源代码被读取和分析。  </p></li><li><p>解释器的缺点在于：在程序的特定执行过程中，解释器可能无法访问包含语法错误的部分代码。因此错误就只会在结束的时候被发现。  </p></li><li><p>编译器的优点是可以将可执行文件(exe)发行给用户，这样用户就没办法访问源代码了。  </p></li></ul><p><br></p><p>而在用户这边，编译器和解释器也都有自己的优缺点：  </p><ul><li><p>对于解释程序来说，当每一次运行一个没有错误的程序的时候，解释程序和源代码都必须可用。  </p></li><li><p>对于编译后的程序，当每次运行一个没有错误的程序时候，只有目标代码可用。  </p></li><li><p>编译后的目标代码可以提供相比于解释程序更快的执行速度。  </p></li><li><p>编译后的程序可以有风险，因为它可能含有潜在的病毒或垃圾文件。  </p></li></ul><p><br></p><p>无论使用的是编译器还是解释器，如果他们的程序是为了特定处理器而写，则程序只能在具有特定处理器的计算机上运行。  </p><p>如果有特定的条件，那么在开发程序的时候选择解释器是比较合理的。因为：  </p><ul><li>程序中的一个错误可能会造成多米诺效应：一错错一片。  </li><li>解释器可以检测并修正在代码中发生的早期错误，从而限制后续发生更多问题。  </li><li>在开发过程中，解释器附带的debug程序可以梗方便的减少工作时间。  </li></ul><p>同样在某些时候，我们也可以选择使用编译器。因为：  </p><ul><li>编译器可以生成一个可执行文件(.exe)。  </li><li>编译器生成的可执行文件可以更方便的用来传播。  </li><li>编译器生成的程序相比于解释器的程序来说，运行速度更快。  </li></ul><p><br></p><hr><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a><strong>Java</strong></h3><p>当Java正在创建的时候，Java团队设想了一些十分新颖的想法。<br>每一个计算机都可以安装一个Java虚拟机（Java Virtual Machine）。当程序员构造一个Java程序的时候，会首先编译成Java字节码指令(Java Byte Code)。<br>当这个程序运行的时候，会被JVM解释，随后就可以将程序转移到任何安装有Java虚拟机的计算机上运行。  </p><p><br></p><hr><h2 id="集成开发环境-IDE"><a href="#集成开发环境-IDE" class="headerlink" title="集成开发环境(IDE)"></a><strong>集成开发环境(IDE)</strong></h2><p>集成开发环境(Integrated development environment)是用于提供程序开发环境的应用程序。一般包括代码编辑器，编译器，调试器和图形用户界面等工具。继承了代码编写功能，分析功能，调试功能等一体化的开发软件服务套。<br>所有具备这一特性的软件或者软件组都可以叫做集成开发环境。  </p><p>常见的IDE有微软的Visual studio系列，Jetbrains的IDEA，Pycharm。  </p><h3 id="代码高亮-Prettyprinting"><a href="#代码高亮-Prettyprinting" class="headerlink" title="代码高亮 (Prettyprinting)"></a><strong>代码高亮 (Prettyprinting)</strong></h3><p>计算机语言一般每行由不同的成分构成，有命令或者各种参数。<br>代码高亮功能可以将代码的每一部分通过不同的颜色或者图样展示出来，方便我们区分并阅读代码。  </p><p>就像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.**.lib.lib;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myclass</span>  {</span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">"Hello world"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    System.out.print(<span class="string">"Hello world"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><br></p><h3 id="上下文敏感提示-Context-sensitive-prompts"><a href="#上下文敏感提示-Context-sensitive-prompts" class="headerlink" title="上下文敏感提示 (Context-sensitive prompts)"></a><strong>上下文敏感提示 (Context-sensitive prompts)</strong></h3><p>在一段代码的上文你可能定义了一堆变量，在代码的下文IDE就有机会自动补全你写过的变量名称。  </p><p><br></p><h3 id="语法检查-Syntax-check"><a href="#语法检查-Syntax-check" class="headerlink" title="语法检查 (Syntax check)"></a><strong>语法检查 (Syntax check)</strong></h3><p>IDE会分析你的代码，并且通过画波浪线的方式提示你你的这部分代码可能有误。<br>有些IDE只负责检查错误，不过现在的IDE大多都可以为你提供更正提示。  </p><h3 id="代码折叠-Expanding-and-collapsing-code-blocks"><a href="#代码折叠-Expanding-and-collapsing-code-blocks" class="headerlink" title="代码折叠 (Expanding and collapsing code blocks)"></a><strong>代码折叠 (Expanding and collapsing code blocks)</strong></h3><p>当你在代码中的一个循环（或者其他组容器内）写了很多的代码，那么IDE提供了可以将容器内的代码折叠的选项。<br>这让你更方便的在长文件里梳理代码结构。  </p><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a><strong>Debug</strong></h3><p>IDE一般都会附有调试工具来帮助你进行Debug操作。<br>Debug大约是程序检查去除漏洞的意思。  </p><article class="message is-info"><div class="message-body"><b>Debug: finding and correcting errors, often called 'bugs', in a program.</b></div></article> <p>在调试过程中你可以为程序中的某几行打上一个断点(Breakpoint)。<br>当程序开始运行后到达了断点处，程序会暂时停止运行。<br>然后你可以选择继续运行，或者逐行运行。  </p><p>这对于梳理程序逻辑很有帮助。  </p><p><br></p><hr><h1 id="第九章：安全、隐私和数据完整性"><a href="#第九章：安全、隐私和数据完整性" class="headerlink" title="第九章：安全、隐私和数据完整性"></a><strong>第九章：安全、隐私和数据完整性</strong></h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h2><h3 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a><strong>数据完整性</strong></h3><p>定义什么是数据完整性挺容易，但是确保数据完整就不那么容易了。<br>只有准确并最新的数据才会存在数据完整性，任何存储数据的个人和机构都必须尽可能地确保数据的完整性。  </p><p>我们会在本章和第十一章讨论确保数据完整性的方法。  </p><article class="message is-info"><div class="message-body"><b>Data integrity: a requirement for data to be accurate.</b></div></article> <p><br></p><hr><h3 id="数据隐私"><a href="#数据隐私" class="headerlink" title="数据隐私"></a><strong>数据隐私</strong></h3><p>数据隐私指的是保持数据的私密性，而不是任凭数据公开访问权，以至于每人都可以随便使用。此现象都可以发生在个人和组织上。<br>每个人都有他们自己的隐私数据，而且大家都会选择保密这一部分数据不被公开。  </p><p>对于个人而言，如果没有适当的法律来约束侵犯隐私的违法者，那么保证数据隐私就相对困难了。  </p><p>保护数据隐私的法律必须要涉及以下几点：  </p><ul><li>这些数据是私人数据，因为他们主要是面向提供给个人和组织的。  </li><li>提供数据是为了允许组织使用它，但只能用于个人理解和同意的目的。</li><li>数据保护法要求组织机构确保这些数据的隐私性和完整性。  </li><li>不幸的是，拥有法律并不能保证遵守它们，但它们确实起到了威慑作用，可以使不法行为者受到法律诉讼。  </li></ul><article class="message is-info"><div class="message-body"><b>Data protection law: a lao that relates to data privacy.</b></div></article>   <p><br></p><hr><h3 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a><strong>数据安全</strong></h3><p>数据在我们想要使用它们的时候永远可用。如果数据已经丢失或者损坏，那么我们可以说数据的安全性已经被破坏了。  </p><p>在实现数据完整性或数据隐私之前必须先实现数据安全，但数据安全本身并不能保证数据完整性或数据隐私。<br>保护数据的要求之一是用来存储数据的系统的安全性。<br>系统安全不仅仅保护数据。 系统安全措施有两个主要目标：  </p><ul><li>确保系统持续执行用户需要的任务。  </li><li>以确保只有授权用户才能访问系统。    </li></ul><article class="message is-info"><div class="message-body"><b>Data security: a requirement for data to be available for use when needed, ensures that only authorized users have access to the system and data can be recovered if lost or corrupted.</b></div></article>   <p><br></p><hr><h2 id="对计算机系统及其存储数据安全的威胁"><a href="#对计算机系统及其存储数据安全的威胁" class="headerlink" title="对计算机系统及其存储数据安全的威胁"></a><strong>对计算机系统及其存储数据安全的威胁</strong></h2><p>对计算机系统的数据安全侵犯可能因为以下原因形成：  </p><ul><li>个人用户不关注数据安全  </li><li>内部的管理混乱  </li><li>自然灾害  </li><li>未经授权的个体侵入系统  </li><li>有害程序进入计算机系统  </li></ul><p><br></p><h3 id="网络和互联网对计算机和数据安全的威胁"><a href="#网络和互联网对计算机和数据安全的威胁" class="headerlink" title="网络和互联网对计算机和数据安全的威胁"></a><strong>网络和互联网对计算机和数据安全的威胁</strong></h3><p>现在我们的计算机都会连接到互联网。互联网上充斥着各种各样的信息，同样的可能会存在各式各样的有害文件。部分黑客可以在系统未经授权之时入侵系统。黑客可以通过这样的手段非法获取系统内的数据。  </p><p>所以说检查是否有恶意软件进入系统确实挺有必要。  </p><article class="message is-info"><div class="message-body"><b>Malware: malicious software that has the intension of causing harm to a system or its contents.</b></div></article>   <p><br></p><hr><h3 id="恶意软件"><a href="#恶意软件" class="headerlink" title="恶意软件"></a><strong>恶意软件</strong></h3><p>恶意软件是恶意软件的统称。<br>它是为了有害的目的而被引入系统的软件。<br>含有恶意软件的各种类型的程序代码有:</p><ul><li>病毒：试图在其他可执行代码中复制自己。  </li><li>蠕虫：独立运行，并尝试将自身传播到网络上的其他主机。  </li><li>逻辑炸弹：在满足某些条件之前保持潜伏。  </li><li>特洛伊木马：替换全部或者部分的程序，知道达到木马的目的。  </li><li>间谍软件：收集信息，然后将其传输到另一个系统。  </li><li>bot：控制一台计算机并且利用它来发动攻击。  </li></ul><p>不同类型之间的恶意软件差异并不大，有些例子属于这些类别中的一个或者不属于任何一个。<br>病毒类别通常根据病毒所附着的软件进行细分，例如引导扇区病毒和宏病毒。  </p><p><br></p><hr><p>恶意软件也可以通过他们的行为来归类：  </p><ul><li>钓鱼：以发送看似合法的电子邮件等手段来套取有用的信息。  </li><li>冒充：冒充一个以假乱真的官方网站。  </li><li>键盘记录程序:记录用户的键盘使用情况。  </li></ul><p><br></p><hr><h3 id="由用户活动引起的系统漏洞"><a href="#由用户活动引起的系统漏洞" class="headerlink" title="由用户活动引起的系统漏洞"></a><strong>由用户活动引起的系统漏洞</strong></h3><p>许多系统漏洞与系统合法用户的活动直接相关，而不是恶意软件。<br>下面是两个不涉及恶意软件的例子：  </p><ul><li>使用弱密码，特别是与他们自身相关的密码。一个弱密码很容易被别人猜到或者被暴力穷举。</li><li>用户不太容易识别网络钓鱼和攻击，所以很容易泄露有用的信息。  </li></ul><p>用户的以下操作很有可能出现安全事故：  </p><ul><li>插入一个移动存储设备  </li><li>在邮件内打开未知的超链接  </li><li>打开一个未知的网站  </li><li>从网络上下载未知的文件  </li></ul><p><br></p><hr><h3 id="系统本身产生的漏洞"><a href="#系统本身产生的漏洞" class="headerlink" title="系统本身产生的漏洞"></a><strong>系统本身产生的漏洞</strong></h3><p>系统在某些情况下比较容易产生漏洞。下面给出了几个例子。  </p><ol><li><p>有一些操作系统的安全性可能较差。随着时间的推移，操作系统越来越复杂，这就容易导致安全性下降的可能。操作系统的定期更新，打补丁或者更新服务包等都可以增强系统的安全性。  </p></li><li><p>在之前，应用程序会有较大的概率携带电脑病毒等有害程序。不过现在这种情况几乎不会存在了。  </p></li><li><p>还有一个比较特殊的漏洞，就是缓冲区溢出。用C语言编写的程序有很大的一部分是不会自动执行数组绑定检查的。如果有一个程序故意将代码写入内存中超出为数组定义的地址的那一部分，那么这个部分会被定义为缓冲区。</p></li></ol><p><br></p><hr><h2 id="保持计算机数据良好的措施"><a href="#保持计算机数据良好的措施" class="headerlink" title="保持计算机数据良好的措施"></a><strong>保持计算机数据良好的措施</strong></h2><h3 id="灾难恢复"><a href="#灾难恢复" class="headerlink" title="灾难恢复"></a><strong>灾难恢复</strong></h3><p>对某些大厂来说，大型计算机的运营连续性十分的重要。<br>我们需要保证无论发生了什么时间，计算机系统都可以正常的工作。如果必须需要关闭系统，那么我们也必须要确保系统在很短的时间内再次启动恢复正常。  </p><p>一般来说，互联网大厂会同步很多副服务器，以便于主服务器在提供服务的时候发生不可抗力因素而失去服务。<br>他们像是一种后备服务器，允许主服务器瘫痪之后能够继续提供服务。<br>我们将这种后备的服务器叫做“热点”。  </p><p><br></p><hr><h3 id="安全更新系统"><a href="#安全更新系统" class="headerlink" title="安全更新系统"></a><strong>安全更新系统</strong></h3><p>当系统应用了一些新的更新以后，难免会遇见一些硬件上或者软件上的小错误。<br>一般来说，提供服务的大厂会选择在计算机不提供服务的时候进行系统更新，这样技术团队就可以用这段时间来调试新系统。  </p><p>但是在现代的互联网公司内，他们的服务是24小时全年无休的。所以更新系统就可以使用到我们上一个话题内提到的“热点”系统：通过另一些主机来提供服务。  </p><p><br></p><hr><h3 id="用户身份验证"><a href="#用户身份验证" class="headerlink" title="用户身份验证"></a><strong>用户身份验证</strong></h3><p>即使你自己的电脑只有你自己一个用户，我们也很有必要去设置一个用户账户。<br>账户系统十分重要，尤其是有很多人需要使用同一台电脑的情况下。<br>用户账户的主要安全特征是用户身份验证，我们通常的方法是设置密码，然后将每一个用户和他们的密码做出关联。<br>当然我们也有其他方法，比如说使用生物识别验证和安全令牌。  </p><p>生物识别验证是使用我们的指纹，人脸甚至虹膜来验证身份。安全令牌可以是一种硬件，比如说加密狗。  </p><p>当然也不是说我们只能生物识别安全令牌和密码二选一。我们一般会将这些额外的验证方法与密码相结合。</p><p><br></p><hr><h3 id="良好的使用习惯"><a href="#良好的使用习惯" class="headerlink" title="良好的使用习惯"></a><strong>良好的使用习惯</strong></h3><p>在使用计算机的时候保持一些良好的使用习惯，可以减少计算机被入侵的可能性。  </p><p>比如在不用计算机的时候关机，不要在公共的计算机上记录你的个人信息等等。  </p><p><br></p><hr><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a><strong>防火墙</strong></h3><p>设置防火墙可以让你的电脑免于网络上有害信息的传递和黑客对你的计算机的入侵。  </p><p><br></p><hr><h2 id="数据的安全性与完整性"><a href="#数据的安全性与完整性" class="headerlink" title="数据的安全性与完整性"></a><strong>数据的安全性与完整性</strong></h2><p>其中一种方法是检查并核验输入。  </p><h3 id="输入数据验证"><a href="#输入数据验证" class="headerlink" title="输入数据验证"></a><strong>输入数据验证</strong></h3><p>虽说是验证输入数据，但是实际上验证完了输入数据之后的数据也会发生错误。<br>我们这里的验证数据实际上是验证数据的各项指标，比如说大小，格式或者更多其他的内容。<br>我们在这里举几个例子：  </p><ul><li><strong>Presence check:</strong> 样式检查，用来检查输入的内容是否是空的。  </li><li><strong>Format check:</strong> 格式检查，来检查输入的数据是否符合要求的格式(比如日期的格式就必须是 dd/mm/yyyy )。</li><li><strong>Length check:</strong> 长度检查，用来检查数据是否符合应有的长度。比如说用来检查输入的电话号码是否是11位。</li><li><strong>Range check:</strong> 范围检查，用来检查输入的数据是否在合法范围内。</li><li><strong>Limit check:</strong> 限制检查，检查输入的数据是否突破了一个阈值。</li><li><strong>Type check:</strong> 数据形式检查，用来检查输入的数据形式是否合法。(比如说构成日期的每一位数据都必须是正整数，不能是小数。)</li><li><strong>Existence check:</strong> 存在性检查，检查输入的内容是否已经出现过，或者检查输入的内容是否在一个列表内。例如在同一个文件夹下将一个文件重命名成另一个文件的样子会报错，是因为存在Existence check。</li></ul><p><br></p><h3 id="验证输入的数据"><a href="#验证输入的数据" class="headerlink" title="验证输入的数据"></a><strong>验证输入的数据</strong></h3><p>跟上一个话题看起来很像，但实际上不是一个操作。<br>在这一步，我们需要尽可能让用户输入的数据是正确的。<br>要达成这一点，我们可以要求用户再次确认数据，或者让他们自己检查输入的数据。  </p><p>比如在注册账号密码的时候，要求用户重复输入密码。<br>或者在填写完表单之后，将用户填写的数据重新陈列在屏幕上，以便用户检查。  </p><p><br></p><hr><h3 id="按位检查"><a href="#按位检查" class="headerlink" title="按位检查"></a><strong>按位检查</strong></h3><p>有些时候某些数据载体上面会包含一个叫做纠错码的部分。这部分允许计算机可以根据这些纠错码来判断或还原之前丢失或损坏的数据。  </p><p>这里有加和验证和其他数学方法验证。加和生成的数据会被记录到最后一位上。  </p><p><br></p><article class="message is-info"><div class="message-body"><b>Validation: a check that data entered is of the correct type and format; it does not guarantee that data is accurate.</b></div></article>   <article class="message is-info"><div class="message-body"><b>Verification: confirmation of data received by a system.</b></div></article>   <p>这两者之间的区别就是一个是确认数据的输入，一个是验证输入数据是否合法的。  </p><p><br></p><hr><h3 id="数据传输过程中的验证"><a href="#数据传输过程中的验证" class="headerlink" title="数据传输过程中的验证"></a><strong>数据传输过程中的验证</strong></h3><p>数据在传输的过程中是很有可能被损坏的，比如说其中的一个位反转了过来，从0变成了1。<br>所以说，验证技术就会介入，来检查数据是否发生损坏。  </p><p>其中最简单的方法就是使用<strong>一位奇偶校验 (One-bit parity check)</strong>。如果传输的数据是七位一字节传输的话，系统就可以在这一个字节中的第八位存储奇偶校验的信息。  </p><p>下面就是一位奇偶校验的检查步骤：  </p><ol><li>在数据传输之后，我们会检查这一个7位字节中有多少个1。  <ul><li>如果1的数量是奇数的话，校验位会被设为1。  </li><li>如果1的数量是偶数的话，校验位会被设为0。</li></ul></li><li>这样的过程会在传输每一个字节的过程中重复。</li><li>在传输的最后，八位字节中的所有1的数量会被数出来。</li><li>如果这个个数是偶数，那么这个字节就是完好无误的。</li><li>这样的步骤也会被重复到每一个8位字节。</li></ol><p><br></p><p>奇偶校验也不是万金油，数据在损坏后也有可能通过奇偶校验。比如说当一个7位字节里面反转了两个位，最后数出来的奇偶个数还是与原数据一致。<br>所以说比起改正传输数据的错误，奇偶校验更像是一个验证传输数据是否有错的算法。所以说如果奇偶校验发现了错误，那么我们就只能要求服务器重新发送数据了。  </p><p><br></p><p>另一种验证方法叫做<strong>校验和</strong>。这是一个端到端的校验和，由发送端计算，然后由接收端验证。  </p><ol><li>将传输的数据当成若干位（如8位、16位或32位）的整数序列，将这些整数加起来，舍弃进位，得到一个结果。  </li><li>将这个结果取反码，即将0变为1，将1变为0，得到一个校验和。  </li><li>将校验和附加到数据后面，一起发送给接收方。  </li><li>接收方收到数据后，将数据和校验和一起按照同样的方法进行累加，并舍弃进位，得到一个新的结果。  </li><li>如果新的结果是全1，则说明数据没有发生改动或错误；如果新的结果不是全1，则说明数据有损坏或篡改。  </li></ol><p><br></p><p>一位奇偶校验和校验和是有区别的。一位奇偶校验用于存储数据，而校验和只用于传输的数据。  </p><p><br></p><p>想要验证数据在哪一位出错了，就比上面的这些验证方法要更加复杂了。  </p><p><br></p><hr><h1 id="第十章：道德与所有权"><a href="#第十章：道德与所有权" class="headerlink" title="第十章：道德与所有权"></a><strong>第十章：道德与所有权</strong></h1><p><em>（标题翻译过来有点奇怪不过问题不大。这章的原标题叫做”Ethics and ownership”）</em></p><h2 id="道德-Ethics"><a href="#道德-Ethics" class="headerlink" title="道德(Ethics)"></a><strong>道德(Ethics)</strong></h2><p>不是很理解所谓标题是什么意思。  </p><p>你可以找到道德的很多定义。  </p><ul><li>伦理学是道德科学的一个分支。  </li><li>道德指的是任何人的行为准则。  </li><li>道德是在特定职业或人类生活中公认的行为准则。  </li></ul><p>在这个单元中，我们不会牵扯到第一个定义，而第三个定义才是我们这一个章节研究的东西，虽然说计算机科学家和开发人员的行为准则必须反映第二个定义的道德原则。  </p><p>道德原则牵扯到对与错。美得的概念通常被认为是正确的东西在一系列的发生。至于什么是对与错，可以从以下几个观点之一考虑：哲学、宗教、法律或者实用主义。  </p><p>有关于哲学的辩论已经开始了2000多年，其中不乏一些伟大的人物提出的观点，比如说亚里士多德和孔子。宗教就是大家所熟悉的宗教，法律是来判断事物对与错的一种工具，而实用主义可以定义为运用常识。  </p><p>虽然我们学的是CS，但是宗教信仰这类的东西确实需要在工作环境中加以考虑。法律问题显然会影响工作时间，但是他们很少会是行为准则的主要焦点。行为规则的基础仍然是有关于对与错的哲学观念和常识性的实用主义观点。这些东西会构成本章后续内容的一个框架。  </p><p><br></p><hr><h2 id="计算机专业人员"><a href="#计算机专业人员" class="headerlink" title="计算机专业人员"></a><strong>计算机专业人员</strong></h2><p>无论这些人的专业是个啥，他们最起码得遵守道德规范。专业人士可以通过假如适当的专业组织来获得道德行为指导。这样的组织内会有一个行为准则，其中就会包括有关于道德实践的参考。  </p><p>举个例子：英国计算机协会(British Computer Society)有四个行为准则：  </p><ol><li>公共利益  </li><li>专业能力与诚信  </li><li>对相关机构的责任  </li><li>对此专业的责任   </li></ol><p>另一些机构和组织，比如IEEE-CS／ACM联合工作组软件工程道德规范定义了八项基础原则：  </p><ol><li>公共 - 软件工程师的行为应该符合公共利益  </li><li>客户与雇主 - 软件工程师的行为应该符合客户和雇主的最大利益，同时也需要符合公共利益。  </li><li>产品 - 软件工程师应当确保他们的产品和相关的变体符合最高的专业标准。 </li><li>批判与判断 - 软件工程师应该保持他们专业判断的完整性和独立性。  </li><li>管理 - 软件工程经理和领导应当支持并促进软件的开发和维护。 </li><li>专业 - 软件工程师应当促进相对专业的诚信和声誉，同时符合公众利益。 </li><li>同事 - 软件工程师应当公平对待他们的同事，同时也要去支持他们。  </li><li>自身 - 软件工程师应当参与与其专业实践相关的终身学习，并促进职业实践。  </li></ol><p>虽然说上面的规则多少有些不一样，但是其中的一些内容是大致一致的：  </p><ul><li>都重视公众利益  </li><li>都提出了专业人员的基本原则  </li><li>专业人员应当自行判断情况  </li><li>如果不确定，专业人员应该寻求建议。  </li></ul><p>(<em>我确实觉得是上面这些内容过度抽象了，我有一说一不清楚他们想让我学啥。</em>)  </p><p><br></p><hr><h2 id="所有权与版权"><a href="#所有权与版权" class="headerlink" title="所有权与版权"></a><strong>所有权与版权</strong></h2><p>上面ethic的部分实在是过于抽象所以我选择直接跳转到Ownership这一部分，至少这一部分有些实质性的内容。  </p><p>如果一个人创作并且出版了一些具有独创性的作品，那么这个人就是这个作品的所有者。他就有资格去要求版权。<br>在这里有一个例外：个体在组织中工作。如果一个或者多个人为该组织工作并发表了他们的作品，那么这个组织就可以要求申请这些作品的版权。  </p><article class="message is-info"><div class="message-body"><b>Copyright: a formal recognition of ownership of a created and published work.</b></div></article>   <p><br></p><hr><p>版权可以被下面这些形式的作品申请：  </p><ul><li>文学作品</li><li>音乐作品</li><li>电影和影视作品</li><li>电视广播，电台和博客</li><li>艺术作品</li><li>一个计算机程序</li></ul><p>版权因以下的两个观点而存在：<br>第一是：创作需要时间和精力，需要独创性思维。因此版权所有者应当有机会为此挣钱。<br>第二是：其他的一些个人或者组织可能会在不向创作者支付任何费用的情况下复制作品并从中赚钱。这对于版权所有者来说是十分不公平的。  </p><p>版权需要通过法律程序来保护。不同的国家对于版权的法律有细微差别，但是有这么一个国际协议：版权法，是每个国家必须遵守的。例如：未经原版权持有人许可，某人不允许在另一个国家出版作品。  </p><p>一般来说，版权法会包含：  </p><ul><li>要求记录作品的创作时间。  </li><li>在规定的期限内，版权法会保护作品。  </li><li>如果版权持有人去世，应当适用的法律。  </li><li>采用版权的内容会被”©”符号注释。  </li></ul><p>如果有人买下了版权内容，那么他们就允许无限制地复制这些内容，前提是这些内容仅供个人使用。  </p><p><br></p><hr><h2 id="软件许可"><a href="#软件许可" class="headerlink" title="软件许可"></a><strong>软件许可</strong></h2><h3 id="商业软件"><a href="#商业软件" class="headerlink" title="商业软件"></a><strong>商业软件</strong></h3><p>商业软件本质上与一些商业产品没什么大的差别。他们一般都是由一家旨在盈利的公司创建并销售。但是他们有一个显著的差别：  </p><p>设想你在科技市场买下了一台电脑，那么你就拥有这台电脑的所有权。但是如果你买下了一款计算机软件，你实际上是不会拥有他的使用权的，软件的所有权还是归属于供应商。  </p><p>也就是说，买下计算机软件就是相当于买下了一个许可证，你可以在期限内使用这款软件。软件许可证可以是有期限的，也可以是买断制永久性的。  </p><p>一般来说，买软件的时候都会出现一下这一些情况：  </p><ul><li>购买软件的每一个个体都需要去支付一定的费用。  </li><li>一个组织可以订购一批许可证。组织内的每一个个体可以在规定的时间期限内使用这个软件。  </li><li>对于教育工作者或者学生来说，需要支付的费用可能要相对便宜一些。  </li></ul><p><br></p><hr><h3 id="开源软件或自由软件"><a href="#开源软件或自由软件" class="headerlink" title="开源软件或自由软件"></a><strong>开源软件或自由软件</strong></h3><p>这两种类别都十分相似，他们都是非盈利性质的。<br>一些软件提供给你免费的使用权，但是软件本身是不开源的，这意味着你无法去编辑这些代码，查找代码中的BUG，或者制造属于你自己的版本。  </p><p>开源软件允许你去修改代码，并基于此软件创造或者开发一个全新的软件（前提是你不要去违反开源软件的协议。）开源软件允许用户和个体查看代码的好处有很多：个体可以遍历代码并找出代码中的错误，他们也可以在一些代码托管平台上(例如Github,Gitlab)去提交自己修改的分支，以改进原来的开源部分。他们也可以发表PR(Pull request)提交合并申请或者报告开源软件的问题。也就是说：开源软件由一个强大的社区支持，而社区的力量允许开源软件作者享受好处。  </p><article class="message is-info"><div class="message-body"><b>Open source software: software provided with the source code.</b><br><b>Free software: software provided with he source code when the user is free to use it as they wish.</b><br><b>Shareware: software provided free of charge for a limited period but no source code provided.</b><br><b>Freeware: software provided free of charge with no time limit for its use but no source code provided.</b></div></article>   <p><br></p><hr><h2 id="人工智能-AI"><a href="#人工智能-AI" class="headerlink" title="人工智能(AI)"></a><strong>人工智能(AI)</strong></h2><p>人工智能是多个学科的共同产物，包括哲学，心理学，神经科学，数学，语言学和控制工程。  </p><p>人工智能涉及使用计算机或者计算机控制的设备来执行通常与人类智能行为相关的任务。我们将考虑智能人类行为的五个方面，讨论模拟这种人类行为的人工智能的一些应用。  </p><p><br></p><hr><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a><strong>解决问题</strong></h3><p>人工智能可以做到与你在国际象棋中对局。这可以被认为是显示了人工智能，但这只是因为国际象棋的规则是有限的。只要一台计算机拥有足够的存储容量和算力，那么这一个人工智能程序会在大量的训练之后研究更多的选项来解决现实生活中的问题，以至于人类的智力能力都无法与其竞争。  </p><p><br></p><h3 id="语言学"><a href="#语言学" class="headerlink" title="语言学"></a><strong>语言学</strong></h3><p>语音识别和语音合成技术已经开发并投入使用了。比如说你打一个客服电话，但是对面应答的不是一个人，而是一个机器。如果你可以清楚地描述你遇到的问题，计算机系统可能会识别你的需求，并将你移交给合适的人来帮助你。  </p><p>现在的GPT语言模型也是十分的强势。没有试过的可以去注册一个New Bing试试看。  </p><p><br></p><h3 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a><strong>自动化</strong></h3><p>现在，机器人已经进入了工厂，开始协助大规模的生产了。这些机器人会被程序要求执行特定的循环操作。机器人的每次动作都是由某一些机制触发的。然而如果这些机器人碰到了意料之外的情况，他们就会停止运行，无论他们是否造成了任何损坏。  </p><p>现在已经有很多研究旨在加速自主意识机器人的研发，为了工厂中的机器能够更灵活的处理各种任务。我们必须要在这些机器人上面增加传感器，传感器将外界信号传递给处理器，然后再由程序进行判断。  </p><p>无人驾驶汽车就是一个很好的例子。不过现在在驾驶领域应用比较广的还得是自动泊车。  </p><p><br></p><h3 id="推理"><a href="#推理" class="headerlink" title="推理"></a><strong>推理</strong></h3><p>有一些AI允许程序能够从证据和线索出发，来推理出最终的结论。最好的例子就是将数学定理交给计算机程序去进行证明和验证。  </p><p><br></p><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a><strong>机器学习</strong></h3><p>机器学习是目前AI领域里面能给人们带来最大惊喜的分支。AI会在实际的例子中积累经验，通过正向和逆向反馈来进行学习。AI会使用一套适当的数学统计算法来学习。  </p><p>这方面大家懂得都懂所以我就少写点了……  </p><p><br></p><h3 id="AI的影响"><a href="#AI的影响" class="headerlink" title="AI的影响"></a><strong>AI的影响</strong></h3><p>AI确实可以提升社会的工作效率，因为AI很适合节省一些需要重复的简单工作。在这些任务中AI可以做到比人类更高的稳定性和速度。  </p><p>现在ChatGPT的爆火证明了社会确实对于AI新技术的认可和兴趣，因为AI的诞生和发展增加了人们工作的效率，减轻了人们工作的脑力支配。  </p><p>然而有很多人担忧AI在未来会取代很多人类的工作，比如工厂的装配工之类的工作。这很有可能引发一批批的失业。有些人也认为AI是不具备处理部分复杂信息的能力的，比如说自动驾驶的稳定性。  </p><p>只能说仁者见仁智者见智吧。  </p><p><br></p><hr><h1 id="第十一章：数据库"><a href="#第十一章：数据库" class="headerlink" title="第十一章：数据库"></a><strong>第十一章：数据库</strong></h1><p>第二章到第十章中间的内容之后目前还没讲，之后再说  </p><h2 id="关于数据库"><a href="#关于数据库" class="headerlink" title="关于数据库"></a><strong>关于数据库</strong></h2><p>我们所说的数据库，一般指的是数据库管理系统，又叫数据库管理软件。英文为：Database Management System (DBMS)。  </p><p>常用的数据库管理软件有<code>MySQL</code>，<code>SQLite</code>等。<br>在很多大型公司里，一个数据库往往是一个项目的核心。</p><p>那么数据库存在的意义是什么？既然只是为了记录数据，我为啥要使用数据库？<br>主要是因为，我们存在大批量的数据并且还需要高速有效地写入或检索出来。</p><p>下面用一个例子来简单解释一下数据库的优势：  </p><p><br></p><hr><p><br></p><p>设想一下，你在一家电影院里工作，影院需要录入每一部电影的片名，上映时间，电影类型等等数据，并且使用<strong>文字处理软件</strong>进行记录。<br>在这个例子中，我们就假定使用Windows自带的“记事本”进行txt文件的编辑吧。<br>这样有专门的工作人员手动往这个txt文件里塞入一行一行有关的信息。一行写满了一部电影的数据，就像这样：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">片名</th><th style="text-align:center">导演</th><th style="text-align:center">电影类型</th><th style="text-align:center">时长</th><th style="text-align:center">票价</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">《数据库》</td><td style="text-align:center">张三</td><td style="text-align:center">科幻</td><td style="text-align:center">110分钟</td><td style="text-align:center">56元</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">《开学》</td><td style="text-align:center">李四</td><td style="text-align:center">惊悚</td><td style="text-align:center">124分钟</td><td style="text-align:center">79元</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table></div><p>那么这种处理数据的方法都会出现哪些问题捏？  </p><p><br></p><hr><p>     <strong>· 冗余</strong>  </p><p>一次换班过后，原来负责记录信息的工作人员润了。取而代之的是一个新的员工。<br>有一天，一部叫做《数据库》电影返场了。所以这一位新员工理所当然地更新了数据：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">片名</th><th style="text-align:center">导演</th><th style="text-align:center">电影类型</th><th style="text-align:center">时长</th><th style="text-align:center">票价</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">《数据库》</td><td style="text-align:center">张三</td><td style="text-align:center">科幻</td><td style="text-align:center">110分钟</td><td style="text-align:center">56元</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">《开学》</td><td style="text-align:center">李四</td><td style="text-align:center">惊悚</td><td style="text-align:center">124分钟</td><td style="text-align:center">79元</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">541</td><td style="text-align:center">《数据库》</td><td style="text-align:center">张三</td><td style="text-align:center">科幻</td><td style="text-align:center">110分钟</td><td style="text-align:center">56元</td></tr></tbody></table></div><p>这显然是不合理的，因为新录入的信息与之前的老信息发生了重复。<br>作为一款文字处理软件，想要排查这样的错误无异于大海捞针。<br>但是使用数据库就不会出现这种问题。  </p><p><br></p><hr><p>     <strong>· 无法检索并汇总</strong>  </p><p>假设电影院至今已经播出了114514部不同的电影，每一部电影都存在于这份文档中。<br>然后有一天你的老板让你整理出来所有票价高于80元的电影的片名，导演，电影类型等数据，汇总给老板看。  </p><p>然后你打开了txt文件——</p><p><strong>寄。</strong>  </p><p>你会发现你无法通过限定数据来进行检索和整理输出。因此最好的方法就是滑动鼠标滚轮靠肉眼一行一行人工检索了。  </p><p>同理，使用数据库就不会出现这种问题。  </p><p><br></p><hr><p>     <strong>· 可移带性、规范性差</strong></p><p>然后假如电影院记录的数据十分的完整，以至于有其他的电影院想有偿使用你的这一份txt文件。<br>然后对方付了钱，你发过去了这一份txt文件。  </p><p>但是与此同时，收到这一份文件的另一家电影院已经开始痛苦面具了——因为标准或者语言的不同，使用的这一份数据无法直接部署给对方使用，导致对方需要花费大量的经历去做数据的重新整理。</p><p>而数据库有一套比较统一的语言系统和语法，允许数据库方便地在不同计算机上转移数据。</p><p><br></p><p>当然还会有更多的问题，这里就不列举了</p><p><br></p><hr><h2 id="数据库的标准"><a href="#数据库的标准" class="headerlink" title="数据库的标准"></a><strong>数据库的标准</strong></h2><p>像TCP,UDP之类的传输协议，都是一些白纸黑字的成文标准。SQL也是如此。<br>SQL，全称 Structured Query Language。 </p><h2 id="关系型数据库内容"><a href="#关系型数据库内容" class="headerlink" title="关系型数据库内容"></a><strong>关系型数据库内容</strong></h2><p>现在很多应用都需要处理对象与对象之间的关系。<br>有关数据，抽离对象，数据，以及他们的关系，就可以用面向对象的语言来进行编写。<br>但是如果要根据此类数据创建一个数据库，就可以用关系型数据库将我们现在最主流的应用的数据平滑地记录下来。  </p><p><br></p><p>下面来介绍一下数据库的成分：  </p><h3 id="table"><a href="#table" class="headerlink" title="table"></a><strong>table</strong></h3><p>关系型数据库表达主体和关系，是通过<code>Relation</code>来完成的。（<del>俗话说就是表格</del>）<br><code>Attribute</code>代表在表格里面的一个列。<br>而<code>Tuple</code>就代表其中的一个行。<br>就是和Excel很像，但也仅仅是看着像了。</p><article class="message is-info"><div class="message-body"><b>Relation: the special type of table which is used in a relational database.</b><br><b>Attribute: a column in a relation that contains values.</b><br><b>Tuple: a row in a relation storing data for one instance of the relation.</b></div></article><p><br></p><h3 id="key"><a href="#key" class="headerlink" title="key"></a><strong>key</strong></h3><p><strong><code>key</code>（键）代表一个专用的特征码，甄别唯一性的一串字符。</strong>    </p><p><strong><code>Primary key</code> 为”主键“，代表现役判断重复性的根据。</strong><br>在作为<code>Primary key</code>的那一项，数据不能为空，也不能重复（只能唯一）。    </p><p><strong>在CIE考试里，在创建数据库的时候，都必须需要一个主键存在。</strong>  </p><p><strong><code>Candidate key</code> 是<code>Primary key</code> 的候选，都可以满足<code>Primary key</code>的特征以及功能。</strong>   </p><p>而<strong><code>Primary key</code>可以不是由<code>Candidate key</code>里面选出</strong>，因为<code>Candidate key</code>的定义为： “a key that could be chosen as the primary key.”    </p><p><code>Foreign key</code>（外键）是在某一些表内的主键<del>必须是主键</del>，作为在不同表之间确定信息以及联动查询的基础。  </p><p>一个表格内的一个主键拿出去给别的表做一个外键，这样就可以确定在两个表内不同的数据的联系，还可以保护数据的完整性。如果不用外键来引入与别的表格的联系，就需要将数据从另一个表格中再次输入一遍。这就出现了冗余现象。  </p><article class="message is-info"><div class="message-body"><b>Primary key: an attribute or a combination of attributes for which there is a value in each tuple and that value is unique.</b><br><b>Candidate key: a key that could be chosen as the primary key.</b>  <br><b>Secondary key: a candidate key that has not been chosen as the primary key.</b><br><b>Foreign key: an attribute in one table that refers to the primary key in another table.</b><br><b>Referential integrity: the use of a foreign key to ensure that a value can only be entered in one  table when the same value already exists in the referenced table.</b></div></article><p><br></p><hr><p><span class="tag is-warning">Example</span></p><p>有关于这点，这里举个例子解释一下：  </p><p>这里有一个考试表。下面开始在考试表内记录数据： </p><blockquote><p>9月1日，1号学生在4号考场里考了语文。<br>9月3日，一号学生在4号考场里考了计算机。<br>…  </p></blockquote><p>你会发现，其中没有一个类型的Attribute可以作为一个key来确定。所以这样就找不出一个<code>Candidate key</code>了：  </p><ul><li>学生不可以做为key，因为学生可以考多个科目。  </li><li>科目不可以作为key，因为一个科目可以重复被考。  </li><li>日期就更不用说了。</li></ul><p>但是我们需要联合两个或多个数据（不会和别的搭配重合的数据）来创建一个key，其中的每一个元素可以没有作为key的潜质。  </p><p>比如我规定查询”一号学生的语文考试记录“，就一定包含唯一性。<br>但是只去查询日期，就没法精准定位了。  </p><p><br></p><hr><h2 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a><strong>三范式</strong></h2><p>三范式存在的意义是让数据库的设计更加合理化，并落实成关系型数据库。当然，你也可以选择不去遵守三范式。  </p><h3 id="第一范式-1NF"><a href="#第一范式-1NF" class="headerlink" title="第一范式(1NF)"></a><strong>第一范式(1NF)</strong></h3><p>第一范式的内容：  </p><article class="message is-info"><div class="message-body"><b>数据表中的每一列(每个字段)必须是不可拆分的最小单元,也就是确保每一列的原子性。</b></div></article><p>简单来说就是一个单元格内只能去输入一个最小不可拆分的单元，不可再分。  </p><p>比如说像这样填表：</p><div class="table-container"><table><thead><tr><th style="text-align:center">ID</th><th style="text-align:center">Student</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">19班20号</td></tr></tbody></table></div><p>这样是不满足1NF的。满足第一范式写法需要改成：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">ID</th><th style="text-align:center">Student_Class</th><th style="text-align:center">Student_ID</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">19</td><td style="text-align:center">20</td></tr></tbody></table></div><p><br><br><br></p><h3 id="第二范式-2NF"><a href="#第二范式-2NF" class="headerlink" title="第二范式(2NF)"></a><strong>第二范式(2NF)</strong></h3><article class="message is-info"><div class="message-body"><b>在满足第一范式的情况下：表中的所有列，都必须依赖于同一个主键（或者联合主键的部分），而不能有任何一列与主键没有关系。</b></div></article><p>也就是说，一个表格需要描述一类信息，一张表仅描述一件事。</p><p>其实就是为了去冗余。  </p><p><br></p><hr><p><br></p><p><span class="tag is-warning">Example</span>  </p><p>表格：Exam  </p><div class="table-container"><table><thead><tr><th style="text-align:center">Student_ID</th><th style="text-align:center">Course_ID</th><th style="text-align:center">Date</th><th style="text-align:center">Student_Name</th><th style="text-align:center">Course_Name</th></tr></thead><tbody><tr><td style="text-align:center">1000</td><td style="text-align:center">101</td><td style="text-align:center">2002.3.10</td><td style="text-align:center">张三</td><td style="text-align:center">Linear Algebra</td></tr></tbody></table></div><p>在这个表格里，<code>Student_ID</code>,<code>Course_ID</code>和<code>Date</code>作联合主键。因为三者制约完全可以保证确定一个数据。  </p><p><code>Student_Name</code>依赖于<code>Student_ID</code>, <code>Course_Name</code>依赖于<code>Course_ID</code>。这种情况叫做部分依赖。<br>而部分依赖，是不符合第二范式的。  </p><p><br></p><p>因此，我们可以将<code>Student_Name</code>和<code>Course_Name</code>抽离至两个新表格<code>Student</code>和<code>Course</code>。<br>在<code>Student</code>表格内，<code>Student_ID</code>为<code>Student</code>表主键。需要将<code>Student_ID</code>列抽离到学生考试表格做外键。<br>在<code>Student</code>表格内，<code>Course_ID</code>为<code>Course</code>表主键。需要将<code>Course_ID</code>列抽离到学生考试表格做外键。  </p><p>如下所示：</p><p>Student ( <u>Student_ID</u>, Student_Name )<br>Course ( <u>Course_ID</u>, Course_Name )<br>Exam ( <u>Student_ID, Course_ID, Date</u>, <em>Student_ID(fk)</em>, <em>Student_ID(fk)</em> )</p><p>下划线代表主键，(fk)代表外键。  </p><h3 id="第三范式-3NF"><a href="#第三范式-3NF" class="headerlink" title="第三范式(3NF)"></a><strong>第三范式(3NF)</strong></h3><article class="message is-info"><div class="message-body"><b>在满足第二范式的情况下，任何的非主属性不得依赖于其他非主属性</b></div></article><p>好比说我在列一张表：  </p><div class="table-container"><table><thead><tr><th style="text-align:center"><u><em>main</em></u></th><th style="text-align:center">commits</th><th style="text-align:center">branch</th><th style="text-align:center">system</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table></div><p>规定<code>main</code>是主键，则<code>commits</code>,<code>branch</code>,<code>system</code>都必须与<code>main</code>有联系。  </p><p>假如说<code>system</code>仅与<code>branch</code>有关系，则证明不符合第三范式。  </p><p><br></p><hr><h3 id="使用三范式规范化数据库"><a href="#使用三范式规范化数据库" class="headerlink" title="使用三范式规范化数据库"></a><strong>使用三范式规范化数据库</strong></h3><p>下面是一张信息表。将其转换成数据库的形式，并符合三范式要求。  </p><blockquote><p><strong>Order no:</strong> 07845<br><strong>Date:</strong> 25-06-2016<br><strong>Customer no:</strong> 056<br><strong>Customer name:</strong>  CUP<br><strong>Address:</strong> Cambridge square      Cambridge<br><strong>Sales rep no:</strong> 2<br><strong>Sales Rep name:</strong>  Dylan Stoddart  </p><div class="table-container"><table><thead><tr><th style="text-align:center">Product no</th><th style="text-align:center">Description</th><th style="text-align:center">Quantity</th><th style="text-align:center">Price / unit</th><th style="text-align:center">Total</th></tr></thead><tbody><tr><td style="text-align:center">327</td><td style="text-align:center">Inkjet cartridges</td><td style="text-align:center">24</td><td style="text-align:center">$30</td><td style="text-align:center">$720</td></tr><tr><td style="text-align:center">563</td><td style="text-align:center">Laser toner</td><td style="text-align:center">5</td><td style="text-align:center">$25</td><td style="text-align:center">$125</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><strong>Total Price:</strong></td><td style="text-align:center">$835</td></tr></tbody></table></div></blockquote><p><br></p><hr><p><br></p><p>在表格上方的数据，都具有原子性。  </p><p>解释一下上半部分的数据：  </p><p><strong><code>customer_name</code>：</strong>  </p><ul><li><code>customer_name</code>显然是依赖于<code>customer_id</code>的，而且与<code>order_id</code>没有任何关系。<br>因此在<code>order_table</code>内不应该包含<code>customer_id</code>。  </li></ul><p><strong><code>sales_rep_name</code>：</strong>  </p><ul><li><p>同理，<code>sales_rep_name</code>是依赖于<code>sales_rep_id</code>的，而且与<code>order_id</code>没有任何关系。  </p><p>因此在<code>order_table</code>内不应该包含<code>sales_rep_name</code>。</p></li></ul><p><strong><code>address</code>：</strong>  </p><ul><li><p><code>address</code>是可以发生变化的。如果<code>address</code>依赖于<code>customer_id</code>，则代表<code>address</code>是固定的。 但是在实际情况下，一个订单只能有一个地址，但是收货人可以选择相对于他的多个地址。<br>比如说第一次寄到学校，第二次寄到公司，第三次寄到家里…  </p><p>因此，<code>address</code>是依赖于<code>order_id</code>的。  </p></li></ul><hr><p>接下来再分析一下下面表格的数据：  </p><p><strong><code>price/unit</code>：</strong>  </p><ul><li>这是一个比较纠结的问题。  <code>price/unit</code>实际上是不依赖于<code>product_id</code>的。<br>因为如果实际操作中一旦改价格，主键不允许重复的特性会导致之前的老价格丢失掉。  </li><li>但是书上是学的理论知识，将<code>price</code>放到<code>product_table</code>里面也是可以的。因为没有违反任何范式。</li></ul><p><br></p><hr><p><br></p><p>因为第二范式的存在，我们不得不生成一个叫做<code>product_table</code>的表格,记录产品信息：  </p><p>表格： <code>product_table</code>  </p><div class="table-container"><table><thead><tr><th style="text-align:center"><u><em>product_id</em></u></th><th style="text-align:center">description</th><th style="text-align:center">price/unit</th></tr></thead><tbody><tr><td style="text-align:center">327</td><td style="text-align:center">Inkjet cartridges</td><td style="text-align:center">$30</td></tr><tr><td style="text-align:center">563</td><td style="text-align:center">Laser toner</td><td style="text-align:center">$25</td></tr></tbody></table></div><p>还需要生成<code>customer_table</code>和<code>rep_table</code>两个表格记录ID和名字的对应信息及关系：  </p><p>表格： <code>customer_table</code>  </p><div class="table-container"><table><thead><tr><th style="text-align:center"><u><em>customer_id</em></u></th><th style="text-align:center">customer_name</th></tr></thead><tbody><tr><td style="text-align:center">056</td><td style="text-align:center">CUP</td></tr></tbody></table></div><p>表格： <code>rep_table</code>  </p><div class="table-container"><table><thead><tr><th style="text-align:center"><u><em>sales_rep_id</em></u></th><th style="text-align:center">sales_rep_name</th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center">Dylan Stoddart</td></tr></tbody></table></div><p>还需要一张记录所有order信息的表格，记录order的信息。<br><code>product_table</code>和<code>rep_table</code>中的主键，在此表格中为外键。</p><p>表格： <code>order_table</code>   </p><div class="table-container"><table><thead><tr><th style="text-align:center"><u><em>order_id</em></u></th><th style="text-align:center">date</th><th style="text-align:center"><em>customer_id (fk)</em></th><th style="text-align:center">address</th><th style="text-align:center"><em>sales_rep_id (fk)</em></th></tr></thead><tbody><tr><td style="text-align:center">07845</td><td style="text-align:center">25-06-2016</td><td style="text-align:center">056</td><td style="text-align:center">Cambridge square, Cambridge</td><td style="text-align:center">2</td></tr></tbody></table></div><p>在此表格中，<code>order_id</code>构成主键。  </p><p>我们在上面创建的所有表格之间都确立了某种联系。<br>所有的表格创建完之后，就可以使用内外键来从<code>Product_order</code>表中确定商品和订单的关系了。</p><p>表格： <code>Product_order</code>    </p><div class="table-container"><table><thead><tr><th style="text-align:center"><u><em>product_id</em></u></th><th style="text-align:center"><u><em>order_id</em></u></th><th style="text-align:center">description</th><th style="text-align:center">quantity</th><th style="text-align:center">total</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table></div><p>本表格是<code>product</code>和<code>order</code>的关系表。  </p><p>在此表格中，<code>product_id</code>和<code>order_id</code>构成联合主键。  </p><p><br></p><hr><h2 id="数据库管理系统-DBMS"><a href="#数据库管理系统-DBMS" class="headerlink" title="数据库管理系统 (DBMS)"></a><strong>数据库管理系统 (DBMS)</strong></h2><h3 id="有关DBMS"><a href="#有关DBMS" class="headerlink" title="有关DBMS"></a><strong>有关DBMS</strong></h3><p>数据库不仅仅是数据的集合，理解这一点至关重要。<br>数据库是按照理论模型的规则实现的。<br>大约40年前，ANSI(美国国家标准协会)在其三级模型中提出了这一基本概念。这三个层次是:</p><ul><li>外部层面 (External level)  </li><li>概念层面 (Conceptual level)</li><li>内部层面 (Internal level)</li></ul><p>结构如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBb850dbffc799d820725511421e115469?method=download&amp;shareKey=82e37f3d519539ff07cddbdb382fd0d7" alt=""></p><p>这个图面内容展示了数据存储在硬盘上的结构。<br>数据库存储的细节只有内部层面 (Internal level)才被指示出来，内部层面是ANSI架构中最低级的一个层级。<br>所有的访问数据的请求和处理，全部由<strong>数据库管理系统 (Database management system, DBMS)</strong>控制。  </p><p>在更高一层的概念层面，数据库有一个单一的通用视图 (View)，这个视图可以由一个有特定权限访问DBMS的管理员控制，叫做<strong>数据库管理员 (Database Administrator)</strong>。 </p><p>向用户提供视图的好处是：他们可以被数据库管理员用作一种确保安全性的机制。<br>单个用户或者用户组可以被DBA管理赋予适当的访问权限，以控制该试图允许的操作。<br>例如，用户可以读取数据，但是不能修改数据。或者用户只能访问数据库中有限数量的表。  </p><p>在ANSI体系结构中，概念层面有一个描述用户或者程序员感知的数据组织的概念模式，这也可以被描述成<strong>逻辑模式 (Logical schema)</strong>。  </p><p>逻辑模式是由数据库设计者综合所有的数据需求，并从全局的角度对数据库中全部数据的逻辑结构和特征的总体描述。是所有用户的公共数据视图，也叫做全局视图。  </p><article class="message is-info"><div class="message-body"><b>Data management system (DBMS): software that controls access to data in a database.</b><br><b>Database administrator: a person who uses the DBMS to customize the database to suit user and programmer requirements.</b></div></article><p><br></p><hr><h3 id="DBMS提供的功能"><a href="#DBMS提供的功能" class="headerlink" title="DBMS提供的功能"></a><strong>DBMS提供的功能</strong></h3><p>无论数据库的大小如何，一种通用的人机沟通方法是使用专用语言SQL。SQL语言会在下一节讨论。  </p><p>对于大多数的DBMS类型，都有SQL命令的替代方案。比如说DBMS通过开发者接口提供软件管理工具，这种工具允许他们去在数据库内创建表格，并定义属性以及数据类型。  </p><p>此外，DBMS还为程序员提供了开发用户界面的工具。DBMS还提供了一个<strong>查询处理器 (Query processor)</strong>，查询处理器允许我们创建和处理数据库中的查询操作。查询就是从数据库中提取和操作数据的机制。  </p><p>DBMS还可以生成一个和格式化的报告，或者一个表格。程序员可以在UI中合并对于查询和报表的访问。  </p><article class="message is-info"><div class="message-body"><b>Developer interface: gives access to software tools provided by a DBMS for creating tables.</b><br><b>Query processor: software tools provided by a DBMS to allow creation and execution of a query.</b><br><b>Query: used to select data from a database subject to defined conditions.</b></div></article><p><br></p><hr><h3 id="被DBA使用的DBMS功能"><a href="#被DBA使用的DBMS功能" class="headerlink" title="被DBA使用的DBMS功能"></a><strong>被DBA使用的DBMS功能</strong></h3><p>DBA的职务是负责设置用户和程序员视图，并定义适当的、特定的访问权限。  </p><p>DBMS的一个重要特性是<strong>数据词典 (Data dictionary)</strong>，他是数据库的一部分。除了DBA之外，没有人能够看见数据词典。<br><strong>数据词典包含了有关数据的元数据。</strong><br>数据词典内可以包含以下内容：  </p><ul><li>Field / Attribute names</li><li>Table name</li><li>Validation rules</li><li>Data types</li><li>Primary keys / Foreign keys</li><li>Relationships</li></ul><p>综上所述，数据词典包含所有表的属性和定义的细节，同时也包括物理存储是如何组织的。  </p><p>DBA也可以为表格创建<strong>索引 (Index)</strong>来提高数据库查找数据的性能和能力。  </p><p>索引是一个用于快速搜索的小型辅助表，它包含被搜索表中的一个attribute和指向该表中tuple的指针。</p><p>如果表中包含大量的attribute或者tuple,我们就很有必要为表格创建索引。<br>索引是具有为一只的属性相关联的辅助表。索引表包含属性值和指向原表中对应tuple的指针。索引可以在主键上，也可以在辅助键上。<br>搜索索引表通常来说比全表查询要快得多。  </p><article class="message is-info"><div class="message-body"><b>Index: a small secondary table used for rapid searching which contains one attribute from the table being searched and pointers to the tuples in that table.</b></div></article><p><br></p><hr><h2 id="MySQL及命令及语法"><a href="#MySQL及命令及语法" class="headerlink" title="MySQL及命令及语法"></a><strong>MySQL及命令及语法</strong></h2><h3 id="数据定义语言-DDL"><a href="#数据定义语言-DDL" class="headerlink" title="数据定义语言 (DDL)"></a><strong>数据定义语言 (DDL)</strong></h3><p><strong>数据定义语言 (Data definition language, DDL)</strong>是SQL中用于创建或者修改表的语言。这些命令只会创建数据库的结构，但是他们不负责将任何数据存入数据库。  </p><p>下面这是一段DDL的实例：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE BandBooking;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Band (</span><br><span class="line">  BandName <span class="type">varchar</span>(<span class="number">25</span>),</span><br><span class="line">  NumberOfMembers <span class="type">integer</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Band <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (BandName);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Band<span class="operator">-</span>Booking; </span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY (BandName); </span><br><span class="line"><span class="keyword">REFERENCES</span> Band(BandName);</span><br></pre></td></tr></table></figure><p>DDL有一些特性：  </p><ul><li>SQL命令由一系列命令组成。  </li><li>每一个命令由<code>;</code>终止。  </li><li>一个命令可以包含多行。  </li><li>不区分大小写。  </li><li>但是对于命令中的关键字，比如说<code>CREATE</code>或者<code>ALTER</code>使用全大写。对表格名称，attribute名称或者数据类型使用小写。   </li><li>当命令包含一系列项目的时候，每一个项目使用逗号隔开。  </li></ul><p>这些例子表明，一旦创建了数据库，就可以创建表和定义属性。<br>可以在<code>CREATE TABLE</code>命令中定义一个主键和一个外键，但是也可以使用如下所示的<code>ALTER TABLE</code>命令(它也可以用来添加额外的attribute)。  </p><p><br></p><hr><h3 id="数据操作语言-DML"><a href="#数据操作语言-DML" class="headerlink" title="数据操作语言 (DML)"></a><strong>数据操作语言 (DML)</strong></h3><p><strong>数据操作语言 (Data manipulation language, DML)</strong>可以用于下面这三种情况：  </p><ul><li>在创建数据库的时候将数据插入到表格中。  </li><li>修改或删除数据库中的数据。  </li><li>读取存储在数据库中的数据。  </li></ul><p>下面我会给出一系列例子来展示使用DML来向表格中填充数据：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Band (<span class="string">'ComputerKidz'</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Band<span class="operator">-</span>Booking (BandName, BookingID)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'ComputerKidz'</span>, <span class="string">'2016/023'</span>)  </span><br></pre></td></tr></table></figure><p>第一行的插入数据的方式是，根据<code>INSERT INTO</code>后面括号里的数据，依次填充每一个attribute。  </p><p>第二第三行就使用了一种相对保守的方法。<br>首先第二行指定了我需要填充<code>Band-Booking</code>表格中的<code>BandName</code>和<code>BookingID</code>两个attribute，然后在第三行使用<code>VALUES</code>命令按照第二行定义的数据顺序为他们赋值。  </p><p>你会发现：  </p><ul><li>两个命令都使用了括号。  </li><li>如果需要向表格中每一个attribute添加一个值，那么使用<code>INSERT</code>命令比较合理。  </li><li>这些属性都有顺序。  </li></ul><p><br></p><hr><p>DML的另一个用途是从数据库中查询数据，无论是原始数据还是合并数据。<br>这些命令总是先从<code>SELECT</code>命令开始。  </p><p>最简单的查询形式是将attribute作为输出列出来：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> BandName <span class="keyword">FROM</span> Band; </span><br></pre></td></tr></table></figure><p>代表从<code>Band</code>表格中选出了<code>BandName</code>这个attribute。<br>注意每一个元素中间都有一个空格。  </p><p>我们假设<code>Band</code>表格只有两个属性。如果要列出两者的值，我们同样由两个方法。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> BandName, NumberOfMembers</span><br><span class="line"><span class="keyword">FROM</span> Band;</span><br></pre></td></tr></table></figure><p>或者:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Band</span><br></pre></td></tr></table></figure><p>在第一种方式中，被选中的attribute之间使用逗号隔开，我们也不需要使用括号把attribute括起来。<br>在第二种方式里面，我们使用<code>*</code>(星号)来表示表格中的所有attribute。  </p><p><br></p><p>我们可以在SQL中使用控制输出指令，来规范我们输出的样式。<br>我们可以使用<code>ORDER BY</code> 命令来将输出的内容排序。比如说我们使用字母顺序来显示乐队名的数据：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> BandName, NumberOfMembers</span><br><span class="line"><span class="keyword">FROM</span> Band</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> BandName</span><br></pre></td></tr></table></figure><p>在上面的实例中，我们将<code>BandName</code>和<code>NumberOfMembers</code>两个attribute根据<code>BandName</code>进行了排序。请记住，<strong><code>ORDER BY</code>命令的排序是默认升序排序</strong>，如果想使用倒序排序，我们可以将最后一行命令改成这样：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> BandName <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><p>升序是小在上大在下，降序是大在上小在下。  </p><p>在这次查询中，没有重复条目的问题，因为<code>BandName</code>是<code>BandName</code>表的主键。<br>然而，在<code>Band-Booking</code>表中，一个单独的<code>BandName</code>值会出现很多次。因为一个乐队可以有很多不同的Booking。返回Booking值会蹦出很多相同的<code>BandName</code>值。<br>所以我们可以使用<code>GROUP BY</code>可以防止这种情况，如下所示:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> BandName</span><br><span class="line"><span class="keyword">FROM</span> Band<span class="operator">-</span>Booking</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> BandName;</span><br></pre></td></tr></table></figure><p>这样输出的值就会按照不同的<code>BandName</code>归类了。  </p><p><br></p><p>我们也可以将输出的数据加一些限制条件。这时候就可以使用<code>WHERE</code>命令了：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> BandName</span><br><span class="line"><span class="keyword">FROM</span> Band<span class="operator">-</span>Booking</span><br><span class="line"><span class="keyword">WHERE</span> Headlining <span class="operator">=</span> <span class="string">'Y'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> BandName</span><br></pre></td></tr></table></figure><p>上面的命令只会返回当<code>Headlining</code>的值为<code>Y</code>的结果。  </p><p>也可以同时查询多个attribute：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> BandName, NumberOfMembers</span><br><span class="line"><span class="keyword">FROM</span> Band <span class="keyword">WHERE</span> NumberOfMembers <span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> BandName;</span><br></pre></td></tr></table></figure><p>返回所有人数大于二的乐队。返回内容包含符合条件的两个attribute的内容。  </p><p><br></p><p><strong>聚合函数 (Aggregate functions)</strong>可以对一组值进行计算，并返回一个单一的值。聚合函数有很多种，比如<code>SUM</code>,<code>COUNT</code>或者<code>AVG</code>等等。  </p><p>下面开始举例：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">Count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> Band;</span><br></pre></td></tr></table></figure><p>表示Band中所有tuple的数量。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(NumberOfMembers)</span><br><span class="line"><span class="keyword">FROM</span> Band; </span><br></pre></td></tr></table></figure><p>返回在<code>Band</code>表格中所有<code>NumberOfMembers</code>的平均值。<br>同样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(NumberOfMembers)</span><br><span class="line"><span class="keyword">FROM</span> Band; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回在<code>Band</code>表格中所有<code>NumberOfMembers</code>的总和。  </p><p><br></p><p>有时候我们需要的数据存在在两张不同的表格中，这时候我们就需要用到连表查询。<br>查询可以基于两个表中数据之间的连接条件，最常用的链接方式是内连接 (inner join)。如下所示：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> VenueName, <span class="type">Date</span></span><br><span class="line"><span class="keyword">FROM</span> Booking</span><br><span class="line"><span class="keyword">WHERE</span> Band<span class="operator">-</span>Booking.BookingID <span class="operator">=</span> Booking.BookingID</span><br><span class="line"><span class="keyword">AND</span> Band<span class="operator">-</span>Booking.BandName <span class="operator">=</span> <span class="string">'ComputerKidz'</span></span><br></pre></td></tr></table></figure><p><em><code>Band-Booking.BandName</code>代表在<code>Band-Booking</code>表格中的attribute<code>BandName</code>。</em>  </p><p>上表将<code>Band-Booking</code>中的<code>BookingID</code>和<code>Booking</code>中的<code>BookingID</code>连接在了一起。其中<code>Band-Booking</code>表中的<code>BookingID</code>等于<code>Booking</code>表中的<code>BookingID</code>，并且<code>Band-Booking</code>表中的<code>BandName</code>列等于<code>ComputerKidz</code>。  </p><p>这就是内连接，内连接的条件是<code>Band-Booking.BookingID = Booking.BookingID</code>。  </p><p>Query Processor会这样处理这一段代码：  </p><ul><li>搜索乐队名称为ComputerKidz的实例。</li><li>查看BookingID。  </li><li>然后，在Booking表中搜索具有此值的tuple。    </li><li>对于符合条件的每一个数据，VenueName和Date都在输出中显示。  </li></ul><p>你也可以使用<code>INNER JOIN</code>命令来执行内连接操作。  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table1.column1, table2.column2</span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.common_field <span class="operator">=</span> table2.common_field</span><br></pre></td></tr></table></figure><p>选定了需要输出attribute之后，使用<code>INNER JOIN</code>命令来确定谁与这些内容发生内连接。  </p><p>随后使用<code>ON</code> 命令写出内连接条件。  </p><p><br></p><p>DML的另一个用途是修改存储在数据库中的数据。<br><code>UPDATE</code>命令用于修改数据。如果ComputerKidz乐队招募了一个额外的成员，下面的SQL语句会做出必要的改变:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Band</span><br><span class="line"><span class="keyword">SET</span> NumberOfMembers <span class="operator">=</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">WHERE</span> BandName <span class="operator">=</span> <span class="string">'ComputerKidz'</span></span><br></pre></td></tr></table></figure><p>首先定位需要更改值的表格，然后声明我要将<code>NumberOfMembers</code>改成6。<br>最后使用<code>WHERE</code>告诉Query processor说，我要更改<code>BandName</code>是<code>ComputerKidz</code>的值。  </p><p>如果不使用这个<code>WHERE</code>指令，数据库就会把表格中所有的<code>NumberOfMembers</code>改成6。  </p><p><br></p><p><code>DELETE</code>命令用于从数据库中删除数据，我们必须谨慎处理删除数据的操作。<br>假如说乐队<code>ITWizz</code>决定解散，我们就可以从数据库中删除他们的名字：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Band<span class="operator">-</span>Booking</span><br><span class="line"><span class="keyword">WHERE</span> BandName <span class="operator">=</span> <span class="string">'ITWizz'</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Band</span><br><span class="line"><span class="keyword">WHERE</span> BandName <span class="operator">=</span> <span class="string">'ITWizz'</span></span><br></pre></td></tr></table></figure><p>这样的就在<code>Band-Booking</code>表格和<code>Band</code>表格中都删除了这个乐队。  </p><p><br></p><hr><h3 id="命令基本操作"><a href="#命令基本操作" class="headerlink" title="命令基本操作"></a><strong>命令基本操作</strong></h3><p>下面来实操一下：  </p><p>首先我们需要创建一个数据库。<br>使用<code>create database</code>命令创建一个database。<br>比如说，下列命令：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">create</span> database school_system;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以创建一个叫做school_system的一个数据库。  </p><p>输出为：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，可以使用<code>show databases;</code>命令展示现有的所有数据库。  </p><p>运行<code>show databases</code>的输出为：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Database                          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql                                 <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> school_system                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> sys                                       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这里，<code>school_system</code>数据库即为我们刚才创建的数据库，其余的都是自带的。    </p><hr><p>如果想向数据库内添加数据，需要进入到特定的数据库内。(类似于cd命令)<br>这里可以使用<code>use *数据库名*</code>来进入到特定的数据库。    </p><p>运行<code>use school_system</code>命令的输出结果为：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Database changed</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代表我们已经成功地进入了此数据库。  </p><hr><p>接下来，使用<code>create *参数*</code>命令是要定义数据结构。<br>此命令后面需要跟着要填入的数据以及信息。    </p><p>比如说此命令：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">student_id <span class="type">int</span>,</span><br><span class="line">student_name <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">student_gender <span class="type">char</span>(<span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>命令代表创建一个叫做student的表格。<br>里面的参数为：<br><br></p><p><code>student_id int,</code>代表创建一个名称为<code>student_id</code>的Field。它的数据类型为整型。  </p><p><br></p><p><code>student_name varchar(50),</code>代表数据类型是<code>student_name</code>，数据类型是<code>varchar</code>，长度上限为50。<br>P.S. <code>varchar</code>代表“可变的数据长度“。  </p><p><br></p><p><code>student_gender char(1),</code>代表在<code>student_gender</code>中，数据类型是<code>char</code>，上限为1。<br><code>char</code>代表”定长数据“。  </p><p><br></p><p>输出结果为:  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代表表格创建成功了。</p><p>这里有几个注意事项：</p><ul><li><code>;</code>代表一行命令结束。当写下一行命令后，程序不会直接完成操作，直到出现了一个<code>;</code>。  </li><li>如果在<code>student_gender char(1)</code>的末尾加一个逗号，会判定为错误。因为这已经是此次create命令里面最后一行参数，不需要再次使用逗号隔开参数。  </li><li>多有<code>()</code>是成对出现的。括号的范围代表命令参数的范围。</li></ul><p><br></p><hr><p>使用<code>show tables;</code>命令展示数据库内所有的table。<br>在这里运行<code>show tables;</code>的结果为：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_school_system <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> student                                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明已经存在一个student table了</p><hr><p>之后，我们需要写入数据。  </p><p>使用<code>insert into</code>命令写入数据。<br>以下命令：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">1000</span>, <span class="string">'张三'</span>,<span class="string">'M'</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代表向student表格内插入<code>(1000, '张三','M')</code>三个数据。其中：<br><code>1000</code>对应<code>student_id</code><br><code>张三</code>对应<code>student_name</code><br><code>M</code>对应<code>student_gender</code>  。  </p><p>运行后输出为：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样代表写入成功。  </p><p>输入<code>select</code>命令，可以查看table中的数据：<br>运行<code>select * from student;</code>命令的输出为：  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------------------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span> student_id <span class="operator">|</span> student_name <span class="operator">|</span> student_gender <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------------------+-------------------------+</span></span><br><span class="line"><span class="operator">|</span>             <span class="number">1000</span> <span class="operator">|</span> 张三                    <span class="operator">|</span> M                             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+----------------------+-------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在此命令中，<code>*</code>代表范围内的全部。  </p><hr><h1 id="PART-TWO：基本问题的解决与编程技能"><a href="#PART-TWO：基本问题的解决与编程技能" class="headerlink" title="PART TWO：基本问题的解决与编程技能"></a><strong>PART TWO：基本问题的解决与编程技能</strong></h1><h1 id="第十二章：算法设计与解决问题"><a href="#第十二章：算法设计与解决问题" class="headerlink" title="第十二章：算法设计与解决问题"></a><strong>第十二章：算法设计与解决问题</strong></h1><h2 id="计算思维"><a href="#计算思维" class="headerlink" title="计算思维"></a><strong>计算思维</strong></h2><p>计算思维是一种解决问题的思路，通常以清晰的步骤来呈现。<br>计算思维是一种逻辑思维，在计算机这门学科中，使用计算思维来解决问题是十分常见的。  </p><p>计算思维包括五大部分：“抽象问题”，“分解问题”，“数据建模”，“样式识别”和“算法思维”。  </p><h3 id="抽象问题"><a href="#抽象问题" class="headerlink" title="抽象问题"></a><strong>抽象问题</strong></h3><p>抽象问题的目标是将问题最本质最中心的部分提取出来，过滤掉我们不需要的信息，以便我们分析并解决问题。<br>这在我们的生活中是很常见的，比如开车在市中心规划最近的路线，我们就可以抽象我们想要的信息单独处理。  </p><p>就像数学中的化简思维一样，把复杂的问题简单化，就可以让我们解决更困难的问题。  </p><p><br></p><h3 id="分解问题"><a href="#分解问题" class="headerlink" title="分解问题"></a><strong>分解问题</strong></h3><p>下一步就是要把一个大块的问题分解成若干小问题，并一个一个解决。  </p><p><br></p><h3 id="数据建模"><a href="#数据建模" class="headerlink" title="数据建模"></a><strong>数据建模</strong></h3><p>数据建模管的是数据的管理，分析和处理。  </p><p><br></p><h3 id="样式识别"><a href="#样式识别" class="headerlink" title="样式识别"></a><strong>样式识别</strong></h3><p>有点像是套公式的意思：总结问题并发现是不是已经有相关的；成系统的解决方法，可以解决这个问题。<br>比如说移用已经存在的算法，比如冒泡排序。  </p><p><br></p><h3 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a><strong>算法设计</strong></h3><p>最后我们就需要设计一个可以解决问题的算法。  </p><article class="message is-info"><div class="message-body"><b>Algorithm: a sequence of defined steps that can be carried out to perform a task.</b></div></article>   <p><br></p><hr><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a><strong>算法</strong></h2><p>我们每天都会使用算法。<br>假如说你想要烤个蛋糕，你可以遵循下面的步骤：  </p><ol><li>称量下列的原料：200g白糖，200g黄油，4个鸡蛋，200g面粉，2茶匙的酵母和2茶匙的牛奶。  </li><li>将这些食材放入一个大碗中混合，只到混合物变得质地均匀。  </li><li>将混合物倒入一个蛋糕模具。  </li><li>放入烤箱，将烤箱设置为190℃，烘烤20分钟。  </li><li>检查蛋糕到底有没有烤好。  </li><li>将蛋糕从烤箱中的模具中拿出来，并放置在铁架上冷却。  </li></ol><p>上面的这一些步骤就是一个算法。这些食材是输入部分，而蛋糕就是这个算法的输出。算法具体的过程是讲原料混合，然后放入烤箱烘烤。  </p><p><br></p><p>有些时候问题是会发生一些灵活的变化的，其中一些条件变化就会影响到我们解决问题的步骤。<br>比如说我们现在要去考虑如何在伦敦地铁中到达想要去的目的地。  </p><p>从 King’s Cross St. Pancras 到 Westminster,一共有两条备选路线：  </p><p>A：乘坐Victoria Line 到Green Park(4站)，然后再换乘Jubilee Line到Westminster(1站)。<br>B：乘坐Piccadilly Line 到Green Park(6站)，然后再换乘Jubilee Line到Westminster(1站)。  </p><p>A看起来像是最好的路线，但是如果在Victoria Line上面有施工的话，那么B就是最好的路线。这种情况下我们就需要重新设计我们的算法。  </p><p>如果以上的逻辑写成有点类似于代码的形式，那么它看起来就是这样的：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">IF there are engineering works on the Victoria Line</span><br><span class="line"></span><br><span class="line">  THEN</span><br><span class="line">    Take the Piccadilly Line to Green Park (6 stations)</span><br><span class="line">    Take the Jubilee Line to Westminster (1 station)</span><br><span class="line">  ELSE</span><br><span class="line">    Take the Victoria Line to Green Park (4 stations)</span><br><span class="line">    Take the Jubilee Line to Westminster (1 station)</span><br></pre></td></tr></table></figure><p><br></p><h2 id="算法的表示"><a href="#算法的表示" class="headerlink" title="算法的表示"></a><strong>算法的表示</strong></h2><p>在计算机中，我们会先将代码的结构或者思路以<strong>结构化英语 (Structured English)</strong>或者<strong>伪代码 (Pseudocode)</strong>表示。<br>有时我们也会使用<strong>流程图 (Flowchart)</strong>，侧重于表示代码的逻辑过程。  </p><article class="message is-info"><div class="message-body"><b>Structured English: a subset of the English language that consists of command statements used to describe an algorithm.</b><br><b>Pseudocode: a way of using keywords and identifiers to describe an algorithm without following the syntax of a particular programming language.</b><br><b>Flowchart: shapes linked together to represent the sequential steps of an algorithm.</b></div></article>   <p><br></p><p>算法包含很多细分的步骤，但是有些时候我们不想让计算机执行某几行代码，或者我们想重复某几行代码。<br>在计算机科学这门课程中，当我们在编写算法的时候，我们需要遵守下面这几个基本的结构：  </p><ul><li>赋值： 赋予数值一个名称，或者叫做标识符，或者更改指定标识符所代表的值。  </li><li>顺序： 一个接一个地执行步骤。  </li><li>选择： 在某些条件下执行某些步骤，否则就执行另一些步骤。  </li><li>重复： 一系列的步骤被重复执行多次，这也可以被叫做迭代或者循环。  </li></ul><p><br></p><p>我们在使用计算机解决问题时会涉及各种各样的数据，数据流在计算机中的处理方式一般是输入 -&gt; 处理 -&gt; 输出。  </p><p>处理好输入和输出后，我们就需要深入处理部分。首先我们需要了解处理的详细方法是什么，处理的步骤是什么样子的，我们的程序会怎么样设计。  </p><p>下面给出了部分处理的不同表示方法。包括结构化英语，伪代码和流程图。  </p><ol><li><p>分配与顺序：  </p><ul><li><p>结构化英语：   </p><p>SET A TO 34<br>INCREMENT B</p></li><li><p>伪代码：  </p><p>A ← 34<br>B ← B + 1</p></li></ul></li><li><p>选择：  </p><ul><li><p>结构化英语：  </p><p>IF A IN GREATER THAN B<br> THEN …<br> ELSE …</p></li><li><p>伪代码：  </p><p>IF A &gt; B<br> THEN ….<br> ELSE ….<br>ENDIF</p></li></ul></li><li><p>重复：  </p><ul><li><p>结构化英语：  </p><p>REPEAT UNTIL A IS EQUAL TO B…</p></li><li><p>伪代码：  </p><p>REPEAT<br> …<br>UNTIL A = B</p></li></ul></li><li><p>输入：  </p><ul><li><p>结构化英语：  </p><p>INPUT A </p></li><li><p>伪代码：  </p><p>INPUT “Prompt: “ A</p></li></ul></li><li><p>输出：  </p><ul><li><p>结构化英语：  </p><p>OUTPUT “Message”<br>OUTPUT B</p></li><li><p>伪代码：  </p><p>OUTPUT “Message”, B</p></li></ul></li></ol><p><br></p><hr><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a><strong>定义</strong></h3><p>当我们在程序中处理数据的时候，他们都需要被存进内存中。<br>我们需要把这些数据放在一个特殊的位置，好允许他们去自由读写。<br>我们一般将这些内存中的位置叫做<strong>变量 (Variables)</strong>。<br>这些变量就好比是一个贴上标签的盒子。当一个值被输入了之后，值就会被存在一个有标识的容器内。  </p><article class="message is-info"><div class="message-body"><b>Variable: a storage location for a data value that has an identifier.</b></div></article>   <p><br></p><h3 id="标识符表"><a href="#标识符表" class="headerlink" title="标识符表"></a><strong>标识符表</strong></h3><p>标识符表是用来解释每一个变量是干嘛用的，一般来说还要列出他们的数据类型。  </p><article class="message is-info"><div class="message-body"><b>Identifier table: a table listing the variable identifiers required for the solution, with explanations and data types.</b></div></article>   <p>比如说我这里有一个被写成结构化英语形式的问题：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INPUT number of miles</span><br><span class="line">CALCULATE number of km</span><br><span class="line">OUTPUT calculated result as km</span><br></pre></td></tr></table></figure></p><p>在我开始写伪代码之前，我需要先分析问题如何解决。<br>在这个问题中，我们需要设计一个变量，来存储输入的里程值，叫做<code>Miles</code>好了。<br>同时还需要另一个变量，用来存储转化为公里数后的结果。这里我选择定义这个变量为<code>Km</code>。  </p><p>这样就可以开始列表了：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">Identifier</th><th style="text-align:center">Explanation</th></tr></thead><tbody><tr><td style="text-align:center">Miles</td><td style="text-align:center">Distance as a whole number of miles.</td></tr><tr><td style="text-align:center">Km</td><td style="text-align:center">The result from using the given formula: Km = Miles * 1.61.</td></tr></tbody></table></div><p>请记住：所有的标识符表中都必须包含<strong>标识符，数据类型和解释。</strong>  </p><p>（<em>我只不过是没在这里加数据类型而已，因为数据类型在下一章才会接触到</em>）</p><hr><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a><strong>赋值</strong></h2><p>下面我们会写到很多伪代码。<br>课本里出现的伪代码并不是一个确切的语言，也就是说，可能每一家出版社的计算机课本的伪代码语法都不一样。<br>下面的赋值内容中出现的所有伪代码，同样确定了本书伪代码的语言规范。本书之后所有的伪代码全部遵守下面的语法规范。  </p><h3 id="向变量中赋值"><a href="#向变量中赋值" class="headerlink" title="向变量中赋值"></a><strong>向变量中赋值</strong></h3><p>我们来简单举一个例子。这个例子在下面的小节中也会用到。  </p><p>假如说我有一个变量<code>NumberOfGuesses</code>,用来记录在一个猜数字的游戏中，玩家一共猜了多少次；<br>玩家的名字会存储在一个叫做<code>ThisPlayer</code>的变量中。<br>玩家猜的数字会存在一个叫做<code>Number</code>的变量中。</p><p>那么下面的伪代码就讲述了我将用户的输入存入<code>Number</code>的过程：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INPUT Number</span><br></pre></td></tr></table></figure></p><p>随后我们要将<code>NumberOfGuesses</code>中的数值变为1，因为玩家做出了他的第一次猜测：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NumberOfGuesses ← 1 </span><br></pre></td></tr></table></figure></p><p><br></p><h3 id="更新值"><a href="#更新值" class="headerlink" title="更新值"></a><strong>更新值</strong></h3><p>假设玩家再次做出了一次猜测，那么变量<code>NumberOfGuesses</code>就应该加一：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NumberOfGuesses ← NumberOfGuesses + 1</span><br></pre></td></tr></table></figure><p><br></p><h3 id="复制值"><a href="#复制值" class="headerlink" title="复制值"></a><strong>复制值</strong></h3><p>值可以被从一个变量中复制到另一个变量中。</p><p>假如说我们有一个变量<code>Value1</code>，里面有一个值<code>15</code>。<br>现在我们想要将这个值复制到变量<code>Value2</code>中，伪代码就可以这么写：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Value2 ← Value1</span><br></pre></td></tr></table></figure><p>放在左边的变量是复制操作的目标变量。<br>复制完成后，<code>Value1</code>和<code>Value2</code>的值都是15。</p><p><br></p><h3 id="交换值"><a href="#交换值" class="headerlink" title="交换值"></a><strong>交换值</strong></h3><p>如果我们想要交换两个值，我们就需要第三个变量帮忙了。  </p><p>假设<code>Value1</code>为15，<code>Value2</code>为34。<br>我想要让<code>Value1</code>和<code>Value2</code>的位置交换，这时候我可以定义一个新的变量，叫做<code>Temp</code>，用于存放临时数据。  </p><p>接下来就可以写伪代码了。这看起来应该不算难理解：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Temp ← Value1</span><br><span class="line">Value1 ← Value2</span><br><span class="line">Value2 ← Temp</span><br></pre></td></tr></table></figure><p><br></p><hr><h2 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a><strong>逻辑表达式</strong></h2><p>还记得一开始的地铁问题吗？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">IF there are engineering works on the Victoria Line</span><br><span class="line"></span><br><span class="line">  THEN</span><br><span class="line">    Take the Piccadilly Line to Green Park (6 stations)</span><br><span class="line">    Take the Jubilee Line to Westminster (1 station)</span><br><span class="line">  ELSE</span><br><span class="line">    Take the Victoria Line to Green Park (4 stations)</span><br><span class="line">    Take the Jubilee Line to Westminster (1 station)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个问题的实际解决过程中，我们需要使用逻辑表达式来解决问题。具体是用于判断那个IF条件。  </p><p>下面我会列出一些本书中会用到的逻辑运算符：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">Operator</th><th style="text-align:left">Comparison</th></tr></thead><tbody><tr><td style="text-align:left"><code>=</code></td><td style="text-align:left">等于</td></tr><tr><td style="text-align:left"><code>&lt;</code></td><td style="text-align:left">小于</td></tr><tr><td style="text-align:left"><code>&gt;</code></td><td style="text-align:left">大于</td></tr><tr><td style="text-align:left"><code>&lt;=</code></td><td style="text-align:left">小于等于</td></tr><tr><td style="text-align:left"><code>&gt;=</code></td><td style="text-align:left">大于等于</td></tr><tr><td style="text-align:left"><code>&lt;&gt;</code></td><td style="text-align:left"><strong>不等于</strong></td></tr></tbody></table></div><p>经过逻辑运算后，会输出一个布尔值（TRUE 或者 FALSE）。<br>特别注意的是：在一些语言里面，’=’符号通常作为赋值使用，但是再本书的伪代码部分中，<strong>‘=’是逻辑运算符，’←’是赋值符号。</strong>  </p><p><span class="tag is-warning">Example</span></p><p>举个例子：  </p><p>13岁以下的人被归类为儿童，19岁以上的人被归类为成年人。如果他们在13到19岁之间，他们被归类为青少年。我们可以把这些语句写成逻辑语句：  </p><ul><li><code>If Age &lt; 13 then person is a child.</code></li><li><code>If Age &gt; 19 then person is an adult.</code></li><li><code>If Age &gt;= 13 AND Age &lt;= 19 then person is a teenager.</code></li></ul><p><br></p><p><span class="tag is-warning">Example</span></p><p>我们再举一个例子：这里有一个猜数字的游戏。猜数游戏会根据特定条件采取不同的步骤。下面是算法描述。  </p><ul><li>玩家需要输入一个数字，来猜测存储的秘密数字。  </li><li>如果猜对了，那么程序就会显示祝贺语。  </li><li>如果这个数字比秘密数字要大，就会显示“秘密数字比他要小。”  </li><li>如果这个数字比秘密数字要小，就会显示“秘密数字比他要大。”  </li></ul><p>我们就可以将这个算法用伪代码写出来：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SET value for secret number</span><br><span class="line">INPUT Guess</span><br><span class="line">IF Guess = SecretNumber</span><br><span class="line">  THEN</span><br><span class="line">    OUTPUT "Well done. You have guessed the secret number."</span><br><span class="line">  ELSE</span><br><span class="line">    IF Guess &gt; SecretNumber</span><br><span class="line">      THEN</span><br><span class="line">        OUTPUT "Secret number is smaller."</span><br><span class="line">      ELSE</span><br><span class="line">        OUTPUT "Secret number is greater."</span><br><span class="line">    ENDIF</span><br><span class="line">ENDIF</span><br></pre></td></tr></table></figure><p><br></p><p>使用逻辑操作符<code>AND</code>、<code>OR</code>和<code>NOT</code>可以形成更复杂的条件。<br>例如，猜数字游戏可能允许玩家多次猜测,如果玩家猜了10次仍然没有猜出秘密数字，则输出不同的消息:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">IF Guess = SecretNumber</span><br><span class="line">  THEN</span><br><span class="line">    OUTPUT "Well done. You have guessed the secret number."</span><br><span class="line">  ELSE</span><br><span class="line">    IF Guess &gt; SecretNumber AND NumberofGuesses = 10</span><br><span class="line">      THEN</span><br><span class="line">        OUTPUT "You still have not guessed the secret number."</span><br><span class="line">      ELSE</span><br><span class="line">        IF Guess &gt; SecretNumber</span><br><span class="line">          THEN</span><br><span class="line">            OUTPUT "Secret number is smaller."</span><br><span class="line">          ELSE</span><br><span class="line">            OUTPUT "Secret number is greater."</span><br><span class="line">        ENDIF</span><br><span class="line">    ENDIF</span><br><span class="line">ENDIF</span><br></pre></td></tr></table></figure><p>像上面这样：当一个IF语句包含另一个IF语句时，我们称它们为嵌套IF语句。  </p><article class="message is-info"><div class="message-body"><b>Nested IF statements: conditional statements within conditional statements.</b></div></article>   <p><br></p><hr><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a><strong>循环</strong></h2><p>有些时候我们的代码需要重复执行某些命令。大家都知道代码是由上到下顺序执行的。也就是说，如果按照传统的方法重复指令，就需要一遍又一遍的写下这些代码。这就会给代码带来冗余。  </p><p>但是如果我们使用重复结构，或者叫做循环，就可以避免一遍又一遍地写相同的伪代码。  </p><p><br></p><p><span class="tag is-warning">Example</span></p><p>给个例子：  </p><p>我需要写一个程序，目标是将输入的10个数字里面找出最大的数字。  </p><p>我们还需要一个变量来存储一个计数器，以便我们知道什么时候比较了10个数字。  </p><p>先写标识符表：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">Identifier</th><th style="text-align:left">Explanation</th></tr></thead><tbody><tr><td style="text-align:left"><code>BiggestSoFar</code></td><td style="text-align:left">Stores the biggest number input so far.</td></tr><tr><td style="text-align:left"><code>NextNumber</code></td><td style="text-align:left">The next number to be input.</td></tr><tr><td style="text-align:left"><code>Counter</code></td><td style="text-align:left">Stores how many numbers have been input so far.</td></tr></tbody></table></div><p>代码写出来是这样的：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INPUT BiggestSoFar</span><br><span class="line">Counter ← 1</span><br><span class="line">REPEAT</span><br><span class="line">    INPUT NextNumber</span><br><span class="line">    Counter ← Counter + 1</span><br><span class="line">    IF NextNumber &gt; BiggestSoFar</span><br><span class="line">      THEN</span><br><span class="line">        BiggestSoFar ← NextNumber</span><br><span class="line">    ENDIF</span><br><span class="line">UNTIL Counter = 10</span><br><span class="line">OUTPUT BiggestSoFar</span><br></pre></td></tr></table></figure><p>在这个程序中出现了循环指令：<code>REPEAT...UNTIL</code>  </p><p>在REPEAT和UNTIL包裹的区域内，是将要循环的步骤。<br>UNTIL后面会跟一个逻辑表达式。当逻辑表达式成立的时候，跳出循环。  </p><p><br></p><p>这个题目还可以换一种方法来写：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">Identifier</th><th style="text-align:left">Explanation</th></tr></thead><tbody><tr><td style="text-align:left"><code>BiggestSoFar</code></td><td style="text-align:left">Stores the biggest number input so far.</td></tr><tr><td style="text-align:left"><code>NextNumber</code></td><td style="text-align:left">The next number to be input.</td></tr><tr><td style="text-align:left"><code>Counter</code></td><td style="text-align:left">Counts the number of times round the loop.</td></tr></tbody></table></div><p>请注意，<code>Counter</code>变量的用途已经改变了。这里的<code>Counter</code>是要记录循环的次数。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INPUT BiggestSoFar</span><br><span class="line">FOR Counter ← 2 TO 10</span><br><span class="line">    INPUT NextNumber</span><br><span class="line">    IF NextNumber &gt; BiggestSoFar</span><br><span class="line">      THEN</span><br><span class="line">        BiggestSoFar ← NextNumber</span><br><span class="line">    ENDIF</span><br><span class="line">NEXT Counter</span><br><span class="line">OUTPUT BiggestSoFar</span><br></pre></td></tr></table></figure><p>在第一次循环的时候，<code>Counter</code>的值被设为了2，下一次循环就变成了3，以此类推。最后一次循环的时候，<code>Counter</code>的值会被设为10。这时候达到了第二行定义过的<code>Counter</code>最大值，所以就会跳出循环。</p><p><br></p><p>Rogue value是在算法上下文中的一个特殊值，通常出现在递归或者循环算法中，作为终止条件出现。  </p><article class="message is-info"><div class="message-body"><b>Rogue value: a value used to terminate a sequence of values.</b></div></article>   <p><span class="tag is-warning">Example</span></p><p>下面我来用一个例子具体解释一下rogue value是干嘛用的：  </p><p>有一个非零数列以0结尾。这个数列是输入部分，请你找出这个数列中的最大值。  </p><p>在这个例子中，我们可以将rogue value设为0。因为0与数据类型相同，但是超出了我们正常期望值的范围。好比说如果我的输入会包含0，那么我也可以选择-1作为rogue value。  </p><div class="table-container"><table><thead><tr><th style="text-align:left">Identifier</th><th style="text-align:left">Explanation</th></tr></thead><tbody><tr><td style="text-align:left"><code>BiggestSoFar</code></td><td style="text-align:left">Stores the biggest number input so far.</td></tr><tr><td style="text-align:left"><code>NextNumber</code></td><td style="text-align:left">The next number to be input.</td></tr></tbody></table></div><p>其中一个可行的方案可以是这样的：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INPUT BiggestSoFar</span><br><span class="line">REPEAT</span><br><span class="line">    INPUT NextNumber</span><br><span class="line">    IF NextNumber &gt; BiggestSoFar</span><br><span class="line">      THEN</span><br><span class="line">        BiggestSoFar ← NextNumber</span><br><span class="line">    ENDIF</span><br><span class="line">UNTIL NextNumber = 0</span><br><span class="line">OUTPUT BiggestSoFar</span><br></pre></td></tr></table></figure><p>这种算法在绝大多数的情况下可以正常工作，但是如果唯一的输入是零，整个程序就炸了。  </p><p>所以说我们可以使用WHILE…ENDWHILE循环来实现同样的目的：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INPUT NextNumber</span><br><span class="line">BiggestSoFar ← NextNumber</span><br><span class="line">WHILE NextNumber &lt;&gt; 0 DO</span><br><span class="line">    INPUT NextNumber</span><br><span class="line">    IF NextNumber &gt; BiggestSoFar</span><br><span class="line">      THEN</span><br><span class="line">        BiggestSoFar ← NextNumber</span><br><span class="line">    ENDIF</span><br><span class="line">ENDWHILE</span><br><span class="line">OUTPUT BiggestSoFar</span><br></pre></td></tr></table></figure><p>在我们进入循环之前，我们需要检查是否存在一个非零的数字输入进来。为了处理第一个数字，我们需要将其存储在<code>NextNumber</code>和<code>BiggestSoFar</code>变量中。如果我们的第一个数字是零，就不执行循环中的指令。  </p><p><br></p><hr><h2 id="逐步求精法"><a href="#逐步求精法" class="headerlink" title="逐步求精法"></a><strong>逐步求精法</strong></h2><p>就像我们一开始在计算机思维那里提到过的：许多我们想要解决的问题比我们目前遇到的问题更大。为了让更大的问题更容易解决，我们将问题分解为更小的步骤。这些可能需要进一步分解，直到步骤足够小，可以轻松解决。  </p><p>为了使问题的解决方案可编程，我们需要将解决方案的步骤分解为序列、分配、选择、重复、输入和输出。</p><p>我们可以使用一种称为逐步求精的方法，将轮廓解决方案的步骤分解为更小的步骤，直到它足够详细。<br>在本章节的一开始，我们就举了一个烤蛋糕的例子。当时的第二步就被我们简单的细化了一下。</p><article class="message is-info"><div class="message-body"><b>Stepwise refinement: breaking down the steps of an outline solution into smaller and smaller steps.</b></div></article>   <p><span class="tag is-warning">Example</span></p><p>老规矩，上例子：  </p><p>写一个程序：将选定的符号和一个奇数作为输入。输出一个完全由选定的符号组成的金字塔形状，最后一行中的符号数量与输入的数字匹配。  </p><p>好比说我输入一个数字9，就会给我输出这个：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    A</span><br><span class="line">   AAA</span><br><span class="line">  AAAAA</span><br><span class="line"> AAAAAAA</span><br><span class="line">AAAAAAAAA</span><br></pre></td></tr></table></figure><p><em>上面的排版可能会歪掉，所以我简单描述下：上面代码块里面就是一个由A组成的，最下面一行有九个A的三角形。</em></p><p>首先分解问题：具体的步骤可以写成下面的这几行结构化英语：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.  Set up initial values</span><br><span class="line">2.  REPEAT</span><br><span class="line">3.      Output number of spaces</span><br><span class="line">4.      Output number of symbols</span><br><span class="line">5.      Adjust number of spaces and number of symbols to be output in next row</span><br><span class="line">6.  UNTIL the required number of symbols have been output in one row</span><br></pre></td></tr></table></figure><p>这里的1. 2. 3.等代表解决问题需要的步骤，下面会有提到。  </p><p>首先初始化，然后重复以下步骤，直到完成第一行的输出：  </p><ul><li>输出空格数</li><li>输出符号</li><li>调整下一行要输出的空格数和符号数</li></ul><p><br></p><p>其次我们还需要考虑需要使用哪些变量，以及这些变量的作用。<br>比如说，我们还需要：  </p><ul><li>组成金字塔的符号（组成金字塔具体的字符）</li><li>在最后一行中字符的个数（为了让金字塔看起来对称，我们必须输入一个奇数）</li></ul><p><br></p><p>然后我们还需要计算形成第一行需要多少空格。如果这个金字塔是对称的，那么第一行的最后一个字符一定出现在最后一行字符的中间位置。  </p><p>我们需要将第一行输出的符号数量设置为1，这样我们就需要下面的标识符：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">Identifier</th><th style="text-align:left">Explanation</th></tr></thead><tbody><tr><td style="text-align:left"><code>Symbol</code></td><td style="text-align:left">The character symbol to form the pyramid.</td></tr><tr><td style="text-align:left"><code>MaxNumberOfSymbols</code></td><td style="text-align:left">The number of symbols in the final row.</td></tr><tr><td style="text-align:left"><code>NumberOfSpaces</code></td><td style="text-align:left">The number of spaces to be output in the current row.</td></tr><tr><td style="text-align:left"><code>NumberOfSymbols</code></td><td style="text-align:left">The number of symbols to be output in the current row.</td></tr></tbody></table></div><p>分解问题之后，解决他就相对简单了。  </p><p>解决完前摇之后，就可以将精力专注于写解决方案上了：  </p><p>第一部分初始化的代码如下：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INPUT Symbol</span><br><span class="line">INPUT MaxNumberOfSymbols</span><br><span class="line">NumberOfSpaces ← (MaxNumberOfSymbols - 1) / 2</span><br><span class="line">NumberOfSymbols ← 1</span><br></pre></td></tr></table></figure><p>因为变量<code>MaxNumberOfSymbols</code>需要一个合法的输入（一个奇数），所以我们就需要将第二行替换成下面这样，才可以保证合法输入。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPEAT</span><br><span class="line">    INPUT MaxNumberOfSymbols</span><br><span class="line">UNTIL MaxNumberOfSymbols MOD 2 = 1</span><br></pre></td></tr></table></figure><p>这里的MOD是取余的意思。如果<code>MaxNumberOfSymbols</code>除以二之后是1，那么这就代表输入是合法的。<br>如果不合法，那么程序就会一直重复输入这一步，直到输入合法。  </p><p>替换进去，第一步的完整代码就是：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INPUT Symbol</span><br><span class="line">REPEAT</span><br><span class="line">    INPUT MaxNumberOfSymbols</span><br><span class="line">UNTIL MaxNumberOfSymbols MOD 2 = 1</span><br><span class="line">NumberOfSpaces ← (MaxNumberOfSymbols - 1) / 2</span><br><span class="line">NumberOfSymbols ← 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><p>第二步就是个重复开始字段，所以接下来细说第三步和第四步。  </p><p>这是第三步的解法：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FOR i ← 1 TO NumberOfSpaces</span><br><span class="line">    OUTPUT Space</span><br><span class="line">NEXT i</span><br></pre></td></tr></table></figure><p>一个原味i循环。  </p><p>然后是第四步：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FOR i ← 1 TO NumberOfSymbols</span><br><span class="line">    OUTPUT Symbol</span><br><span class="line">NEXT i</span><br><span class="line">OUTPUT Newline</span><br></pre></td></tr></table></figure><p><br></p><p>在第五步中，我们需要将接下来每一行的空格的数量减少1，将符号的数量增加2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NumberOfSpaces ← NumberOfSpaces - 1</span><br><span class="line">NumberOfSymbols ← NumberOfSymbols + 2</span><br></pre></td></tr></table></figure><p><br></p><p>第六步会检查下一行的符号数量现在是否大于开始时输入的值:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNTIL NumberOfSymbols &gt; MaxNumberOfSymbols</span><br></pre></td></tr></table></figure><p>最后就可以把整块代码合起来了。这就是最后的产物：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">INPUT Symbol</span><br><span class="line">REPEAT</span><br><span class="line">    INPUT MaxNumberOfSymbols</span><br><span class="line">UNTIL MaxNumberOfSymbols MOD 2 = 1</span><br><span class="line">NumberOfSpaces ← (MaxNumberOfSymbols - 1) / 2</span><br><span class="line">NumberOfSymbols ← 1</span><br><span class="line">REPEAT</span><br><span class="line">    FOR i ← 1 TO NumberOfSpaces</span><br><span class="line">        OUTPUT Space</span><br><span class="line">    NEXT i</span><br><span class="line">    FOR i ← 1 TO NumberOfSymbols</span><br><span class="line">        OUTPUT Symbol</span><br><span class="line">    NEXT i</span><br><span class="line">    OUTPUT Newline</span><br><span class="line">    NumberOfSpaces ← NumberOfSpaces - 1</span><br><span class="line">    NumberOfSymbols ← NumberOfSymbols + 2</span><br><span class="line">UNTIL NumberOfSymbols &gt; MaxNumberOfSymbols</span><br></pre></td></tr></table></figure><p>Stepwise refinement本质上来讲就是分解步骤。把他用到写程序中是一个很好的习惯（  </p><p><br></p><hr><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a><strong>模块</strong></h2><p>另一种开发解决方案的方法是将问题分解为子任务。每个子任务可以被认为是一个单独细化的模块。模块里面包含的东西是<strong>过程 (Procedure)</strong>和<strong>函数 (Function)</strong>。  </p><p><strong>过程 (Procedure)</strong>将许多小的步骤组合在一起，并给它们一个名称(标识符)。<br>当我们想引用这组步骤时，可以使用这个标识符。<br>当我们想要执行过程中的步骤时，我们通过过程的名称调用该过程。</p><article class="message is-info"><div class="message-body"><b>Procedure: a sequence of steps that is given an identifier and can be called to perform a sub-task.</b></div></article>   <p><em>过程是一组给定标识符的步骤，可以调用它们执行一个子任务</em></p><p><br></p><p><strong>函数 (Function)</strong>同样将许多步骤组合在一起，并给它们一个名称(标识符)。<br>但是这些步骤会生成并返回一个用于表达式的值。  </p><article class="message is-info"><div class="message-body"><b>Function: a sequence of steps that is given an identifier and returns a single value; function call is part of an expression.</b></div></article>   <p><strong>函数和过程的区别在于，函数可以返回值，而过程则不能。</strong><br>因为函数和过程是两种不同的代码块，它们的设计目的和用途不同。<br><strong>函数的设计目的是为了返回一个值，而过程的设计目的是为了执行一些操作。</strong>虽然说你可以将函数看作是一种特殊的过程，因为它们都是由一些语句组成的代码块。</p><p>因为函数返回一个值，所以函数定义同样声明了这个值的数据类型。<br>我们会在下一章详细介绍数据类型。</p><p><br></p><p><span class="tag is-warning">Example</span></p><p>上一个小结说过的画金字塔的例子，可以完全改成模块化的。  </p><p>首先根据之前的解决方法，先写一个主程序：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CALL SetValues</span><br><span class="line">REPEAT</span><br><span class="line">    CALL OutputSpaces</span><br><span class="line">    CALL OutputSymbols</span><br><span class="line">    CALL AdjustValuesForNextRow</span><br><span class="line">UNTIL NumberOfSymbols &gt; MaxNumberOfSymbols</span><br></pre></td></tr></table></figure><p>你会发现主程序里面充满了<code>CALL</code>。<code>CALL</code>说白了就是调用。举个例子，<code>CALL SetValues</code>就是要调用<code>SetValues</code>模块。  </p><p>然后我们填充每一个模块中的内容，就可以完美运行了：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">PROCEDURE SetValues</span><br><span class="line">    INPUT Symbol</span><br><span class="line">    INPUT MaxNumberOfSymbols</span><br><span class="line">    NumberOfSpaces ← (MaxNumberOfSymbols - 1) / 2</span><br><span class="line">    NumberOfSymbols ← 1</span><br><span class="line">ENDPROCEDURE</span><br><span class="line"></span><br><span class="line">PROCEDURE InputMaxNumberOfSymbols</span><br><span class="line">    REPEAT</span><br><span class="line">        INPUT MaxNumberOfSymbols</span><br><span class="line">    UNTIL MaxNumberOfSymbols MOD 2 = 1</span><br><span class="line">ENDPROCEDURE</span><br><span class="line"></span><br><span class="line">PROCEDURE OutputSpaces</span><br><span class="line">    FOR i ← 1 TO NumberOfSpaces</span><br><span class="line">        OUTPUT Space</span><br><span class="line">    NEXT i</span><br><span class="line">ENDPROCEDURE</span><br><span class="line"></span><br><span class="line">PROCEDURE OutputSymbols</span><br><span class="line">    FOR i ← 1 TO NumberOfSymbols</span><br><span class="line">        OUTPUT Symbol</span><br><span class="line">    NEXT i</span><br><span class="line">    OUTPUT Newline</span><br><span class="line">ENDPROCEDURE</span><br><span class="line"></span><br><span class="line">PROCEDURE AdjustValuesForNextRow</span><br><span class="line">    NumberOfSpaces ← NumberOfSpaces - 1</span><br><span class="line">    NumberOfSymbols ← NumberOfSymbols + 2</span><br><span class="line">ENDPROCEDURE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CALL SetValues</span><br><span class="line">REPEAT</span><br><span class="line">    CALL OutputSpaces</span><br><span class="line">    CALL OutputSymbols</span><br><span class="line">    CALL AdjustValuesForNextRow</span><br><span class="line">UNTIL NumberOfSymbols &gt; MaxNumberOfSymbols</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样也可以将某些模块从过程换为函数。过程基本是一样的所以不多赘述了。  </p><p><br></p><p>变量分<strong>全局变量 (Global variable)</strong>和<strong>局部变量 (Local variable)</strong>。</p><p>局部变量是在函数内部定义的变量，只在本函数范围内有效。<br>全局变量是在函数外部定义的变量，从定义变量的位置到本源文件结束都有效。  </p><p>在函数中，局部变量和全局变量的区别在于它们的作用域和生命周期。<br>局部变量只在函数内部有效，而全局变量则在整个程序中都有效。  </p><p>比如说：以下代码段中，<code>x</code>是一个局部变量，只在 <code>myFunction()</code> 函数内部有效。而 <code>y</code> 是一个全局变量，在整个程序中都有效。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> y = <span class="number">10</span>; <span class="comment">// 全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myFunction</span><span class="params">()</span> {</span><br><span class="line">  <span class="type">int</span> x = <span class="number">5</span>; <span class="comment">// 局部变量</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><article class="message is-info"><div class="message-body"><b>Local variable: a variable that is accessible only within the module in which is declared.</b><br><b>Global variable: a variable that is accessible from all modules.</b></div></article>   <p><br></p><hr><h1 id="第十三章：数据类型与结构"><a href="#第十三章：数据类型与结构" class="headerlink" title="第十三章：数据类型与结构"></a><strong>第十三章：数据类型与结构</strong></h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><strong>数据类型</strong></h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a><strong>基本数据类型</strong></h3><p>基本数据类型是那些可以通过编程语言内建的命令简单定义的变量。基本数据类型也称为原子数据类型。  </p><p>在计算机科学中，整数称为整数，带有小数点的数称为实数。<br>如果条件要么为真，要么为假，那么这些就是逻辑值，称为布尔值 (Boolean)。<br>有时，我们可能想存储一个字符，这就是所谓的<code>CHAR</code>。<br>如果值总是整数，则应该定义为<code>INTEGER</code>类型，例如在计算循环的迭代次数时。</p><p><br></p><h3 id="其他数据类型"><a href="#其他数据类型" class="headerlink" title="其他数据类型"></a><strong>其他数据类型</strong></h3><p>如下表：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">Data type</th><th style="text-align:left">Explanation</th></tr></thead><tbody><tr><td style="text-align:left"><code>INTEGER</code></td><td style="text-align:left">一个正负数字</td></tr><tr><td style="text-align:left"><code>REAL</code></td><td style="text-align:left">一个正负数字，但是这个数字有小数位</td></tr><tr><td style="text-align:left"><code>CHAR</code></td><td style="text-align:left">一个字符</td></tr><tr><td style="text-align:left"><code>STRING</code></td><td style="text-align:left">字符串（一堆字符）</td></tr><tr><td style="text-align:left"><code>BOOLEAN</code></td><td style="text-align:left">逻辑表述：真或假 （<code>TRUE</code>or<code>FALSE</code>）</td></tr><tr><td style="text-align:left"><code>DATE</code></td><td style="text-align:left">由日、月和年组成的日期，有时包括小时、分钟和秒的时间</td></tr></tbody></table></div><p><br></p><hr><h2 id="记录类型"><a href="#记录类型" class="headerlink" title="记录类型"></a><strong>记录类型</strong></h2><p>有时不同数据类型的变量是一个逻辑组。<br>例如关于一个人的数据可以包含姓名、出生日期、身高、兄弟姐妹数量、是否是全日制学生，等等。<br>其中：姓名的数据类型是<code>STRING</code>，出生日期的数据类型是<code>DATE</code>，身高的数据类型是<code>REAL</code>，兄弟姐妹数量的数据类型是<code>INTEGER</code>，是否是全日制学生<code>BOOLEAN</code>。  </p><p>我们可以声明一个包含复杂属性的一个变量。record type是一种用户定义的类型(user-defined type)，因为程序员可以决定将哪些变量(字段)记录下来。</p><p><strong>记录类型(Record type)也称为复合类型(Composite type)。</strong>  </p><p>可以在伪代码中以这样的形式创建一个记录类型：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TYPE &lt;TypeIdentifier&gt;</span><br><span class="line">    DECLARE &lt;field identifier&gt; : &lt;data type&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">ENDTYPE</span><br></pre></td></tr></table></figure><p>其中：<code>&lt;TypeIdentifier&gt;</code>是这个记录类型的名称，<code>&lt;field identifier&gt;</code>是其中的一个参数，而<code>&lt;data type&gt;</code>就是声明这个参数的数据类型。  </p><p>我们现在狠狠的声明了一个数据类型。如果我们想要为一个变量赋予这样的数据类型的话，我们需要先声明：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE &lt;variable identifier&gt; : &lt;TypeIdentifier&gt;</span><br></pre></td></tr></table></figure><p>想要去调用某个参数，我们就可以使用这样的语法：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;TypeIdentifier&gt;.&lt;field identifier&gt;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><p>十分的容易，十分的简单。  </p><p>按照上面的“关于一个人的数据”，我们可以将定义这个记录类型的过程写成伪代码：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TYPE PersonType</span><br><span class="line">    Name : STRING</span><br><span class="line">    DateOfBirth : DATE</span><br><span class="line">    Height : REAL</span><br><span class="line">    NumberOfSiblings : INTEGER</span><br><span class="line">    IsFullTimeStudent : BOOLEAN</span><br><span class="line">ENDTYPE</span><br></pre></td></tr></table></figure><p>假如说我们要赋予<code>Person</code>这个变量这样的数据类型，我们就先来一步声明：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE Person : PersonType</span><br></pre></td></tr></table></figure><p>然后我们就可以对其中的一些参数执行一些操作了。比如说：  </p><p>赋值：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person.Name ← "Fred"</span><br><span class="line">Person.NumberOfSiblings ← 3</span><br><span class="line">Person.IsFullTimeStudent ← TRUE</span><br></pre></td></tr></table></figure><p>想要输出其中的一个参数，直接运行下面的命令：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OUTPUT Person.Name</span><br></pre></td></tr></table></figure><p><br></p><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h2><p>接下来唠唠数组。  </p><p>有时我们需要将数据值组织成一个列表或表格，亦或者是矩阵。<br>在大多数编程语言中，这些结构称为数组。<br>数组是一组有序的数据项，通常里面所有元素的数据类型相同，并使用一个标识符组合在一起。<br>使用数组维度的<strong>数组索引 (Array index)</strong>来对各个数组元素进行寻址操作。  </p><p>你可以这么理解：一个列表是一个一维数组，而一个表格或者是矩阵是一个二维数组。  </p><p>在编写伪代码时，数组需要在使用之前声明。<br>这意味着要选择一个<em>标识符</em>、要存储在数组中的值的<em>数据类型</em>以及每个维度的<strong>上界 (Upper bound)</strong>和<strong>下界 (Lower bound)</strong>。  </p><article class="message is-info"><div class="message-body"><b>Array index: row or column number of an individual array element.</b><br><b>Upper bound: the highest number index of an array dimension</b><br><b>Lower bound: the smallest number index of an array dimension.</b></div></article>   <p><br></p><hr><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a><strong>一维数组</strong></h2><p>当我们在纸上写下一个列表的时候，我们一般会不自觉地给每一个元素编号。第一个元素的编号通常是1。所以我们可以像看待标号列表一样看待数组。  </p><p>很多的编程语言，像Java，Python，或者是VB.NET，都将第一个元素编号设为0.这同样是这个数组的下界。上界就是这个数列里面最大编号。  </p><p>在伪代码中，可以使用下面的方式来声明一个一维数组：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE &lt;arrayIdentifier&gt; : ARRAY[&lt;lowerBound&gt;:&lt;upperBound&gt;] OF &lt;dataType&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;arrayIdentifier&gt;</code>是这个数组的标识符，<code>&lt;lowerBound&gt;</code>和<code>&lt;upperBound&gt;</code>是这个数组的上下界，然后<code>&lt;dataType&gt;</code>是这个数组内元素的数据类型。  </p><p><br></p><p>举例子：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DECLARE List1 : ARRAY[1:3] OF STRING</span><br><span class="line">DECLARE List2 : ARRAY[0:5] OF INTEGER</span><br><span class="line">DECLARE List3 : ARRAY[1:100] OF INTEGER</span><br><span class="line">DECLARE List4 : ARRAY[0:25] OF CHAR</span><br></pre></td></tr></table></figure><p>这几个数组的特性依次如下：  </p><ul><li>数组<code>List1</code>的上下界是1和3，内容的数据类型为<code>STRING</code>,这个数组内一共有3个元素。  </li><li>数组<code>List2</code>的上下界是0和5，内容的数据类型为<code>INTEGER</code>,这个数组内一共有6个元素。  </li><li>数组<code>List3</code>的上下界是1和100，内容的数据类型为<code>INTEGER</code>,这个数组内一共有100个元素。  </li><li>数组<code>List4</code>的上下界是0和25，内容的数据类型为<code>CHAR</code>,这个数组内一共有26个元素。  </li></ul><p><br></p><hr><h3 id="访问一维数组"><a href="#访问一维数组" class="headerlink" title="访问一维数组"></a><strong>访问一维数组</strong></h3><p>可以通过索引值访问数组中的特定元素。在伪代码中，我们可以这样写:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;arrayIdentifier&gt;[x]</span><br></pre></td></tr></table></figure><p><code>&lt;arrayIdentifier&gt;</code>是数组的标识符，而<code>[x]</code>是索引值，用于索引对应的元素。  </p><p><br></p><p>比如说有一个数组<code>MyList</code>,那么它的第n个元素就是<code>MyList[n]</code>。  </p><p>你可以用它来执行各种操作。比如说赋值：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NList[25] ← 0</span><br><span class="line">AList[3] ← 'D'</span><br></pre></td></tr></table></figure><p>一个是将<code>NList</code>中的第25个元素赋值为<code>0</code>，一个是将<code>AList</code>中第3个元素赋值为字符<code>D</code>。  </p><p><br></p><p><span class="tag is-warning">Example</span></p><p>上例题：你会输入一个值，然后你需要在包含7个数字的ID数组中查找这个数字。  </p><p>从数组的第一个元素开始，依次检查每个元素，直到找到搜索值或到达数组的末尾。这种方法称为<strong>线性搜索 (Linear search)</strong>。  </p><article class="message is-info"><div class="message-body"><b>Linear search: checking each element of an array in turn for a required value.</b></div></article>   <p>先上标识符表：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">Identifier</th><th style="text-align:left">Data type</th><th style="text-align:left">Explanation</th></tr></thead><tbody><tr><td style="text-align:left"><code>MyList</code></td><td style="text-align:left"><code>ARRAY[0:6] OF INTEGER</code></td><td style="text-align:left">Data structure (1D array) to store seven numbers.</td></tr><tr><td style="text-align:left"><code>MaxIndex</code></td><td style="text-align:left"><code>INTEGER</code></td><td style="text-align:left">The number of elements in the array.</td></tr><tr><td style="text-align:left"><code>SearchValue</code></td><td style="text-align:left"><code>INTEGER</code></td><td style="text-align:left">The value to be searched for.</td></tr><tr><td style="text-align:left"><code>Found</code></td><td style="text-align:left"><code>BOOLEAN</code></td><td style="text-align:left"><code>TRUE</code>if the value has been found. <br> <code>FALSE</code> if the value has not been found.</td></tr><tr><td style="text-align:left"><code>Index</code></td><td style="text-align:left"><code>INTEGER</code></td><td style="text-align:left">Index of the array element currently being processed.</td></tr></tbody></table></div><p>然后就是伪代码：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MaxIndex ← 6</span><br><span class="line">INPUT SearchValue</span><br><span class="line">Found ← FALSE</span><br><span class="line">Index ← -1</span><br><span class="line">REPEAT</span><br><span class="line">    Index ← Index + 1</span><br><span class="line">    IF MyList[Index] = SearchValue</span><br><span class="line">      THEN</span><br><span class="line">        Found ← TRUE</span><br><span class="line">    ENDIF</span><br><span class="line">UNTIL Found = TRUE OR Index &gt;= MaxIndex</span><br><span class="line">IF Found = TRUE</span><br><span class="line">  THEN</span><br><span class="line">    OUTPUT "Value found at location: " Index</span><br><span class="line">  ELSE</span><br><span class="line">    OUTPUT "Value not found"</span><br><span class="line">ENDIF</span><br></pre></td></tr></table></figure><p>挺好理解的一个程序。通过每轮循环Index + 1来实现数组的遍历。</p><p><br></p><hr><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a><strong>二维数组</strong></h2><p>当我们在纸上写下一个矩阵，并希望使用索引来指出我需要引用的元素的时候，按惯例来讲是<em>先提供行号，再提供列号</em>。  </p><p>所以说在我们声明二位数组的时候，我们需要先给出行数，再给出列数。同样，我们还需要提供每一个维度的上下界。  </p><p>在伪代码中，定义一个二维数组都是这样写的：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE &lt;identifier&gt; : ARRAY[&lt;1Bound1&gt;:&lt;uBound1&gt;,&lt;1Bound2&gt;:&lt;uBound2&gt;] OF &lt;datatype&gt;</span><br></pre></td></tr></table></figure><p>其中<code>&lt;identifier&gt;</code>是二维数组的标识符，<code>&lt;1Bound1&gt;</code>和<code>&lt;uBound1&gt;</code>是第一维的上下界，<code>&lt;1Bound2&gt;</code>和<code>&lt;uBound2&gt;</code>是第二维的上下界。<code>&lt;datatype&gt;</code>是我们需要向元素定义的数据类型。  </p><p>在一个二维数列中，一个元素可以从0开始标记。但是有些时候还是使用从标签1开始的行列标记更直观一点。  </p><p>比如说我们想要声明一个二维数列，用来表示一个棋盘。这个棋盘有6行7列。<br>这样写伪代码是没有问题的：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Board : ARRAY[1:6,1:7] OF INTEGER</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="访问二维数列"><a href="#访问二维数列" class="headerlink" title="访问二维数列"></a><strong>访问二维数列</strong></h3><p>想要访问二维数列中的元素，我们需要使用一对儿索引来访问二维数列中的一个元素。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;arrayIdentifier&gt;[x,y]</span><br></pre></td></tr></table></figure><p>其中<code>&lt;arrayIdentifier&gt;</code>是需要读取的数列的标识符，<code>[x,y]</code>是这一对索引。这一对索引就可以像坐标一样定位其中的一个确切元素。  </p><p>比如说下面的伪代码：    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Board[3,4] ← 0</span><br></pre></td></tr></table></figure><p>这一步可以将第三行第四列的元素设为0。  </p><p><br></p><p>当我们想要读取一个一维数列中的全部元素，就需要使用循环来遍历出每一个元素的内容。<br>而在二维数列，我们需要使用一个循环语句来遍历每一行，然后在遍历每一行的同时遍历每一列，以读取出所有的数据。<br>这里是用了一个循环嵌套，aka (nested loops)，我们在之前有提到。  </p><p>这样的话用结构化英语写出来就是：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">For each row</span><br><span class="line">  For each column</span><br><span class="line">    Assign the initial value to the element at the current position</span><br></pre></td></tr></table></figure><p><br></p><hr><h2 id="文本文档"><a href="#文本文档" class="headerlink" title="文本文档"></a><strong>文本文档</strong></h2><p>当我们需要需要永久存储数据时，使用文本文件是其中的一种方法。  </p><p>例如，程序执行时保存在数组中的任何数据都将在程序停止时丢失。你可以将数据保存到文件中，并在后续执行时需要读取。  </p><p><br></p><hr><h3 id="向文本文档中写入"><a href="#向文本文档中写入" class="headerlink" title="向文本文档中写入"></a><strong>向文本文档中写入</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OPENFILE &lt;filename&gt; FOR WRITE           // open the file for writing</span><br><span class="line">WRITEFILE &lt;filename&gt;, &lt;stringValue&gt;     // write a line of text to the file</span><br><span class="line">CLOSEFILE &lt;filename&gt;                    // close file</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="从文本文档中读取"><a href="#从文本文档中读取" class="headerlink" title="从文本文档中读取"></a><strong>从文本文档中读取</strong></h3><p>现有的文件可以由程序读取。<br>下面伪代码语句提供了从文件读取数据的功能:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OPENFILE &lt;filename&gt; FOR READ              // open the file for writing</span><br><span class="line">READFILE &lt;filename&gt;, &lt;stringVariable&gt;     // write a line of text to the file</span><br><span class="line">CLOSEFILE &lt;filename&gt;                      // close file</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="向文本文档中追加内容"><a href="#向文本文档中追加内容" class="headerlink" title="向文本文档中追加内容"></a><strong>向文本文档中追加内容</strong></h3><p>有时，我们可能希望向现有文件添加数据，而不是创建新文件，这可以在追加模式下完成：它将新数据添加到现有文件的末尾。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OPENFILE &lt;filename&gt; FOR APPEND          # open file for append</span><br><span class="line">WRITEFILE &lt;filename&gt;, &lt;stringValue&gt;     # write a line of text to the file</span><br><span class="line">CLOSEFILE &lt;filename&gt;                    # close file</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="文件终止符-EOF"><a href="#文件终止符-EOF" class="headerlink" title="文件终止符 (EOF)"></a><strong>文件终止符 (EOF)</strong></h3><p>The <strong>End-of-file marker (EOF)</strong>.  </p><p>如果想从头到尾读取文件，可以使用条件循环。<br>每一个文本文件的末尾有一个特殊的标记，我们可以对它进行测试。<br>测试这个特殊的文件结束标记是许多编程语言的标准函数。每次调用这个函数时，它都会测试这个标记，如果还没有到达文件末尾，则返回FALSE，如果到达文件末尾标记，则返回TRUE。  </p><p>在伪代码中，我们将这个函数称为<code>EOF()</code>。我们可以使用结构<code>REPEAT.. until EOF()</code>。<br>如果文件可能不包含任何数据，最好使用<code>WHILE NOT EOF()</code>。</p><p><br></p><hr><h2 id="抽象数据类型-ADT"><a href="#抽象数据类型-ADT" class="headerlink" title="抽象数据类型 (ADT)"></a><strong>抽象数据类型 (ADT)</strong></h2><p><strong>抽象数据类型 (Abstract data type, ADT)</strong>是一组数据和一组相关操作的集合。  </p><p>说的简单点，抽象数据类型就是与对该数据类型有意义的操作封装在一起的数据类型。</p><p>抽象数据类型与下方的几个条件息息相关：  </p><ul><li>创建该数据结构的一个新实例</li><li>在数据结构中查找一个元素</li><li>向数据结构中插入一个新成员</li><li>从数据结构中删除一个元素</li><li>以系统的方式访问存储在数据结构中的所有元素。</li></ul><article class="message is-info"><div class="message-body"><b>Abstract Data Type: a collection of data with associated operations.</b></div></article>   <p>本章的其余部分介绍下列抽象数据类型，分别是栈、队列和链表。  </p><p><br></p><hr><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a><strong>栈</strong></h2><p>想下现实世界中的栈有哪些特征?要堆东西，我们把东西堆在一起。可访问的元素是栈顶的元素。如果我们试图在堆栈中找到一个元素并将其取出，很可能会导致这一堆元素坍塌。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB4a6b4649bb9e28b3b7a2a8f8c8564042?method=download&amp;shareKey=c35ea6d3290bdc10432b8879cfd244cf" alt=""></p><p>上图显示了我们如何以如下顺序添加四个元素时表示堆栈:A、B、C、D。<br>注意，这些槽是从下往上编号的，因为这感觉更自然。</p><p><code>BaseOfStackPointer</code>始终指向栈中的第一个位置。<code>TopOfStackPointer</code>指向最后一个压入栈的元素。<br>当一个元素从栈中<strong>弹出(POP)</strong>时，<code>TopOfStackPointer</code>将递减，指向当前栈顶的元素。<br>当栈为空时，<code>TopOfStackPointer</code>的值为-1。</p><p>要使用一维数组来实现这个栈，可以这样写:  </p><p><code>DECLARE Stack:ARRAY[0:7] OF CHAR</code></p><p><br></p><hr><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a><strong>队列</strong></h2><p>现实世界中的<strong>队列 (Queue)</strong>有哪些特征?<br>当人们排队时，他们在最后加入队伍。人们从队伍的前面离开队伍。如果是一个有序的队列，就不会有人插队，人们也不会从其他位置离开。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB108883d40d0a36d463abd78e763eafcc?method=download&amp;shareKey=a9c1c3143ae5e63cc2102e170818c8a3" alt=""></p><p>上图展示了如何表示有5个元素以如下顺序加入队列:a、B、C、D、E。</p><p>要使用数组实现队列，我们可以假设队列的前端位于位置0。<br>当队列为空时，<code>EndOfQueuePointer</code>的值为-1。当有一个值加入队列时，<code>End0fQueuePointer</code>会先加1，然后再将该值添加到指针所指向的数组元素中。<br>当队列最前面的项离开时，我们需要将其他所有项向前移动一个位置，并调整<code>EndOfQueuePointer</code>。</p><p>这种方法涉及大量的数据移动。一个更有效的利用槽的方法是循环队列的概念。<br>指针表示队列的前端和尾部，最终，队列将“绕回”起始位置。<br>下图展示了一个11个元素加入队列、5个元素离开队列的循环队列：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB3c97a93cead64e3e89be9a838179c3c3?method=download&amp;shareKey=95f47734ed87b724b0882cc4142bda51" alt=""></p><p><br></p><hr><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a><strong>链表</strong></h2><p>在之前的章节中，我们使用数组作为线性列表。<br>在线性列表中，列表项存储在连续的位置上，但是这并不总是合适的。<br>另一种方法是将单个列表项存储在任何可用的位置，并使用指针将单个列表项链接到一个有序序列中。</p><p>列表中的元素称为<strong>节点 (Node)</strong>。节点可以由多个数据项和一个<strong>指针 (Pointer)</strong>组成，指针是一个变量，存储了它所指向的节点的地址。</p><p>存储第一个元素地址的变量称为<strong>起始指针(Start pointer)</strong>。</p><article class="message is-info"><div class="message-body"><b>Node: an element of a list.</b><br><b>Pointer: a variable that stores the address of the node it points to.</b> <br><b>Null pointer: a pointer that does not point at anything.</b><br><b>Start pointer: a variable that describes of the first element of a linked list.</b></div></article>   <p><br></p><p>在下面的图中，节点框中的数据值表示该节点的key字段。每个节点可能关联许多数据项。箭头表示指针。<br>它没有显示节点存储在哪个地址，因此图没有给出指针的值，只给出它在概念上链接到的位置。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBc25e0ac2424463782319b14df2bb40fb?method=download&amp;shareKey=d02e311f730a9faa88e8bf9a2952bc44" alt=""></p><p>下图展示了如何将一个新节点a插入到链表的开头，<code>StartPointer</code>的内容被复制到新节点的指针字段中，并且<code>StartPointer</code>被设置为指向新节点 A。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBfd1e70fa19ce75ccf0074832e4901760?method=download&amp;shareKey=0b9950ed8c2d00cd75eeda0569665486" alt=""></p><p>在下面的图中，一个新节点P被插入到列表的末尾。<br>节点L的指针字段指向新节点R，新节点P的指针字段包含null指针。</p><p>为了删除列表中的第一个节点，我们将待删除节点的指针字段复制到<code>StartPointer</code>中：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB6d4e4b9a71794344d93d2a113fc4b4bb?method=download&amp;shareKey=ec73abdc6242e8c1f3caddf4abcfdc43" alt=""></p><p>为了删除列表中的最后一个节点，我们需要将前一个节点的指针字段设置为null指针：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBf4cc0882079be871612588b48ac98c07?method=download&amp;shareKey=4d9ff05bc0a0c77724b20e93b9e5237c" alt="">  </p><p><br></p><p>有时，节点按关键字段值的顺序链接在一起，以生成一个有序链表。这意味着可能需要在两个现有节点之间插入或删除一个新节点。</p><p>如下图所示：为了在现有节点B和D之间插入一个新节点C，我们将节点B的指针字段复制到新节点C的指针字段中。我们将节点B的指针字段改为指向新节点C：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB4e3024d5bb52e5141e011e9ad8ed05cc?method=download&amp;shareKey=b5ee34331a4326bf376bee4e388281ba" alt=""></p><p>要删除列表中的节点D，我们将待删除节点D的指针字段复制到节点B的指针字段中：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB1c01e9bf65640b4f91b30eaa79284b1a?method=download&amp;shareKey=f0d86fc56ae1da7eecc237bff0b48d1a" alt=""></p><p><br></p><p>请记住，在实际应用程序中，数据可能不止包含一个关键字段和一个数据项。这就是链表优于线性表的原因。<br>当链表元素需要重新排序时，只需要改变链表中的指针。在线性列表中，需要移动所有的数据项。<br>使用链表可以节省时间，但是指针字段需要更多的存储空间。  </p><p><br></p><p>要使用数组来实现链表，可以使用一维数组来存储数据，使用一维数组来存储指针。<br>读取相同索引处的数组值时，一行代表一个节点：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBd884dea7e65e66dcb10dd2ac9d012135?method=download&amp;shareKey=1e1f130f679c40e9c3fe0086faf262dc" alt=""></p><p>下图展示了如何将一个新节点添加到使用数组实现的链表的开头。<br>请注意，值”A”被添加到索引3处，但起始指针被调整为列表的新第一个元素。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB1071d5dddafc0dc1342176a070a4c19c?method=download&amp;shareKey=10b6a780f990cf4fcfd99b70a115a5cb" alt=""></p><p>下图展示了如何将一个新节点添加到使用数组实现的链表的末尾。<br>注意，“P”值是在索引3处添加的。原来包含null指针(索引为0)的结点现在调整为指向新的一个node。  </p><p><br></p><p>删除节点时，只需要调整指针。<br>因为旧数据可以保留在数组中，但由于没有指针指向它，因此不再可以访问它。</p><p>下图展示了如何调整起始指针，以有效地删除链表的第一个元素。<br>请注意，开始指针现在包含了被删除结点的指针值。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB8443d8877e3af41fcc92c401bdc732ba?method=download&amp;shareKey=836e08461f4163fc2760c2637b2bf3c3" alt="">  </p><p>下图给出了链表倒数第二个结点的指针值如何变为null指针的过程：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB5a38c06c3d8d69e9c87cc52cdc026613?method=download&amp;shareKey=9d4e228eee2c4cb87307b0d9a00f4017" alt=""></p><p><br></p><p>在向列表中添加需要插入的节点时，该数据会被添加到data数组的任何空闲元素中。<br>新节点的指针被设置为指向插入点之后的节点的索引。<br>注意，这是插入点之前节点的指针的值，插入点之前的节点的指针设置为指向新节点。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBbbf733201dec9b89f2b12008477910a7?method=download&amp;shareKey=4686a60fb1cbf13235ffc6a180fb045c" alt=""></p><p>同样，在删除节点时，只需要调整指针即可。<br>下图说明了如何将待删除结点的指针复制到前一个结点的指针。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB7e5b0a7682dfdf4b10ac8528e493430e?method=download&amp;shareKey=e2b810da295c8e52fb081de997bf3d15" alt="">  </p><p><br></p><p>未使用的节点需要被轻易定位到。一种合适的技术是将未使用的结点连接起来，形成另一个链表:未使用链表。  </p><p>下图展示了我们的链表及其空闲列表：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBb21fbca29bb802ddaea196ca1ed93a1b?method=download&amp;shareKey=10f22ad3957610ebfb2b93845c640c1c" alt=""></p><p>当节点数组第一次初始化为链表时，链表是空的，所以开始的指针是空指针。<br>所有节点都需要连接起来，形成未使用内存块的链表。<br>下图展示了向链表插入数据之前链表实现的一个例子：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB8b78f5645eb082bf509bb5287b85e155?method=download&amp;shareKey=0f07779b4a2400a6c3169bdfe4706df9" alt=""></p><p><br></p><p>假设“L”、“B”和“D”被添加到链表中，并按字母顺序保存。</p><p>下图展示了这些值是如何存储在Data数组中的，以及链表和未使用链表的指针是如何发生调整的：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB8f6b1c4bbe92190c1ee813fb3311f0ef?method=download&amp;shareKey=d994768cf323feb3c44fc7d8042ed191" alt="">  </p><p>如果要删除包含”B”的结点，则需要将该结点的数组元素重新链接到未使用链表中。<br>下图展示了如何将该节点添加到未使用内存链表的前端：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB2badc75189a212215c4e7b345dabd354?method=download&amp;shareKey=afe63985272662d7e6d47a882f322e31" alt=""></p><p><br></p><p>在之前的小节中，我们介绍了用户定义的记录类型。<br>我们将相关的数据项分组为记录数据结构。<br>要使用记录变量，我们首先定义一个记录类型。然后我们声明该记录类型的变量。</p><p>我们可以将这个链表存储在一个记录数组中。<br>一条记录代表一个节点，由数据和指针组成：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBfb16961432a706bc5f8b668fb7e9185e?method=download&amp;shareKey=fd9701f15a3b83e7f1430c925c8a1e4d" alt=""></p><p><br></p><hr><h1 id="第十四章：编程与数据的表示"><a href="#第十四章：编程与数据的表示" class="headerlink" title="第十四章：编程与数据的表示"></a><strong>第十四章：编程与数据的表示</strong></h1><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a><strong>编程语言</strong></h2><p>在前两章节中我们学习了如何使用流程图或者伪代码来描述一个程序。我们现在介绍几个比较出名且普遍运用的编程语言：  </p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a><strong>Python</strong></h3><p>Python是一种多范式编程语言，这意味着Python完全支持面向对象的编程和结构化编程。  </p><p>Python有如下特性：  </p><ul><li>每个语句必须在单独的一行上。</li><li>缩进十分的重要。这就是所谓的 <strong>“缩进规则” (Off-side rule)</strong>。</li><li>关键字用小写字母书写。</li><li>Python区分大小写，比如说标识符<strong>Number1</strong>与<strong>Number1</strong>或<strong>Number1</strong>不同。</li><li>Python中的一切都是对象，所以Python是面向对象的编程语言。</li><li>代码大量使用了名为“切片”的概念。</li><li>Python程序是解释型程序。</li></ul><p>你可以在Python Shell中输入一条语句，Python解释器会立即运行它。   </p><p>你还可以在Python编辑器(如IDLE)中输入程序代码，用扩展名<code>.py</code>保存它，然后在编辑器窗口的运行菜单中运行程序代码。  </p><p><br></p><hr><h3 id="Visual-Basic-Console-Mode-VB-NET"><a href="#Visual-Basic-Console-Mode-VB-NET" class="headerlink" title="Visual Basic Console Mode (VB.NET)"></a><strong>Visual Basic Console Mode (VB.NET)</strong></h3><p>VB.NET是在.NET框架上实现的一种多范式的高级程序设计语言。<br>微软推出了VB.NET作为其最初的Visual Basic语言的继承者。<br>微软的集成开发环境(IDE)，用于用VB进行开发，其中的NET就是Visual Studio。  </p><p>隶属微软的Visual Studio Express和Visual Studio Community都是免费软件。<br>课本里面的所有Visual Basic程序都是使用Microsoft Visual Basic 2010 Express Console应用程序编写的。  </p><p>有关于VB.NET，这里有一些事实：  </p><ul><li>每个语句都应该在单独的一行中。可以在同一行中键入语句，以冒号<code>:</code>作为分隔符。但是，我们不推荐这样做。</li><li>缩进是好文明（</li><li>VB.NET中不区分大小写。现代的VB.NET编辑器将自动从标识符的第一个定义中复制案例。</li><li>我们一般对标识符和关键字使用CamelCaps表示方法(也称为PascalCaps)。</li><li>程序需要编译才能运行。</li></ul><p><strong>CamelCaps代表首字母大写的命名法则。</strong></p><p>当我们在IDE中输入程序代码，保存代码之后单击Run按钮。这将启动编译器。<br>如果没有语法错误，编译后的程序就会运行。输出将显示在一个单独的控制台窗口中。  </p><p>注意，当程序完成执行时，控制台窗口会自动关闭。<br>所以为了让控制台窗口一直打开以便能看到输出，程序的最后一条语句应该加上这一行：  </p><p><code>Console.ReadLine()</code>  </p><p><br></p><hr><h3 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a><strong>Java</strong></h3><p>Java最初由James Gosling在Sun Microsystems(现为Oracle所有)开发，于1995年发布。  </p><p><strong>Java运行环境(Java Runtime Environment, JRE)</strong>的目标是面向用户，而<strong>Java开发包(Java Development Kit, JDK)</strong>面向软件开发人员，其中包含<strong>Java编译器 (Java Compiler)</strong>和调试器等开发工具。  </p><p>Java的设计与运行平台无关。也就是说Java编译后的代码可以在所有的操作系统上运行。  </p><p>有关Java的一些事实：  </p><ul><li>每个语句都以分号<code>;</code>结尾。一行可以包含多条语句，但我们不推荐这样做。</li><li>缩进是一种很好的做法。</li><li>Java区分大小写。</li><li>按照惯例，标识符使用CamelCaps格式大写，关键字使用小写，<strong>类 (class)</strong>的标识符使用大写。</li><li>复合语句由括在花括号<code>{</code>中的语句序列组成。</li><li>只要Java语法需要使用语句，就可以使用复合语句。</li><li>程序需要编译成字节码，然后使用<strong>Java虚拟机 (Java Virtual Machine)</strong>运行。  </li></ul><p>Java几乎被设计为一种完全面向对象的语言。<br>Java中所有代码都是在<strong>类 (Class)</strong>中编写的。<br>只有简单数据类型(如integer、real)不是对象。字符串也是对象。</p><p>源文件必须以其包含的public类命名，并添加java后缀，例如<code>Exl.java</code>。<br>它首先必须使用Java编译器编译成字节码，生成一个名为Exl.class的文件。只有这样它才能被执行。</p><p>方法名<code>main</code>在Java语言中不是关键字。它只是Java启动器为将控制权传递给程序而调用的方法的名称。  </p><p>和VB.NET一样：如果没有语法错误，编译后的程序就会运行。输出将显示在输出窗口中。  </p><p><br></p><hr><h2 id="编程基础"><a href="#编程基础" class="headerlink" title="编程基础"></a><strong>编程基础</strong></h2><p>(你可能发现这一小结的目录充满了冗余。不过我也没啥办法因为这个Hexo主题没法支持四级标题lol)</p><h3 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a><strong>变量的声明</strong></h3><p>大多数编程语言都要求你声明要存储在变量中的数据的类型，以便编译器能够分配正确数量的内存空间。  </p><p>声明变量的时候，数据类型决定了它能存储的内容。<br>声明为存储整数(integer)的变量就不能用于存储字母数字字符(字符串)，反之亦然。<br>VB.NET和Java要求在使用变量之前声明变量。  </p><p>在伪代码中，声明变量可以以下面的方法完成：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE &lt;identifier&gt; : &lt;datatype&gt;</span><br></pre></td></tr></table></figure><p>下面的代码：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DECLARE Number1 : INTEGER</span><br><span class="line">DECLARE YourName : STRING</span><br><span class="line">DECLARE N1, N2, N3 : INTEGER</span><br><span class="line">DECLARE Name1, Name2 : STRING</span><br></pre></td></tr></table></figure><p>分别为：  </p><p>定义<code>Number1</code>用于存储数字。<br>定义<code>YourName</code>用于存储字符串。<br>定义3个整数变量。<br>定义两个字符串变量。  </p><p><br></p><hr><h3 id="语法定义和例子"><a href="#语法定义和例子" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>下表展示了语法定义：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">语言</th><th style="text-align:left">~</th></tr></thead><tbody><tr><td style="text-align:left">Python</td><td style="text-align:left">Python没有变量声明。</td></tr><tr><td style="text-align:left">VB.NET</td><td style="text-align:left"><code>Dim &lt;identifier&gt;[,&lt;identifier&gt;]As &lt;datatype&gt;</code> <br> 每一行声明必须以<code>Dim</code>开头。</td></tr><tr><td style="text-align:left">Java</td><td style="text-align:left"><code>&lt;datatype&gt; &lt;identifier&gt;[, &lt;identifier&gt;]</code></td></tr></tbody></table></div><p><br></p><p><br></p><p>举出一些例子：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Number1 of type Integer</span></span><br><span class="line"><span class="comment"># YourName of type String</span></span><br><span class="line"><span class="comment"># N1, N2, N3 of type Integer;</span></span><br><span class="line"><span class="comment"># Name1, Name2 of type String;</span></span><br></pre></td></tr></table></figure><p>这里面都是注释。虽然Python没有变量声明，但我们还是应该在模块开头添加注释。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> Number <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line"><span class="keyword">Dim</span> YourName <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line"><span class="keyword">Dim</span> N1, N2, N3 <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line"><span class="keyword">Dim</span> Name1, Name2 <span class="keyword">As</span> <span class="type">String</span></span><br></pre></td></tr></table></figure><p>可以将多个相同类型的变量放在同一行中。</p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> number1;</span><br><span class="line">String yourName;</span><br><span class="line"><span class="type">int</span> n1, n2, n3;</span><br><span class="line">String name1, name2;</span><br></pre></td></tr></table></figure><p>同样，你可以将多个相同类型的变量放在同一行中。  </p><p><br></p><hr><h3 id="常量的声明和赋值"><a href="#常量的声明和赋值" class="headerlink" title="常量的声明和赋值"></a><strong>常量的声明和赋值</strong></h3><p>有时，我们在程序中使用一个永远不变的值，例如数学常数pi的值。<br>为常量指定一个名称，并在程序开始时声明它，这是一种好习惯，有助于提高可读性，而不是在程序语句中直接使用一个实际的值。  </p><p>在为代码中，我们将这样的常量赋值写为：  </p><p><code>CONSTANT &lt;identifier&gt; = &lt;value&gt;</code></p><p>比如：  </p><p><code>CONSTANT Pi = 3.14</code></p><p>。</p><p><br></p><hr><h3 id="语法定义和例子-1"><a href="#语法定义和例子-1" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>下表展示了语法定义：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">语言</th><th style="text-align:left">~</th></tr></thead><tbody><tr><td style="text-align:left">Python</td><td style="text-align:left"><code>&lt;identifier&gt; = &lt;value&gt;</code></td></tr><tr><td style="text-align:left">VB.NET</td><td style="text-align:left"><code>Const &lt;identifier&gt; = &lt;value&gt;</code> <br> 每一行声明都必须以关键字<code>Const</code>开头。</td></tr><tr><td style="text-align:left">Java</td><td style="text-align:left"><code>static final &lt;datatype&gt; &lt;identifier&gt; = &lt;value&gt;</code> <br> 每一行常量定义都必须以<code>static final</code>开头。</td></tr></tbody></table></div><p><br></p><p><br></p><p>举出一些例子：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PI = <span class="number">3.14</span></span><br></pre></td></tr></table></figure><p>在Python中，我们约定俗成的规定是只使用大写来写常量标识符。常量的值是可以改变的，但我们最好是要把它们当作不能改变的值。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Const</span> Pi = <span class="number">3.14</span></span><br></pre></td></tr></table></figure><p>在VB.NET中，常量的值不能够再被修改了。  </p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span></span><br></pre></td></tr></table></figure><p>同样，在Java中，常量的值不能够再被修改了。    </p><p><br></p><hr><h3 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a><strong>变量的赋值</strong></h3><p>一旦声明了变量，就可以给它赋值。  </p><p>伪代码可以这样写：  </p><p><code>&lt;identifier&gt; ← &lt;expression&gt;</code></p><p>比如：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A ← 34</span><br><span class="line">B ← B + 1</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="语法定义和例子-2"><a href="#语法定义和例子-2" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>下表展示了语法定义：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">语言</th><th style="text-align:left">~</th></tr></thead><tbody><tr><td style="text-align:left">Python</td><td style="text-align:left"><code>&lt;identifier&gt; = &lt;expression&gt;</code></td></tr><tr><td style="text-align:left">VB.NET</td><td style="text-align:left"><code>&lt;identifier&gt; = &lt;expression&gt;</code></td></tr><tr><td style="text-align:left">Java</td><td style="text-align:left"><code>&lt;identifier&gt; = &lt;expression&gt;;</code></td></tr></tbody></table></div><p>不难看出：三家的赋值语法都基本一致，不过Java的赋值语句最后还要多一个分号<code>;</code>。  </p><p><br></p><p><br></p><p>举出一些例子：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="number">34</span></span><br><span class="line">B = B + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>赋值符是<code>=</code>。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="number">34</span></span><br><span class="line">B = B + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>同样，赋值符是<code>=</code>。  </p><p>但是VB.NET允许你在声明数据的同时初始化变量。比如：  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> Number1 <span class="keyword">As</span> <span class="type">Integer</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="number">34</span>;</span><br><span class="line">B = B + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>同样，赋值符是<code>=</code>。<br>Java也允许在声明语句中初始化变量，例如:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><br></p><p>VB.NET和Python都允许你将递增语句例如<code>B = B + 1</code>写成 <code>B += 1</code></p><p>Java则需要将递增语句例如<code>b = b + 1</code>写成<code>b++;</code></p><p><br></p><hr><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a><strong>算数运算符</strong></h3><p>赋值不只是给变量赋初始值。需要存储计算结果时，也可以使用赋值操作。<br>用于计算的算术运算符如下表所示：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">运算</th><th style="text-align:left">伪代码</th><th style="text-align:left">Python</th><th style="text-align:left">VB.NET</th><th style="text-align:left">Java</th></tr></thead><tbody><tr><td style="text-align:left">加法</td><td style="text-align:left"><code>+</code></td><td style="text-align:left"><code>+</code></td><td style="text-align:left"><code>+</code></td><td style="text-align:left"><code>+</code></td></tr><tr><td style="text-align:left">减法</td><td style="text-align:left"><code>-</code></td><td style="text-align:left"><code>-</code></td><td style="text-align:left"><code>-</code></td><td style="text-align:left"><code>-</code></td></tr><tr><td style="text-align:left">乘法</td><td style="text-align:left"><code>*</code></td><td style="text-align:left"><code>*</code></td><td style="text-align:left"><code>*</code></td><td style="text-align:left"><code>*</code></td></tr><tr><td style="text-align:left">除法</td><td style="text-align:left"><code>/</code></td><td style="text-align:left"><code>/</code></td><td style="text-align:left"><code>/</code></td><td style="text-align:left"><code>/</code> <br> <strong>仅除以float或double类型时使用此运算符。</strong></td></tr><tr><td style="text-align:left">指数</td><td style="text-align:left"><code>^</code></td><td style="text-align:left"><code>**</code></td><td style="text-align:left"><code>^</code></td><td style="text-align:left">在Java里面没有专门用于指数运算的运算符。 <br> 唯一的方法是使用这行代码： <code>Math.pow(n,e)</code></td></tr><tr><td style="text-align:left">整数除法</td><td style="text-align:left"><code>DIV</code></td><td style="text-align:left"><code>//</code></td><td style="text-align:left"><code>\</code></td><td style="text-align:left"><code>/</code> <br> <strong>仅对integer数据类型作整数除法时使用。</strong></td></tr><tr><td style="text-align:left">取余</td><td style="text-align:left"><code>MOD</code></td><td style="text-align:left"><code>%</code></td><td style="text-align:left"><code>mod</code></td><td style="text-align:left"><code>%</code></td></tr></tbody></table></div><p><br></p><p>当表达式中出现多个操作符时，求值的顺序取决于数学的<strong>优先级规则 (Rules of precedence)</strong>:括号、幂、乘、除、加、减。</p><p><br></p><article class="message is-info"><div class="message-body"><b>Rules of precedence: define the order of the calculations to be performed.</b></div></article>   <p><br></p><hr><h3 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息"></a><strong>输出信息</strong></h3><p>在伪代码中这么写：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OUTPUT &lt;string&gt;</span><br><span class="line">OUTPUT &lt;identifier(s)&gt;</span><br></pre></td></tr></table></figure><p>当输出文本和数据到控制台屏幕时，我们可以在print列表中列出输出字符串和变量值的混合。</p><p><br></p><hr><h3 id="语法定义和例子-3"><a href="#语法定义和例子-3" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>下面展示了语法定义：  </p><p><strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(&lt;printlist&gt;)</span><br><span class="line"><span class="built_in">print</span>(&lt;printlist&gt;, end =<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>打印列表中不同的项使用逗号<code>,</code>分隔。<br>为避免移到输出后的下一行，使用<strong>end = ‘’</strong><br>双引号中的内容填充打印列表中两个元素之间的内容。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(&lt;printlist&gt;)</span><br><span class="line">Console.Write(&lt;printlist&gt;)</span><br></pre></td></tr></table></figure><p>打印列表中所有的项用<code>&amp;</code>隔开。<br><code>Console.Writeline</code>会在输出后移动到下一行，而<code>Console.Write</code>会在输出完毕后继续留在同一行。  </p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(&lt;printlist&gt;);</span><br><span class="line">System.out.printIn(printlist);</span><br></pre></td></tr></table></figure><p>打印列表中所有的项用<code>+</code>隔开。<br><code>System.out.print</code>会在输出后移动到下一行，而<code>Console.Write</code>会在输出完毕后继续留在同一行。  </p><p><br></p><p>在伪代码中想使用差不多的换行操作，就要在打印列表后面使用注释声明了。  </p><p><code>// newline</code>和<code>// no new line</code>就可以实现这样的操作。  </p><p><br></p><p>举出一些例子：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello"</span>, YourName, <span class="string">". Your number is "</span>, Number1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Hello "</span>, end= <span class="string">' '</span>)</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">"Hello "</span> &amp; YourName &amp; <span class="string">". Your number is "</span> &amp; Number1)</span><br><span class="line">Console.Write(<span class="string">"Hello"</span>)</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.printIn(<span class="string">"Hello "</span> + YourName + <span class="string">". Your number is "</span> + number1);</span><br><span class="line">System.out.print(<span class="string">"Hello"</span>);</span><br></pre></td></tr></table></figure><p><br></p><p>在上面的代码示例中，您可以看到当输出语句非常长时，它们可以分散在多行中。因此必须将两个打印列表项之间的行分隔开。<br>你不能在一个字符串的中间折断，除非你把它变成两个单独的字符串。  </p><p><br></p><p>在Python和VB.NET中，你也可以使用占位符来将输出排序。<br>在打印列表中，要打印的变量的顺序用<code>{}</code>中的序号表示，变量按正确的顺序从后面的变量列在字符串后面，中间用逗号分隔:  </p><p>    <strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello {0}. Your number is {1} "</span> .<span class="built_in">format</span>(YourName,Number1))</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>VB.NET</strong></p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">"Hello {0}. Your number is {1}"</span>, YourName, Number1)</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="从用户获取输入"><a href="#从用户获取输入" class="headerlink" title="从用户获取输入"></a><strong>从用户获取输入</strong></h3><p>在编写输入语句时，最好提示用户他们要输入什么。<br>例如下面的伪代码:  </p><p><code>INPUT "Enter a number: " A</code></p><p>就是可以起到这样的作用。  </p><p><br></p><hr><h3 id="语法定义和例子-4"><a href="#语法定义和例子-4" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>举出一些例子：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="built_in">input</span>(<span class="string">"Enter a number: "</span>)</span><br></pre></td></tr></table></figure><p>用户输入的内容会传输到变量A内。<br>输入的数据格式默认为字符串。因此如果想要转化成别的数据形式就需要特意多敲两个字转一下格式了。<br>双引号和单引号都可以用于输出提示信息。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Console.Write(<span class="string">"Enter a number: "</span>)</span><br><span class="line">A = Console.ReadLine()</span><br></pre></td></tr></table></figure><p>提示符必须单独作为输出语句提供。  </p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">console</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.print(<span class="string">"Enter a number: "</span>);</span><br><span class="line">a = console.next();</span><br></pre></td></tr></table></figure><p>必须先从Java库中导入Scanner类，并创建一个Scanner对象，然后才能使用它读取输入字符串。  </p><p>提示符必须单独作为输出语句提供。  </p><p><br></p><hr><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h3><p>写注释是个很好的文明（  </p><p><br></p><hr><h3 id="语法定义和例子-5"><a href="#语法定义和例子-5" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>举出一些例子：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># this is a comment</span></span><br><span class="line"><span class="comment"># this is a another comment</span></span><br></pre></td></tr></table></figure><p>注释使用<code>#</code>开头。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">' this is a comment</span></span><br><span class="line"><span class="comment">' this is a another comment</span></span><br></pre></td></tr></table></figure><p>注释使用<code>'</code>开头。  </p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this is a comment</span></span><br><span class="line"><span class="comment">//this is another comment</span></span><br><span class="line"><span class="comment">/* this is a multiline</span></span><br><span class="line"><span class="comment">  comment</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>注释使用<code>//</code>开头。</p><p>使用<code>/*</code>和<code>*/</code>来插入一个多行注释。  </p><p><br></p><hr><h2 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a><strong>数据类型</strong></h2><p>每种编程语言都有内置的数据类型，下表给出了其中的一个子集。<br>对于VB.NET和Java，分配给给定类型变量的内存字节数在括号中给出。  </p><div class="table-container"><table><thead><tr><th style="text-align:left">数据描述</th><th style="text-align:left">伪代码</th><th style="text-align:left">Python</th><th style="text-align:left">VB.NET</th><th style="text-align:left">Java</th></tr></thead><tbody><tr><td style="text-align:left">带符号的整数</td><td style="text-align:left"><code>INTEGER</code></td><td style="text-align:left"><code>int</code></td><td style="text-align:left"><code>Integer</code> (4个字节)</td><td style="text-align:left"><code>int</code> (4个字节)</td></tr><tr><td style="text-align:left">带符号的有小数点的数字</td><td style="text-align:left"><code>REAL</code></td><td style="text-align:left"><code>float</code></td><td style="text-align:left"><code>Single</code> (4个字节) <br> <code>Double</code> (8个字节)</td><td style="text-align:left"><code>float</code> (4个字节) <br> <code>double</code> (8个字节)</td></tr><tr><td style="text-align:left">一个字符</td><td style="text-align:left"><code>CHAR</code> (使用单引号来分隔字符)</td><td style="text-align:left">不支持</td><td style="text-align:left"><code>Char</code> (2字节的Unicode)</td><td style="text-align:left"><code>char</code> (2字节的Unicode)</td></tr><tr><td style="text-align:left">字符串</td><td style="text-align:left"><code>STRING</code> (使用双引号来分隔字符串)</td><td style="text-align:left"><code>str</code> (虽然以ASCII码存储，但是Unicode也同样支持。) <br> (使用单引号，双引号或者三个引号来分割字符串)</td><td style="text-align:left"><code>String</code> (每个字符使用2个字节存储，使用双引号来分割字符串)</td><td style="text-align:left"><code>String</code> (每个字符使用2个字节存储，使用双引号来分割字符串)</td></tr><tr><td style="text-align:left">逻辑表示符</td><td style="text-align:left"><code>BOOLEAN</code></td><td style="text-align:left"><code>boo1</code>，可以有：<code>True</code>,<code>False</code></td><td style="text-align:left"><code>Boolean</code> (2个字节)，可以有：<code>True</code>,<code>False</code></td><td style="text-align:left"><code>Boolean</code>，可以有：<code>true</code>,<code>false</code></td></tr></tbody></table></div><p><br></p><p>在Python中，单个字符表示为长度为1的字符串。  </p><p>在VB.NET中，字符串中的每个字符都需要两个字节的内存，并且每个字符在内存中表示为Unicode(在Unicode中，从1到127对应于ASCII)。  </p><p><br></p><p>Date具有各种内部表示形式，但均以传统格式输出:  </p><div class="table-container"><table><thead><tr><th style="text-align:left">数据描述</th><th style="text-align:left">伪代码</th><th style="text-align:left">Python</th><th style="text-align:left">VB.NET</th><th style="text-align:left">Java</th></tr></thead><tbody><tr><td style="text-align:left">Date value</td><td style="text-align:left"><code>DATE</code></td><td style="text-align:left">使用datetime类表示</td><td style="text-align:left"><code>Date</code> (8个字节)</td><td style="text-align:left">Date在Java中是一个类。需要使用Date请先敲入：<code>import java.util.Date;</code></td></tr></tbody></table></div><p><br></p><hr><h2 id="布尔表达式"><a href="#布尔表达式" class="headerlink" title="布尔表达式"></a><strong>布尔表达式</strong></h2><p>在之前的笔记中，我们介绍了逻辑语句。<br>这些语句包含一个条件。条件也称为布尔表达式，计算结果为<code>True</code>或<code>False</code>。其中，<code>True</code>和<code>False</code>都是布尔值。</p><p>简单的布尔表达式涉及比较操作符，而复杂的布尔表达式涉及布尔操作符。</p><div class="table-container"><table><thead><tr><th style="text-align:left">运算</th><th style="text-align:left">伪代码</th><th style="text-align:left">Python</th><th style="text-align:left">VB.NET</th><th style="text-align:left">Java</th></tr></thead><tbody><tr><td style="text-align:left">等于</td><td style="text-align:left"><code>=</code></td><td style="text-align:left"><code>==</code></td><td style="text-align:left"><code>=</code></td><td style="text-align:left"><code>==</code></td></tr><tr><td style="text-align:left">不等于</td><td style="text-align:left"><code>&lt;&gt;</code></td><td style="text-align:left"><code>!=</code></td><td style="text-align:left"><code>&lt;&gt;</code></td><td style="text-align:left"><code>!=</code></td></tr><tr><td style="text-align:left">大于</td><td style="text-align:left"><code>&gt;</code></td><td style="text-align:left"><code>&gt;</code></td><td style="text-align:left"><code>&gt;</code></td><td style="text-align:left"><code>&gt;</code></td></tr><tr><td style="text-align:left">小于</td><td style="text-align:left"><code>&lt;</code></td><td style="text-align:left"><code>&lt;</code></td><td style="text-align:left"><code>&lt;</code></td><td style="text-align:left"><code>&lt;</code></td></tr><tr><td style="text-align:left">大于等于</td><td style="text-align:left"><code>&gt;=</code></td><td style="text-align:left"><code>&gt;=</code></td><td style="text-align:left"><code>&gt;=</code></td><td style="text-align:left"><code>&gt;=</code></td></tr><tr><td style="text-align:left">小于等于</td><td style="text-align:left"><code>&lt;=</code></td><td style="text-align:left"><code>&lt;=</code></td><td style="text-align:left"><code>&lt;=</code></td><td style="text-align:left"><code>&lt;=</code></td></tr></tbody></table></div><p><br></p><p>到这里三家语言都出奇的一致啊。  </p><p>还有逻辑运算符：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">运算</th><th style="text-align:left">伪代码</th><th style="text-align:left">Python</th><th style="text-align:left">VB.NET</th><th style="text-align:left">Java</th></tr></thead><tbody><tr><td style="text-align:left">AND <br> (逻辑连接)</td><td style="text-align:left"><code>AND</code></td><td style="text-align:left"><code>and</code></td><td style="text-align:left"><code>And</code></td><td style="text-align:left"><code>&amp;&amp;</code></td></tr><tr><td style="text-align:left">OR <br> (逻辑包含)</td><td style="text-align:left"><code>OR</code></td><td style="text-align:left"><code>or</code></td><td style="text-align:left"><code>Or</code></td><td style="text-align:left">`</td><td></td><td>`</td></tr><tr><td style="text-align:left">NOT <br> (逻辑否定)</td><td style="text-align:left"><code>NOT</code></td><td style="text-align:left"><code>not</code></td><td style="text-align:left"><code>Not</code></td><td style="text-align:left"><code>!</code></td></tr></tbody></table></div><p><br></p><p>!</p><p><br></p><hr><h2 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a><strong>选择语句</strong></h2><h3 id="If…Then语句"><a href="#If…Then语句" class="headerlink" title="If…Then语句"></a><strong>If…Then语句</strong></h3><p>在伪代码这么写：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IF &lt;Boolean expression&gt;</span><br><span class="line">    THEN</span><br><span class="line">        &lt;statement(s)&gt;</span><br><span class="line">ENDIF</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="语法定义和例子-6"><a href="#语法定义和例子-6" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>下面展示了语法定义：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;Boolean expression&gt;:</span><br><span class="line">    &lt;statement(s)&gt;</span><br></pre></td></tr></table></figure><p>注意，在显示哪些语句是条件语句的一部分时，用冒号<code>:</code>替换了关键字THEN。  </p><p>换言之，IF的条件后面必须跟<code>:</code>。</p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">If</span> &lt;<span class="type">Boolean</span> expression&gt;<span class="keyword">Then</span></span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure><p><code>Then</code>与逻辑表达式同行，而且<code>End If</code>要与<code>If</code>有同样的缩进。  </p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (&lt;Boolean expression&gt;)</span><br><span class="line">    &lt;statement&gt;;</span><br></pre></td></tr></table></figure><p>需要注意的是，布尔表达式被括在括号中。<br>如果条件语句中需要包含多个语句，则这些语句必须括在花括号<code>{}</code>中。  </p><p><strong>全部的语言都需要注意缩进！</strong>  </p><p><br></p><p>举出一些例子：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Negative"</span>)</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">If</span> x &lt; <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">    Console.WriteLine(<span class="string">"Negative"</span>)</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    System.out.printIn(<span class="string">"Negative"</span>);</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="If…Then…Else语句"><a href="#If…Then…Else语句" class="headerlink" title="If…Then…Else语句"></a><strong>If…Then…Else语句</strong></h3><p>伪代码：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IF &lt;Boolean expression&gt;</span><br><span class="line">    THEN</span><br><span class="line">        &lt;statement(s)&gt;</span><br><span class="line">    ELSE</span><br><span class="line">        &lt;statement(s)&gt;</span><br><span class="line">ENDIF</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="语法定义和例子-7"><a href="#语法定义和例子-7" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>下面展示了语法定义：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;Boolean expression&gt;:</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;statement(s)&gt;</span><br></pre></td></tr></table></figure><p>缩进用于显示哪些语句是条件语句的一部分，<code>else</code>关键字必须与相应的<code>if</code>关键字对齐。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">If</span> &lt;<span class="type">Boolean</span> expression&gt; <span class="keyword">Then</span></span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure><p>照格式看就好，不多赘述了。  </p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (&lt;Boolean expression&gt;)</span><br><span class="line">    &lt;statement&gt;;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    &lt;statement&gt;;</span><br></pre></td></tr></table></figure><p>如果else部分需要多个语句，则这些语句必须被括在花括号<code>{}</code>中。  </p><p><strong>全部的语言都需要注意缩进！</strong>  </p><p><br></p><p>举出一些例子：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Negative"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Positive"</span>)</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">If</span> x &lt; <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">    Console.WriteLine(<span class="string">"Negative"</span>)</span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">    Console.WriteLine(<span class="string">"Positive"</span>)</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    System.out.printIn(<span class="string">"Negative"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    System.out.printIn(<span class="string">"Positive"</span>)</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="嵌套IF语句"><a href="#嵌套IF语句" class="headerlink" title="嵌套IF语句"></a><strong>嵌套IF语句</strong></h3><p>在伪代码这么写：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">IF &lt;Boolean expression&gt;</span><br><span class="line">    THEN</span><br><span class="line">        &lt;statement(s)&gt;</span><br><span class="line">    ELSE</span><br><span class="line">        IF &lt;Boolean expression&gt;</span><br><span class="line">            THEN</span><br><span class="line">                &lt;statement(s)&gt;</span><br><span class="line">            ELSE</span><br><span class="line">                &lt;statement(s)&gt;</span><br><span class="line">        ENDIF</span><br><span class="line">ENDIF</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="语法定义和例子-8"><a href="#语法定义和例子-8" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>下面展示了语法定义：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;Boolean expression&gt;:</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;Boolean expression&gt;:</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;statement(s)&gt;</span><br></pre></td></tr></table></figure><p>注意关键字<code>elif</code>必须与对应的<code>if</code>对齐。<br>这个结构中可以有任意多的<code>elif</code>部分。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">If</span> &lt;<span class="type">Boolean</span> expression&gt;<span class="keyword">Then</span></span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">ElseIf</span></span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure><p>如果<code>ElseIf</code>用作一个单词，那么在这个结构的末尾只需要一个<code>End If</code>。  <code>ElseIf</code>的数量可以根据需要而定。  </p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (&lt;Boolean expression&gt;)</span><br><span class="line">    &lt;statement&gt;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (&lt;Boolean expression&gt;)</span><br><span class="line">    &lt;statement&gt;;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    &lt;statement&gt;;</span><br></pre></td></tr></table></figure><p><br></p><p>举出一些例子：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Negative"</span>)</span><br><span class="line"><span class="keyword">elif</span> x == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Zero"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Positive"</span>)</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">If</span> x &lt; <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">    Console.WriteLine(<span class="string">"Negative"</span>)</span><br><span class="line"><span class="keyword">ElseIf</span> x = <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">    Console.WriteLine(<span class="string">"Zero"</span>)</span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">    Console.WriteLine(<span class="string">"Positive"</span>)</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">    System.out.printIn(<span class="string">'Negative'</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">    System.out.printIn(<span class="string">'Zero'</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">    System.out.printIn(<span class="string">'Positive'</span>)</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="CASE语句"><a href="#CASE语句" class="headerlink" title="CASE语句"></a><strong>CASE语句</strong></h3><p>另一种选择结构是CASE语句。<br>CASE语句就像是条件判断：满足了哪一个条件就执行哪一个。<br>每个CASE的条件的类型可以是:  </p><ul><li>单个值</li><li>用逗号分隔的单个值</li><li>一个范围</li></ul><p>在伪代码：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CASE OF &lt;expression&gt;</span><br><span class="line">    &lt;value1&gt;                : &lt;statement(s)&gt;</span><br><span class="line">    &lt;value2&gt;,&lt;value3&gt;       : &lt;statement(s)&gt;</span><br><span class="line">    &lt;value4&gt; TO &lt;value5&gt;    : &lt;statement(s)&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    OTHERWISE &lt;statement(s)&gt;</span><br><span class="line">ENDCASE</span><br></pre></td></tr></table></figure><p><code>&lt;statement(s)&gt;</code>的值决定执行哪些语句。根据需要可以有很多不同的情况。<code>OTHERWISE</code>是可选的，用于处理错误，我们一般叫错误捕获。  </p><p><br></p><hr><h3 id="语法定义和例子-9"><a href="#语法定义和例子-9" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>下表展示了语法定义：  </p><p>    <strong>Python</strong>  </p><p><strong>Python里面没有CASE语句</strong>。你需要使用连环I语句才能达到同样的效果。</p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">Case</span> &lt;expression&gt;</span><br><span class="line">    <span class="keyword">Case</span> value1</span><br><span class="line">        &lt;statement(s)&gt;</span><br><span class="line">    <span class="keyword">Case</span> value2,value3</span><br><span class="line">        &lt;statement(s)&gt;</span><br><span class="line">    <span class="keyword">Case</span> value4 <span class="keyword">To</span> value5</span><br><span class="line">        &lt;statement(s)&gt;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="keyword">Case</span> <span class="keyword">Else</span></span><br><span class="line">        &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Select</span></span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (&lt;expression&gt;)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        &lt;statement(s)&gt;;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2: <span class="keyword">case</span> value3:</span><br><span class="line">        &lt;statement(s)&gt;;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="keyword">default</span>: &lt;statement(s)&gt;;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><br></p><p>举出一些例子：  </p><p>    <strong>伪代码</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE OF Grade</span><br><span class="line">    "A"         : OUTPUT "Top grade"</span><br><span class="line">    "F", "U"    : OUTPUT "Fail"</span><br><span class="line">    "B".."E"    : OUTPUT "Pass"</span><br><span class="line">OTHERWISE OUTPUT "Invalid grade"</span><br><span class="line">ENDCASE</span><br></pre></td></tr></table></figure><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> Grade == <span class="string">"A"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Top grade"</span>)</span><br><span class="line"><span class="keyword">elif</span> Grade == <span class="string">"F"</span> <span class="keyword">or</span> Grade == <span class="string">"U"</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Fail"</span>)</span><br><span class="line"><span class="keyword">elif</span> Grade <span class="keyword">in</span> (<span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Pass"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Invalid grade"</span>)</span><br></pre></td></tr></table></figure><p>所以说想要达到CASE语句的效果，python就只能嵌套if了。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">Case</span> Grade</span><br><span class="line">  <span class="keyword">Case</span> <span class="string">"A"</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Top grade"</span>)</span><br><span class="line">  <span class="keyword">Case</span> <span class="string">"F"</span>,<span class="string">"U"</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Fail"</span>)</span><br><span class="line">  <span class="keyword">Case</span> <span class="string">"B"</span> <span class="keyword">To</span> <span class="string">"E"</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Pass"</span>)</span><br><span class="line">  <span class="keyword">Case</span> <span class="keyword">Else</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Invalid grade"</span>)</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">Select</span></span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (grade)</span><br><span class="line">{</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">        System.out.printIn(<span class="string">"Top Grade"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'F'</span>: <span class="keyword">case</span> <span class="string">'U'</span>:</span><br><span class="line">        System.out.printIn(<span class="string">"Fail"</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'B'</span>: <span class="keyword">case</span> <span class="string">'C'</span>: <span class="keyword">case</span> <span class="string">'D'</span>: <span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line">        System.out.printIn(<span class="string">"Pass"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">        System.out.printIn(<span class="string">"Invalid grade"</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a><strong>迭代</strong></h3><p>在伪代码中，计数控制循环的写法如下:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FOR &lt;control variable&gt; ← s TO e STEP i</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line">NEXT &lt;control variable&gt;</span><br></pre></td></tr></table></figure><p>里面的<code>STEP</code>值是可选的。<br><code>&lt;statement(s)&gt;</code>为两次缩进。<br>控制变量的值从<code>s</code>开始，每次循环递增<code>i</code>，直到到达值<code>e</code>时结束。  </p><p><br></p><hr><h3 id="语法定义和例子-10"><a href="#语法定义和例子-10" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>下表展示了语法定义：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;control variable&gt; <span class="keyword">in</span> <span class="built_in">range</span>(s, e, i):</span><br><span class="line">    &lt;statement(s)&gt;</span><br></pre></td></tr></table></figure><p>值<code>s</code>、<code>e</code>和<code>i</code>必须是整数类型。<br>当控制变量略低于<code>e</code>时，循环结束。<br><code>s</code>和<code>i</code>是可选的，如果没有输入，则它们的默认值分别为0和l。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">For</span> &lt;control variable&gt; = s <span class="keyword">To</span> e <span class="keyword">Step</span> i</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">Next</span></span><br></pre></td></tr></table></figure><p><code>s</code>、<code>e</code>和<code>i</code>的类型可以是整型或浮点型。  </p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s; i &lt; e; i ++)</span><br><span class="line">    &lt;statement(s)&gt;</span><br></pre></td></tr></table></figure><p><code>i</code>是其中的控制变量。  </p><p><br></p><p>举出一些例子：  </p><p>    <strong>伪代码</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FOR x ← 1 TO 5</span><br><span class="line">    OUTPUT x</span><br><span class="line">NEXT x</span><br><span class="line"></span><br><span class="line">FOR x = 2 TO 14 STEP 3</span><br><span class="line">    OUTPUT x</span><br><span class="line">NEXT x</span><br><span class="line"></span><br><span class="line">FOR x = 5 TO 1 STEP -1</span><br><span class="line">    OUTPUT x</span><br><span class="line">NEXT x</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><p><code>x</code>的起始值是0，每次迭代都会加一。<br>输出为： <code>0 1 2 3 4</code></p><p><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">14</span>, <span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><p>x的起始值为2，终止值为14，步长为3。<br><strong>注意，在执行迭代循环的时候，第一次输出一定是起始值的值。</strong><br>输出为：<code>2 5 8 11</code></p><p><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><p>x的起始值为5，步长为-1，因此每次迭代都会使x的值减少1。<br>输出为：<code>5 4 3 2</code></p><p><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]:</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>控制变量每次迭代时按顺序取方括号<code>[]</code>的一个值。<br>输出为：<code>abc</code>  </p><p><br></p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">For</span> x = <span class="number">1</span> <span class="keyword">To</span> <span class="number">5</span></span><br><span class="line">    Console.Write(x)</span><br><span class="line"><span class="keyword">Next</span></span><br></pre></td></tr></table></figure><p>输出：<code>1 2 3 4 5</code></p><p><br></p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">For</span> x = <span class="number">2</span> <span class="keyword">To</span> <span class="number">14</span> <span class="keyword">Step</span> <span class="number">3</span>  </span><br><span class="line">    Console.Write(x)</span><br><span class="line"><span class="keyword">Next</span></span><br></pre></td></tr></table></figure><p>输出：<code>2 5 8 11 14</code></p><p><br></p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">For</span> x = <span class="number">5</span> <span class="keyword">To</span> <span class="number">1</span> <span class="keyword">Step</span> -<span class="number">1</span></span><br><span class="line">    Console.Write(x)</span><br><span class="line"><span class="keyword">Next</span></span><br></pre></td></tr></table></figure><p>输出：<code>5 4 3 2 1</code></p><p><br></p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">For</span> x = <span class="number">1</span> <span class="keyword">To</span> <span class="number">2.5</span> <span class="keyword">Step</span> <span class="number">0.5</span></span><br><span class="line">    Console.WriteLine(x)</span><br><span class="line"><span class="keyword">Next</span></span><br></pre></td></tr></table></figure><p>因为命令是<code>Console.WriteLine()</code>，所以输出需要换行。<br>输出：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1.5</span><br><span class="line">2</span><br><span class="line">2.5</span><br></pre></td></tr></table></figure><p><br></p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">For</span> <span class="keyword">Each</span> x <span class="keyword">In</span> {<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>}</span><br><span class="line">    Console.Write(x)</span><br><span class="line"><span class="keyword">Next</span></span><br></pre></td></tr></table></figure><p>控制变量每次迭代时按顺序取花括号<code>{}</code>的一个值。<br>输出：<code>abc</code></p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>; x &lt; <span class="number">6</span>; x++)</span><br><span class="line">{</span><br><span class="line">    System.out.print(x);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>输出： <code>12345</code></p><p><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">2</span>; x &lt; <span class="number">15</span>; x = x + <span class="number">3</span>)</span><br><span class="line">{</span><br><span class="line">    System.out.print(x + <span class="string">"  "</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>输出： <code>2  5  8  11  14</code></p><p><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>; x &lt; <span class="number">0</span>; x--)</span><br><span class="line">{</span><br><span class="line">    System.out.print(x + <span class="string">"  "</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>输出： <code>5  4  3  2  1</code></p><p><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>; x &lt; <span class="number">3</span>; x = x + <span class="number">0.5</span>)</span><br><span class="line">{</span><br><span class="line">    System.out.print(x + <span class="string">"  "</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>输出： <code>1.0  1.5  2.0  2.5</code></p><p><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] letter = {<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>};</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> x : letter )</span><br><span class="line">{</span><br><span class="line">    System.out.print(x)</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>控制变量每次迭代时按顺序取<code>letter</code>中的一个值。<br>输出： <code>abc</code></p><p><br></p><hr><h3 id="后置条件循环"><a href="#后置条件循环" class="headerlink" title="后置条件循环"></a><strong>后置条件循环</strong></h3><p>后条件循环顾名思义，即循环内的语句至少执行一次，因为循环内的语句必须等到满足条件时才可以跳出循环。  </p><p>当运行到后置条件时，我们需要对其进行评估。<br>只要条件求值为<code>False</code>，循环内的语句就会再次执行。当条件求值为<code>True</code>时，执行将转到循环后面的下一个语句。  </p><p>编写后置条件循环时，必须确保循环内部有一条语句，在某个时刻将结束条件改为<code>True</code>。否则，循环将永远执行下去。  </p><p>伪代码：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPEAT</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line">UNTIL &lt;condition&gt;</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="语法定义和例子-11"><a href="#语法定义和例子-11" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>下面展示了语法定义：  </p><p>    <strong>Python</strong>  </p><p>Python中没有后置条件循环。如果需要完成同样的目标就需要使用前置条件循环。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Do</span></span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">Loop</span> <span class="keyword">Until</span> &lt;condition&gt;</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line">} <span class="keyword">while</span> &lt;condition&gt;;</span><br></pre></td></tr></table></figure><p><br></p><p>举出一些例子：  </p><p>    <strong>伪代码</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPEAT</span><br><span class="line">    INPUT "Enter Y or N: " Answer</span><br><span class="line">UNTIL Answer = "Y"</span><br></pre></td></tr></table></figure><p>    <strong>Python</strong>  </p><p>Python的执行方法放到下一个部分：前置条件语句中。</p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Do</span></span><br><span class="line">    Console.Write(<span class="string">"Enter Y or N: "</span>)</span><br><span class="line">    Answer = Console.ReadLine()</span><br><span class="line"><span class="keyword">Loop</span> <span class="keyword">Until</span> Answer = <span class="string">"Y"</span></span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line">    System.out.print(<span class="string">"Enter Y or N: "</span>);</span><br><span class="line">    answer = console.next();</span><br><span class="line">} <span class="keyword">while</span> (!(answer.equals(<span class="string">"Y"</span>)));</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="前置条件语句"><a href="#前置条件语句" class="headerlink" title="前置条件语句"></a><strong>前置条件语句</strong></h3><p>前置条件循环，顾名思义，就是在循环内的语句执行之前计算条件。<br>只要条件求值为<code>True</code>，前置条件循环就会执行循环中的语句。当条件求值为<code>False</code>时，执行将转到循环后面的下一个语句。<br>注意，第一次遇到循环结构时，条件语句中使用的任何变量都不能是未定义(undefined)。  </p><p>编写前置条件循环时，必须确保循环内部有一条语句在某个时候改变控制条件的值。否则循环将永远执行下去。</p><p>伪代码：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WHILE &lt;condition&gt; DO</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line">ENDWHILE</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="语法定义和例子-12"><a href="#语法定义和例子-12" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>下表展示了语法定义：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;condition&gt;:</span><br><span class="line">    &lt;statement(s)&gt;</span><br></pre></td></tr></table></figure><p>注意，循环中的语句必须按一定数量的空格缩进。<br>循环后的第一个语句必须减少缩进。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Do</span> <span class="keyword">While</span> &lt;condition&gt;</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">Loop</span></span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">Until</span> &lt;condition&gt;</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">Loop</span></span><br></pre></td></tr></table></figure><p>需要注意的是：<code>Loop</code>关键字表示循环结束。<br>VB.NET也有一个前置条件，直到遇见<code>Loop</code>。只要条件求值为<code>False</code>，就执行循环中的语句。如果第一次遇到循环时，条件的计算结果为<code>True</code>，则不执行循环中的语句。  </p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (&lt;condition&gt;)</span><br><span class="line">{</span><br><span class="line">    &lt;statement(s)&gt;;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><p>举出一些例子：  </p><p>    <strong>伪代码</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Answer ← ""</span><br><span class="line">WHILE Answer &lt;&gt; "Y" DO</span><br><span class="line">    INPUT "Enter Y or N: " Answer</span><br><span class="line">ENDWHILE</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Answer = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> Answer != <span class="string">'Y'</span>:</span><br><span class="line">    Answer = <span class="built_in">input</span>(<span class="string">"Enter Y or N: "</span>)</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> Answer <span class="keyword">As</span> <span class="type">String</span> = <span class="string">""</span></span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">While</span> Answer &lt;&gt; <span class="string">"Y"</span></span><br><span class="line">    Console.Write(<span class="string">"Enter Y or N: "</span>)</span><br><span class="line">    Answer = Console.ReadLine()</span><br><span class="line"><span class="keyword">Loop</span></span><br><span class="line">Answer = <span class="string">""</span></span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">Until</span> Answer = <span class="string">"Y"</span></span><br><span class="line">    Console.Write(<span class="string">"Enter Y or N: "</span>)</span><br><span class="line">    Answer = Console.ReadLine()</span><br><span class="line"><span class="keyword">Loop</span></span><br></pre></td></tr></table></figure><p>可以将多个相同类型的变量放在同一行中。</p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">answer</span> <span class="operator">=</span> <span class="string">""</span>;</span><br><span class="line"><span class="keyword">while</span>(answer.equals(<span class="string">"Y"</span>) == <span class="literal">false</span>)</span><br><span class="line">{</span><br><span class="line">    System.out.print(<span class="string">"Enter Y or N: "</span>)</span><br><span class="line">    answer = console.next();</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="如何决定使用哪个循环？"><a href="#如何决定使用哪个循环？" class="headerlink" title="如何决定使用哪个循环？"></a><strong>如何决定使用哪个循环？</strong></h3><p>如果你知道程序执行到循环语句时需要执行多少次循环，就使用计数控制的循环。<br>如果循环的终止取决于循环内部发生的某些条件，那么就使用条件循环。<br>前置条件循环还有一个好处，那就是如果条件不需要循环，就可以根本不进入循环。</p><p><br></p><hr><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a><strong>内置函数</strong></h2><p>编程环境提供了许多内置函数。<br>其中一些在任何情况下都可以使用，而有些需要从特定的模块库中导入。  </p><h3 id="字符串操作函数"><a href="#字符串操作函数" class="headerlink" title="字符串操作函数"></a><strong>字符串操作函数</strong></h3><p>下表给出了一堆处理字符串的函数：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">描述</th><th style="text-align:left">伪代码</th><th style="text-align:left">Python</th><th style="text-align:left">VB.NET</th><th style="text-align:left">Java</th></tr></thead><tbody><tr><td style="text-align:left">访问<code>ThisString</code>中的第<code>P</code>个字符</td><td style="text-align:left"><code>ThisString[P]</code> <br> （从1开始计数）</td><td style="text-align:left"><code>ThisString[P]</code> <br> （从0开始计数）</td><td style="text-align:left"><code>ThisString(P)</code> <br> （从0开始计数）</td><td style="text-align:left"><code>ThisString.charAt(P)</code> <br> （从0开始计数）</td></tr><tr><td style="text-align:left">返回ASCII值为i的字符</td><td style="text-align:left"><code>CHR(i : INTEGER) RETURNS CHAR</code></td><td style="text-align:left"><code>chr(i)</code></td><td style="text-align:left"><code>Chr(i)</code></td><td style="text-align:left"><code>(char) i;</code></td></tr><tr><td style="text-align:left">返回字符<code>ch</code>的ASCII值</td><td style="text-align:left"><code>ASC(ch) RETURNS INTEGER</code></td><td style="text-align:left"><code>ord(ch)</code></td><td style="text-align:left"><code>Asc(ch)</code></td><td style="text-align:left"><code>(int) ch;</code></td></tr><tr><td style="text-align:left">返回字符串<code>S</code>的长度的整数值</td><td style="text-align:left"><code>LENGTH(S : STRING) RETURNS INTEGER</code></td><td style="text-align:left"><code>len(S)</code></td><td style="text-align:left"><code>len(S)</code></td><td style="text-align:left"><code>S.length();</code></td></tr><tr><td style="text-align:left">返回<code>S</code>的最左边的<code>L</code>个字符</td><td style="text-align:left"><code>LEFT(S : STRING, L : INTEGER) RETURNS STRING</code></td><td style="text-align:left"><code>S[0:L]</code></td><td style="text-align:left"><code>Left(S, L)</code></td><td style="text-align:left"><code>S.subString(0, L)</code></td></tr><tr><td style="text-align:left">返回<code>S</code>的最右边的<code>L</code>个字符</td><td style="text-align:left"><code>RIGHT(S : STRING, L : INTEGER) RETURNS STRING</code></td><td style="text-align:left"><code>S[-L:]</code></td><td style="text-align:left"><code>Right(S, L)</code></td><td style="text-align:left"><code>S.subString(S.length() - L)</code></td></tr><tr><td style="text-align:left">在字符串<code>S</code>中，返回从<code>P</code>开始<code>L</code>个长度的字符串</td><td style="text-align:left"><code>MID(S : STRING, P : INTEGER, L : INTEGER) RETURNS STRING</code></td><td style="text-align:left"><code>S[P : P + L]</code></td><td style="text-align:left"><code>mid(S, P, L)</code></td><td style="text-align:left"><code>S.subString(P, P + L)</code></td></tr><tr><td style="text-align:left">返回<code>Ch</code>的小写等价字符值</td><td style="text-align:left"><code>LCASE(Ch : CHAR) RETURNS CHAR</code></td><td style="text-align:left"><code>Ch.lower()</code></td><td style="text-align:left"><code>LCase(Ch)</code></td><td style="text-align:left"><code>Character.toLowerCase(ch)</code></td></tr><tr><td style="text-align:left">返回<code>Ch</code>的大写等价字符值</td><td style="text-align:left"><code>UCASE(Ch : CHAR) RETURNS CHAR</code></td><td style="text-align:left"><code>Ch.upper()</code></td><td style="text-align:left"><code>UCase(Ch)</code></td><td style="text-align:left"><code>Character.toUpperCase(ch)</code></td></tr><tr><td style="text-align:left">将字符串<code>S</code>全转换为大写</td><td style="text-align:left"><code>TO_UPPER(S : STRING) RETURNS STRING</code></td><td style="text-align:left"><code>S.upper</code></td><td style="text-align:left"><code>S.ToUpper()</code></td><td style="text-align:left"><code>S.toUpperCase()</code></td></tr><tr><td style="text-align:left">将字符串<code>S</code>全转换为小写</td><td style="text-align:left"><code>TO_LOWER(S : STRING) RETURNS STRING</code></td><td style="text-align:left"><code>S.lower()</code></td><td style="text-align:left"><code>S.ToLower()</code></td><td style="text-align:left"><code>S.toLowerCase()</code></td></tr><tr><td style="text-align:left">粘合两个字符串</td><td style="text-align:left"><code>S1 &amp; S2</code></td><td style="text-align:left"><code>s = S1 + S2</code></td><td style="text-align:left"><code>s = S1 + S2</code> <br> 或者： <code>s = S1 &amp; S2</code></td><td style="text-align:left"><code>s = S1 + S2</code></td></tr></tbody></table></div><p><br></p><hr><h3 id="Python中的切片操作"><a href="#Python中的切片操作" class="headerlink" title="Python中的切片操作"></a><strong>Python中的切片操作</strong></h3><p>在Python中，<strong>切片操作(slicing)</strong>是对序列型对象(如<code>list</code>, <code>string</code>, <code>tuple</code>)的一种高级索引方法。<br>普通索引只取出序列中一个下标对应的元素，而切片取出序列中一个范围对应的元素，这里的范围不是狭义上的连续片段。  </p><p>下图显示了ThisString的表示形式。<br>如果我们想返回从位置3开始的长度为3的切片，我们使用<code>ThisString[3 : 6]</code>来给出返回<code>DEF</code>。  </p><p><strong>位置从0开始计数，切片上界的位置不包含在子字符串中。</strong></p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBa6225a80d7d6d706accc6f17ab1c4056?method=download&amp;shareKey=d9355b93c15e6cf5d0c64c71941eafee" alt=""></p><p><br></p><p>如果您想象每个元素的编号从左端开始，那么更容易看到左元素(下界)是如何包括在内的，而右元素(上界)是如何被排除在外的。<br>下表显示了Python中其他一些有用的切片：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">表示</th><th style="text-align:left">输出</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left"><code>ThisString[2:]</code></td><td style="text-align:left"><code>CDEFG</code></td><td style="text-align:left">如果不给定上界，则切片包含到<strong>字符串末尾的所有字符。</strong></td></tr><tr><td style="text-align:left"><code>ThisString[:2]</code></td><td style="text-align:left"><code>AB</code></td><td style="text-align:left">如果不给定下界，则切片包括<strong>字符串开头的所有字符。</strong></td></tr><tr><td style="text-align:left"><code>ThisString[-2:]</code></td><td style="text-align:left"><code>FG</code></td><td style="text-align:left">负下界意味着它<strong>从字符串的末尾开始取切片。</strong></td></tr><tr><td style="text-align:left"><code>ThisString[:-2]</code></td><td style="text-align:left"><code>ABCDE</code></td><td style="text-align:left">负上界意味着它<strong>在该位置终止字符串。</strong></td></tr></tbody></table></div><p><br></p><hr><h3 id="数据截断"><a href="#数据截断" class="headerlink" title="数据截断"></a><strong>数据截断</strong></h3><p>有时我们只需要实数没有经过四舍五入后的整数部分。<br>这就是所谓的<strong>截断 (Truncation)</strong>。</p><div class="table-container"><table><thead><tr><th style="text-align:left">语言</th><th style="text-align:left">代码</th><th style="text-align:left">注释</th></tr></thead><tbody><tr><td style="text-align:left">伪代码</td><td style="text-align:left"><code>INT(x : REAL) RETURNS INTEGER</code></td><td style="text-align:left">直接返回<code>x</code>的整数部分。</td></tr><tr><td style="text-align:left">Python</td><td style="text-align:left"><code>int(x)</code></td><td style="text-align:left">如果<code>x</code>是一个浮点类型的数据，则输出将会截断为0.</td></tr><tr><td style="text-align:left">VB.NET</td><td style="text-align:left"><code>Math.Truncate(x)</code></td><td style="text-align:left">返回实数<code>x</code>的整数部分。</td></tr><tr><td style="text-align:left">Java</td><td style="text-align:left"><code>(int) x;</code></td><td style="text-align:left">将数字<code>x</code>强制转换为整数。</td></tr></tbody></table></div><p><br></p><hr><h3 id="将字符串转换为数字"><a href="#将字符串转换为数字" class="headerlink" title="将字符串转换为数字"></a><strong>将字符串转换为数字</strong></h3><p>有时整数可以保存为字符串的形式。<br>要在计算中使用这样的数字，首先需要将其转换为整数。<br>比如说，这些函数可以从字符串<code>5</code>返回整数值5：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">语言</th><th style="text-align:left">代码</th></tr></thead><tbody><tr><td style="text-align:left">Python</td><td style="text-align:left"><code>int(S)</code></td></tr><tr><td style="text-align:left">VB.NET</td><td style="text-align:left"><code>CInt(S)</code></td></tr><tr><td style="text-align:left">Java</td><td style="text-align:left"><code>Integer.valueOf(S)</code></td></tr></tbody></table></div><p><br></p><p>有时带小数点的数字可以保存为字符串的形式。<br>要在计算中使用这样的数字，首先需要将其转换为<strong>实数 (REAL)</strong>，或者<strong>浮点数 (Float)</strong>。<br>例如，以下函数从字符串<code>75.43</code>返回实数75.43:</p><div class="table-container"><table><thead><tr><th style="text-align:left">语言</th><th style="text-align:left">代码</th><th style="text-align:left">注释</th></tr></thead><tbody><tr><td style="text-align:left">伪代码</td><td style="text-align:left"><code>STRING_TO_NUM(x : STRING) RETURNS REAL</code></td><td style="text-align:left">返回字符串的数字形式。</td></tr><tr><td style="text-align:left">Python</td><td style="text-align:left"><code>float(x)</code></td><td style="text-align:left">返回为浮点类型数据。</td></tr><tr><td style="text-align:left">VB.NET</td><td style="text-align:left"><code>CDbl(x)</code></td><td style="text-align:left">返回为<strong>双精度浮点型数据 (double)</strong>。</td></tr><tr><td style="text-align:left">Java</td><td style="text-align:left"><code>Float.valueOf(x)</code></td><td style="text-align:left">返回为浮点类型数据。</td></tr></tbody></table></div><p><br></p><hr><h3 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a><strong>生成随机数</strong></h3><p>当我们在做仿真中经常需要用到随机数。<br>大多数编程语言都有各种可用的随机数生成器。<br>由于这些随机数是通过程序生成的，它们被称为“伪随机数”。<br>下面的代码示例展示了一些最有用的随机数生成器：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in the random library:</span></span><br><span class="line">randint(<span class="number">1</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>这段代码生成了一个介于1和6之间的随机数(包括1和6)。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> RandomNumber <span class="keyword">As</span> <span class="built_in">New</span> Random</span><br><span class="line"><span class="keyword">Dim</span> x <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line">x = RandomNumber.<span class="keyword">Next</span>(<span class="number">1</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>首先我们必须建立一个<code>RandomNumber</code>对象。建立对象的内容到Paper 4会涉及。<br>这段代码生成一个介于<strong>包含1到不包含6</strong>之间的整数。  </p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="type">Random</span> <span class="variable">randomNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> randomNumber.nextInt(<span class="number">6</span>) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>我们同样需要建立一个<code>RandomNumber</code>对象。建立对象的内容到Paper 4会涉及。<br>这段代码生成一个介于<strong>包含1到包含6</strong>之间的整数。  </p><p><br></p><hr><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a><strong>过程</strong></h2><p>在第12章中，我们使用<strong>过程 (Procedure)</strong>作为给一组语句命名的一种方式。<br>当我们想编写一个过程时，需要在主程序之前定义它。<br>当我们希望执行过程体中的语句时，我们就可以在主程序中调用它。</p><p>在伪代码中，过程的定义为：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PROCEDURE &lt;procedureIdentifier&gt;</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line">ENDPROCEDURE</span><br></pre></td></tr></table></figure><p>想要调用过程时，需要使用下面这行代码：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL &lt;procedureIdentifier&gt;</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="语法定义和例子-13"><a href="#语法定义和例子-13" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>下表展示了语法定义：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> &lt;identifier&gt;():</span><br><span class="line">    &lt;statement(s)&gt;</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> &lt;identifier&gt;()</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>可以将多个相同类型的变量放在同一行中。</p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> &lt;identifier&gt;()</span><br><span class="line">{</span><br><span class="line">    &lt;statement(s)&gt;;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>同样，你可以将多个相同类型的变量放在同一行中。  </p><p><br></p><p><br></p><p>举出一些例子：  </p><p>    <strong>伪代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PROCEDURE InputOddNumber</span><br><span class="line">    REPEAT</span><br><span class="line">        INPUT "Enter an odd number: " Number</span><br><span class="line">    UNTIL Number MOD 2 = 1</span><br><span class="line">    OUTPUT "Valid number entered"</span><br><span class="line">ENDPROCEDURE</span><br></pre></td></tr></table></figure><p>在主代码中使用该过程就可以：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL InputOddNumber</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">InputOddNumber</span>():</span><br><span class="line">    Number = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> Number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        Number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"Enter an odd number: "</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Valid number entered)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#***************** main program starts here ********************</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">InputOddNumber()</span></span><br></pre></td></tr></table></figure><p>Python编辑器对语句的不同部分进行颜色编码，这在你输入自己的代码时很有帮助。<br>缩进显示了哪些语句是循环的一部分。<br>内置函数<code>input</code>返回一个字符串，必须将其转换为整数才能作为数字使用。    </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Module</span> Module1</span><br><span class="line">    <span class="keyword">Dim</span> Number <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Sub</span> InputOddNumber()</span><br><span class="line">        <span class="keyword">Do</span></span><br><span class="line">            Console.Write(<span class="string">"Enter an odd number: "</span>)</span><br><span class="line">            Number = Console.ReadLine</span><br><span class="line">        <span class="keyword">Loop</span> <span class="keyword">Until</span> Number <span class="built_in">Mod</span> <span class="number">2</span> = <span class="number">1</span></span><br><span class="line">        Console.WriteLine(<span class="string">"Valid number entered"</span>)</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line">    <span class="keyword">Sub</span> Main()</span><br><span class="line">        InputOddNumber()</span><br><span class="line">        Console.ReadLine()</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Module</span></span><br></pre></td></tr></table></figure><p>Visual Basic Express编辑器对语句的不同部分进行了颜色编码，因此很容易看出是否有语法错误。<br>编辑器还会自动缩进关键字并将其大写。<br>变量需要在使用之前进行声明。<br>当输入一个标识符而不跟随初始的大小写时，编辑器将跟随变量声明的大小写。<br>编辑器可以预测你的输入:当您键入语句的第一部分时，将显示弹出列表。  </p><p>当你要运行主程序时，使用<code>Console.ReadLine()</code>命令来使得控制台一直打开。  </p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exl;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exl</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inputOddNumber</span><span class="params">()</span></span><br><span class="line">    {</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">console</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        {</span><br><span class="line">            System.out.print(<span class="string">"Enter an odd number: "</span>);</span><br><span class="line">            number = console.nextInt();</span><br><span class="line">        } <span class="keyword">while</span> (number % <span class="number">2</span> != <span class="number">1</span>);</span><br><span class="line">        System.out.printIn(<span class="string">"Valid number entered"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    {</span><br><span class="line">        inputOddNumber();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>编辑器会自动对关键字和字符串进行颜色编码。<br>过程体包含在花括号<code>{}</code>中。<br>编辑器可以预测你下一步输入的内容:当输入语句的第一部分时，IDE将显示弹出列表。<br>变量需要在使用之前进行声明。    </p><p><br></p><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h2><p>在之前的一个小节中，我们使用了内置函数。<br>这些是由其他程序员编写的有用的子程序，在模块库中提供。<br>最常用的库通常在系统库中，因此无需导入即可使用。</p><p>除了那些内置的函数，你可以编写自己的函数。<br>如果你构建了自己的模块库，那么你编写的任何函数都可以在另一个程序中使用。</p><p>函数用作表达式的一部分。<br>当程序执行到达表达式中包含函数调用的语句时，该函数就会被执行，然后在表达式中使用这个函数调用的<strong>返回值 (Return value)</strong>。</p><p><strong>函数与过程最大的区别就是：函数有返回值。</strong>  </p><p>编写自己的函数时，确保在组成函数(函数体)的语句中始终返回一个值。<br>如果函数体中有不同的结果，可以存在多个<code>RETURN</code>语句。  </p><p><br></p><p>伪 be like:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FUNCTION &lt;functionIdentifier&gt; RETURNS &lt;dataType&gt;</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line">    RETURN &lt;value&gt;</span><br><span class="line">ENDFUNCTION</span><br></pre></td></tr></table></figure><article class="message is-info"><div class="message-body"><b>Return value: the value replacing the function call used in the expression</b></div></article> <p><br></p><hr><h3 id="语法定义和例子-14"><a href="#语法定义和例子-14" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>下表展示了语法定义：  </p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> &lt;functionIdentifier&gt;():</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line">    <span class="keyword">return</span> &lt;value&gt;</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Function</span> &lt;functionIdentifier&gt;() <span class="keyword">As</span> &lt;datatype&gt;</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line">    &lt;functionIdentifier&gt; = &lt;value&gt; <span class="comment">'Return &lt;value&gt; (返回&lt;value&gt;)  </span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;data type&gt; &lt;functionIdentifier&gt;()</span><br><span class="line">{</span><br><span class="line">    &lt;statement(s)&gt;;</span><br><span class="line">    <span class="keyword">return</span> &lt;value&gt;;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><br></p><p>当编程一个函数时，函数的定义应该写在与过程相同的地方。<br>该函数是从主程序中的表达式或过程中调用的。  </p><p>不同的编程语言对其子程序使用不同的术语，如下表所示：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">伪代码</th><th style="text-align:left"><code>PROCEDURE</code></th><th style="text-align:left"><code>FUNCTION</code></th></tr></thead><tbody><tr><td style="text-align:left">Python</td><td style="text-align:left">void function</td><td style="text-align:left">fruitful function</td></tr><tr><td style="text-align:left">VB.NET</td><td style="text-align:left">Subroutine</td><td style="text-align:left">Function</td></tr><tr><td style="text-align:left">Java</td><td style="text-align:left">void method</td><td style="text-align:left">method</td></tr></tbody></table></div><p><br></p><p>Void的意思是“什么都没有”。Python和Java都使用这个术语来表示它们的过程类型子例程没有返回值。<br>Python将这两种类型的子例程都称为函数。有”Fruit function”返回一个或多个值。</p><p><br></p><p><br></p><p>这里根据刚才讲过程的那一个小结，重新以函数的形式写出来：  </p><p>    <strong>伪代码</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FUNCTION InputOddNumber RETURNS INTEGER</span><br><span class="line">    REPEAT</span><br><span class="line">        INPUT "Enter an odd number: " Number</span><br><span class="line">    UNTIL Number MOD 2 = 1</span><br><span class="line">    OUTPUT "Valid number entered"</span><br><span class="line">    RETURN Number</span><br><span class="line">ENDFUNCTION</span><br></pre></td></tr></table></figure><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">InputOddNumber</span>():</span><br><span class="line">    Number = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> Number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        Number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">"Enter an odd number: "</span>))</span><br><span class="line">    <span class="keyword">return</span> Number</span><br><span class="line"></span><br><span class="line"><span class="comment"># ************** main program starts here *****************</span></span><br><span class="line"></span><br><span class="line">NewNumber = InputOddNumber()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在声明阶段中，变量<code>Number</code>无法在主程序中使用，因为在Python中只要一个变量没有全局声明，就不可以在整个程序之间随意使用。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><p>VB这边强势的给出了两种解法：  </p><p>首先是使用了全局变量的方案：  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Module</span> Module1</span><br><span class="line">    <span class="keyword">Dim</span> Number, NewNumber <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Function</span> InputOddNumber()</span><br><span class="line">        <span class="keyword">Do</span></span><br><span class="line">            Console.Write(<span class="string">"Enter an odd number: "</span>)</span><br><span class="line">            Number = Console.ReadLine</span><br><span class="line">        <span class="keyword">Loop</span> <span class="keyword">Until</span> Number <span class="built_in">Mod</span> <span class="number">2</span> = <span class="number">1</span></span><br><span class="line">        InputOddNumber = Number</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Sub</span> Main()</span><br><span class="line">        NewNumber = InputOddNumber()</span><br><span class="line">        Console.ReadLine()</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Module</span></span><br></pre></td></tr></table></figure><p>其次是使用了局部变量的方案：  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Module</span> Module1</span><br><span class="line">    <span class="keyword">Dim</span> NewNumber <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Function</span> InputOddNumber()</span><br><span class="line">        <span class="keyword">Dim</span> Number <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line">        <span class="keyword">Do</span></span><br><span class="line">            Console.Write(<span class="string">"Enter an odd number: "</span>)</span><br><span class="line">            Number = Console.ReadLine</span><br><span class="line">        <span class="keyword">Loop</span> <span class="keyword">Until</span> Number <span class="built_in">Mod</span> <span class="number">2</span> = <span class="number">1</span></span><br><span class="line">        InputOddNumber = Number</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Sub</span> Main()</span><br><span class="line">        NewNumber = InputOddNumber()</span><br><span class="line">        Console.ReadLine()</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Module</span></span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exl;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exl</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">inputOddNumber</span><span class="params">()</span></span><br><span class="line">    {</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">console</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        {</span><br><span class="line">            System.out.print(<span class="string">"Enter an odd number: "</span>);</span><br><span class="line">            number = console.nextInt();</span><br><span class="line">        } <span class="keyword">while</span> (number % <span class="number">2</span> != <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> <span class="variable">newNumber</span> <span class="operator">=</span> inputOddNumber();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>同样，因为没有全局声明过，变量<code>number</code>无法在主程序中调用。  </p><p><br></p><p>全局变量可以在程序代码的任何部分使用，但是将变量声明为仅在子程序中使用的局部变量是一种良好的编程习惯。  </p><p>在Python中，每个变量都是局部变量，除非我们主动声明它们为全局变量。<br>在VB.NET中，我们需要为子例程内的局部变量编写声明语句。<br>Java不支持全局变量。但是，类 (class)中声明的静态变量在整个类中都可以访问。  </p><p><br></p><hr><h2 id="向子程序传参"><a href="#向子程序传参" class="headerlink" title="向子程序传参"></a><strong>向子程序传参</strong></h2><p>当<strong>子例程 (Subroutine)</strong>需要主程序的一个或多个值时，我们在调用时将这些值作为<strong>参数 (Argument / Parameter)</strong>提供给子例程。这就是我们使用内置函数的方式。<br>当我们调用内置函数时，我们不需要知道函数中使用的标识符。</p><p>当我们定义一个需要将值传递给子例程主体的子例程时，我们在子例程头中使用参数列表。  </p><p>当子例程被调用时，我们需要在括号中提供参数。提供的<strong>实参 (Argument)</strong>被赋值给子例程的相应<strong>形参 (Parameter)</strong>(注意，形参列表中的形参顺序必须与实参列表中的顺序相同)。这就是所谓的<strong>子程序接口 (Subroutine interface)</strong>。</p><p>你可能发现参数分为实参和形参。一般来说，当<strong>定义一个方法的时候，我们传递到方法中的变量叫做形参</strong>。，当<strong>调用一个方法的时候，传给方法的值叫做实参</strong>。</p><article class="message is-info"><div class="message-body"><b>Argument: the actual input expression or value with which the subroutine is being called.</b><br><b>Parameter: the variable(s) used inside a subroutine which will take values passes into a subroutine at call time.</b><br><b>Subroutine interface: the parameters being passed between the subroutine and the calling program.</b><br><b>Function / Procedure header: the first line of a function or procedure definition showing the identifier and parameter list.</b></div></article> <p><br></p><hr><h2 id="向函数中传参"><a href="#向函数中传参" class="headerlink" title="向函数中传参"></a><strong>向函数中传参</strong></h2><p>在为代码中，一个<strong>函数头</strong>是这样写的：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FUNCTION &lt;functionIdentifier&gt; (&lt;parameterList&gt;) RETURNS &lt;dataType&gt;</span><br></pre></td></tr></table></figure><p>其中，<code>&lt;parameterList&gt;</code>是形参的标识符及其数据类型的列表，使用逗号分隔。  </p><p><br></p><p>举出一些例子：  </p><p>    <strong>伪代码</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FUNCTION SumRange(FirstValue : INTEGER, LastValue : INTEGER) RETURNS INTEGER</span><br><span class="line">    DECLARE Sum, ThisValue : INTEGER</span><br><span class="line">    Sum ← 0</span><br><span class="line">    FOR ThisValue ←FirstValue TO LastValue</span><br><span class="line">        Sum ← Sum + ThisValue</span><br><span class="line">    NEXT ThisValue</span><br><span class="line">    RETURN Sum</span><br><span class="line">ENDFUNCTION</span><br></pre></td></tr></table></figure><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SumRange</span>(<span class="params">FirstValue, LastValue</span>):</span><br><span class="line">    Sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ThisValue <span class="keyword">in</span> <span class="built_in">range</span>(FirstValue, LastValue + <span class="number">1</span>):</span><br><span class="line">        Sum = Sum + ThisValue</span><br><span class="line">    <span class="keyword">return</span> Sum</span><br><span class="line"></span><br><span class="line"><span class="comment"># ************ main program starts here ********************</span></span><br><span class="line"></span><br><span class="line">NewNumber = SumRange(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(NewNumber)</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Module</span> Module1</span><br><span class="line">    <span class="keyword">Dim</span> Number, NewNumber <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Function</span> SumRange(<span class="keyword">ByVal</span> FirstValue, <span class="keyword">ByVal</span> LastValue)</span><br><span class="line">        <span class="keyword">Dim</span> Sum, ThisValue <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line">        Sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">For</span> ThisValue = FirstValue <span class="keyword">To</span> LastValue</span><br><span class="line">            Sum = Sum + ThisValue</span><br><span class="line">        <span class="keyword">Next</span></span><br><span class="line">        SumRange = Sum</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Sub</span> Main()</span><br><span class="line">        NewNumber = SumRange(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        Console.WriteLine(NewNumber)</span><br><span class="line">        Console.ReadLine()</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Module</span></span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exl</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sumRange</span><span class="params">(<span class="type">int</span> firstValue, <span class="type">int</span> lastValue)</span></span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">thisValue</span> <span class="operator">=</span> firstValue; thisValue &lt;= lastValue; thisValue++)</span><br><span class="line">        {</span><br><span class="line">            sum = sum + thisValue;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> <span class="variable">newNumber</span> <span class="operator">=</span> sumRange(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.printIn(newNumber);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><br></p><hr><h2 id="向过程中传参"><a href="#向过程中传参" class="headerlink" title="向过程中传参"></a><strong>向过程中传参</strong></h2><p>如果形参<strong>传递值 (passed by value)</strong>，那么在调用时形参可以是一个实际值。<br>如果传进去的参数是一个变量，那么将该变量<strong>当前值的副本</strong>传递给子例程。<br>也就是说，调用程序中的变量的值不受子例程中发生的事情的影响。调用该变量后不会对元变量的值发生任何改变。<em>（除非你的过程里面写了把变量值变换的条件）</em>  </p><p>对于过程，我们可以通过<strong>引用 (By reference)</strong>传递参数。<br>在调用时，实参必须是变量。指向该变量的内存位置(地址)的指针被传递到过程中。对变量内容的任何更改都将在调用程序/模块的过程之外有效。</p><p>人话讲：By value就是传进去的是一个值，但是这个值不会改变原变量的值——他就只是一个值而已。<br>而By reference就是直接把这个变量的内存地址给传进去了。所有的更改就会直接叠加在原变量上。  </p><article class="message is-info"><div class="message-body"><b>By value: the actual value is passed into the procedure.</b><br><b>By reference: the address of the variable is passed into the procedure.</b></div></article> <p><br></p><p>请注意，这<strong>两种参数传递方法都不适用于Python</strong>。<br>在Python或Java中，这个方法被称为<strong>对象引用传递(pass by object reference)</strong>。<br>这基本上是一种面向对象的参数传递方式，超出了本章的范围。重点是要了解如何使用Python和Java编程以获得所需的效果。</p><p><br></p><hr><p>伪代码中的<strong>过程头 (Procedure header)</strong>：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PROCEDURE &lt;ProcedureIdentifier&gt; (&lt;parameterList&gt;)</span><br></pre></td></tr></table></figure><p>参数列表需要过程定义的更多信息。<br>在伪代码中，列表中的参数以下列格式之一表示：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BYREF &lt;identifier1&gt; : &lt;dataType&gt;</span><br><span class="line">BYVALUE &lt;identifier2&gt; : &lt;dataType&gt;</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="按值传递参数"><a href="#按值传递参数" class="headerlink" title="按值传递参数"></a><strong>按值传递参数</strong></h3><p>伪代码中：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PROCEDURE OutputSymbols(BYVALUE NumberOfSymbols : INTEGER, Symbol : CHAR)</span><br><span class="line">    DECLARE Count : INTEGER</span><br><span class="line">    FOR Count ← 1 TO NumberOfSymbols</span><br><span class="line">        OUTPUT Symbol // without moving to the next line</span><br><span class="line">    NEXT Count</span><br><span class="line">    OUTPUT NewLine</span><br><span class="line">ENDPROCEDURE </span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Python</strong>  </p><p>在Python中，所有参数的行为都类似于局部变量，它们的效果就与传递值一样：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">OutputSymbols</span>(<span class="params">NumberOfSymbols, Symbol</span>):</span><br><span class="line">    <span class="keyword">for</span> Count <span class="keyword">in</span> <span class="built_in">range</span>(NumberOfSymbols):</span><br><span class="line">        <span class="built_in">print</span>(Symbol, end=<span class="string">''</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ********** main program starts here ***********</span></span><br><span class="line"></span><br><span class="line">OutputSymbols(<span class="number">5</span>, <span class="string">'*'</span>)</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>VB.NET</strong></p><p>在VB.NET中，传参方式默认为按值传递。<br>关键字<code>ByVal</code>是由编辑器自动插入的：  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Module</span> Module1</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Sub</span> OutputSymbols(<span class="keyword">ByVal</span> NumberOfSymbols, <span class="keyword">ByVal</span> Symbol)</span><br><span class="line">        <span class="keyword">Dim</span> Count <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line">        <span class="keyword">For</span> Count = <span class="number">1</span> <span class="keyword">To</span> NumberOfSymbols</span><br><span class="line">            Console.Write(Symbol)</span><br><span class="line">        <span class="keyword">Next</span></span><br><span class="line">        Console.WriteLine()</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Sub</span> Main()</span><br><span class="line">        OutputSymbols(<span class="number">5</span>, <span class="string">"*"</span>)</span><br><span class="line">        Console.ReadLine()</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Module</span></span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Java</strong></p><p>在Python中，所有参数的行为都类似于局部变量，它们的效果就与传递值一样：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exl</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">outputSymbols</span><span class="params">(<span class="type">int</span> numberOfSymbols, <span class="type">char</span> symbol)</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>; count &lt;= numberOfSymbols; count++)</span><br><span class="line">        {</span><br><span class="line">            System.out.print(symbol);</span><br><span class="line">        }</span><br><span class="line">        System.out.printIn();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    {</span><br><span class="line">        outputSymbols(<span class="number">5</span>, <span class="string">'*'</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="按引用传递参数"><a href="#按引用传递参数" class="headerlink" title="按引用传递参数"></a><strong>按引用传递参数</strong></h3><p>当参数通过引用传递时，当子例程内的值发生变化时，会影响调用程序中变量的值。  </p><p>下面会给出一个有关于过程<code>AdjustValuesForNextRow</code>的例子：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PROCEDURE AdjustValuesForNextRow(BYREF Spaces : INTEGER, Symbols : INTEGER)</span><br><span class="line">    Spaces ← Spaces - 1</span><br><span class="line">    Symbols ← Symbols + 2</span><br><span class="line">ENDPROCEDURE</span><br></pre></td></tr></table></figure><p>如果想要调用函数，就需要打出下面这行命令：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL AdjustValuesForNextRow(NumberOfSpaces, NumberOfSymbols)</span><br></pre></td></tr></table></figure><p>在调用该函数时，参数空格和符号的值会在过程中更改。<br>调用之后，程序代码中的变量<code>NumberOfSpaces</code>和<code>NumberOfSymbols</code>将存储从过程中传递回来的更新后的值。</p><p><br></p><p>    <strong>Python</strong>  </p><p>Python没有提供按引用传递参数的功能。相反，下面的子程序表现为一个函数并返回多个值。<br>注意，在程序的主体部分中，变量是用来接收这些值的顺序的：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">AdjustValuesForNextRow</span>(<span class="params">Spaces, Symbols</span>):</span><br><span class="line">    Spaces = Spaces - <span class="number">1</span></span><br><span class="line">    Symbols = Symbols + <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> Spaces, Symbols</span><br><span class="line"></span><br><span class="line"><span class="comment"># ******** main program starts here *********</span></span><br><span class="line"></span><br><span class="line">NumberOfSpaces = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">NumberOfSymbols = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">NumberOfSpaces, NumberOfSymbols = AdjustValuesForNextRow(NumberOfSpaces, NumberOfSymbols)</span><br><span class="line"><span class="built_in">print</span>(NumberOfSpaces)</span><br><span class="line"><span class="built_in">print</span>(NumberOfSymbols)</span><br></pre></td></tr></table></figure><p>这种将多个值作为一个单位处理的方式称为<code>tuple</code>。  </p><p><br></p><p>    <strong>VB.NET</strong></p><p>在VB.NET中，<code>ByRef</code>关键字放在每个按引用传递的参数前面，用来表示按引用传递参数：  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Module</span> Module1</span><br><span class="line">    <span class="keyword">Dim</span> NumberOfSpaces, NumberOfSymbols <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Sub</span> AdjustValuesForNextRow(<span class="keyword">ByRef</span> Spaces, <span class="keyword">ByRef</span> Symbols)</span><br><span class="line">        Spaces = Spaces - <span class="number">1</span></span><br><span class="line">        Symbols = Symbols + <span class="number">2</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Sub</span> Main()</span><br><span class="line">        NumberOfSpaces = Console.ReadLine()</span><br><span class="line">        NumberOfSymbols = Console.ReadLine()</span><br><span class="line">        AdjustValuesForNextRow(NumberOfSpaces, NumberOfSymbols)</span><br><span class="line">        Console.WriteLine(NumberOfSpaces)</span><br><span class="line">        Console.WriteLine(NumberOfSymbols)</span><br><span class="line">        Console.ReadLine()</span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Module</span></span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Java</strong></p><p>Java没有提供通过引用传递简单变量参数的功能，只有对象可以通过引用传递。<br>在Java中，数组是对象，所以数组是通过引用传递的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exl;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exl</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RowData</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="variable">spaces</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="variable">symbols</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">adjustValuesForNextRow</span><span class="params">(RowData thisRow)</span></span><br><span class="line">    {</span><br><span class="line">        thisRow.spaces--;</span><br><span class="line">        thisRow.symbols = thisRow.symbols + <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    {</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">console</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">RowData</span> <span class="variable">thisRow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RowData</span>();</span><br><span class="line">        System.out.print(<span class="string">"Enter number of spaces: "</span>);</span><br><span class="line">        thisRow.spaces = console.nextInt();</span><br><span class="line">        System.output.print(<span class="string">"Enter number of symbols: "</span>);</span><br><span class="line">        thisRow.symbols = console.nextInt();</span><br><span class="line">        adjustValuesForNextRow(thisRow);</span><br><span class="line">        System.out.printIn(thisRow.spaces);</span><br><span class="line">        System.out.printIn(thisRow.symbols);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><br></p><hr><h2 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a><strong>数组</strong></h2><h3 id="创建一维数组"><a href="#创建一维数组" class="headerlink" title="创建一维数组"></a><strong>创建一维数组</strong></h3><p>Python，VB.NET和Java从下界值为0开始计算数组元素。  </p><p>伪代码be like:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE &lt;arrayIdentifier&gt; : ARRAY[&lt;lowerBound&gt;:&lt;upperBound&gt;] OF &lt;dataType&gt;</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="语法定义和例子-15"><a href="#语法定义和例子-15" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>下表展示了语法定义：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">语言</th><th style="text-align:left">~</th></tr></thead><tbody><tr><td style="text-align:left">Python</td><td style="text-align:left">在Python中没有数组。等价的数据结构称为<strong>列表 (list)</strong>，列表是一组有序的元素序列，它们的数据类型不必相同。</td></tr><tr><td style="text-align:left">VB.NET</td><td style="text-align:left"><code>Dim &lt;arrayIdentifier&gt;(&lt;upperBound&gt;) As &lt;dataType&gt;</code></td></tr><tr><td style="text-align:left">Java</td><td style="text-align:left"><code>&lt;datatype&gt;[] &lt;arrayIdentifier&gt;;</code> <br> <code>&lt;arrayIdentifier&gt; = new int[&lt;upperBound&gt;+1];</code></td></tr></tbody></table></div><p><br></p><p><br></p><p>举出一些例子：  </p><p>    <strong>伪代码</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DECLARE List1 : ARRAY[1:3] OF STRING // 3 elements in this list</span><br><span class="line">DECLARE List2 : ARRAY[0:5] OF INTEGER // 6 elements in this list</span><br><span class="line">DECLARE List3 : ARRAY[1:100] OF INTEGER // 100 elements in this list</span><br><span class="line">DECLARE List4 : ARRAY[0:25] OF STRING // 26 elements in this list</span><br></pre></td></tr></table></figure><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List1 = []</span><br><span class="line">List1.append(<span class="string">"Fred"</span>)</span><br><span class="line">List1.append(<span class="string">"Jack"</span>)</span><br><span class="line">List1.append(<span class="string">"Ali"</span>)</span><br><span class="line"></span><br><span class="line">List2 = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">List3 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)]</span><br><span class="line"></span><br><span class="line">Alist = [<span class="string">""</span>] * <span class="number">26</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>List1：由于没有数据类型声明和列表声明，生成列表的唯一方法是初始化一个列表。<br>然后可以向现有列表中添加元素。  </p><p>List2：可以将元素包含在<code>[]</code>中。  </p><p>List3：你也可以使用一个循环来为列表添加内容。  </p><p>AList：可以提供一个初始值，乘以所需元素的数量。<code>""</code>填入初始值。  </p><p><br></p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> List1 <span class="keyword">As</span> <span class="type">String</span> () = {<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>}</span><br><span class="line"></span><br><span class="line"><span class="keyword">Dim</span> List2(<span class="number">5</span>) <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Dim</span> List3(<span class="number">100</span>) <span class="keyword">As</span> <span class="type">Integer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Dim</span> AList(<span class="number">0</span> <span class="keyword">To</span> <span class="number">25</span>) <span class="keyword">As</span> <span class="type">String</span></span><br></pre></td></tr></table></figure><p>可以像List1一样，在声明时初始化数组。<br>注意，List3有101个元素。<br>你可以使用范围作为数组的维度(如AList)，但下界必须为0。</p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String[] list1 = {<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>};</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] list2;</span><br><span class="line">list2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] list3;</span><br><span class="line">list3 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">String[] aList;</span><br><span class="line">aList = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">25</span>];</span><br></pre></td></tr></table></figure><p>同样，你可以在声明时初始化数组(如list1)。</p><p><br></p><hr><h3 id="访问一维数组-1"><a href="#访问一维数组-1" class="headerlink" title="访问一维数组"></a><strong>访问一维数组</strong></h3><p>在伪代码中，需要使用一个<strong>索引值 (Index value)</strong>来访问数组中的一个特定内容：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;arrayIdentifier&gt;[x]</span><br></pre></td></tr></table></figure><p><br></p><hr><p>下面开始举例：  </p><p>    <strong>伪代码</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NList[25] = 0  // set 25th element to zero(0)</span><br><span class="line">AList[3] = "D"  // set 3rd element to letter D</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NList[<span class="number">24</span>] = <span class="number">0</span></span><br><span class="line">AList[<span class="number">3</span>] = <span class="string">"D"</span></span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>VB.NET</strong></p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NList(<span class="number">25</span>) = <span class="number">0</span></span><br><span class="line">AList(<span class="number">3</span>) = <span class="string">"D"</span></span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nList[<span class="number">25</span>] = <span class="number">0</span>;</span><br><span class="line">aList[<span class="number">3</span>] = <span class="string">"D"</span>;</span><br></pre></td></tr></table></figure><p>在Python中，可使用<code>print(&lt;list&gt;)</code>打印列表的全部内容。<br>在VB.NET和Java中，你需要使用循环来打印数组中的所有元素。  </p><p><br></p><hr><h3 id="创建二维数组"><a href="#创建二维数组" class="headerlink" title="创建二维数组"></a><strong>创建二维数组</strong></h3><p>伪代码be like:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE &lt;identifier&gt; : ARRAY[&lt;lBound1&gt;:&lt;uBound1&gt;,&lt;lBound2&gt;:&lt;uBound2&gt;] OF &lt;dataType&gt;</span><br></pre></td></tr></table></figure><p><br></p><hr><h3 id="语法定义和例子-16"><a href="#语法定义和例子-16" class="headerlink" title="语法定义和例子"></a><strong>语法定义和例子</strong></h3><p>下表展示了语法定义：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">语言</th><th style="text-align:left">~</th></tr></thead><tbody><tr><td style="text-align:left">Python</td><td style="text-align:left">在Python中没有数组。等价的数据结构称为<strong>列表 (list)</strong>。</td></tr><tr><td style="text-align:left">VB.NET</td><td style="text-align:left"><code>Dim &lt;arrayIdentifier&gt;(&lt;uBound1, uBound2&gt;) As &lt;dataType&gt;</code></td></tr><tr><td style="text-align:left">Java</td><td style="text-align:left"><code>&lt;datatype&gt; &lt;arrayIdentifier&gt;;</code> <br> <code>&lt;arrayIdentifier&gt; = new &lt;datatype&gt;[uBound1][uBound2];</code></td></tr></tbody></table></div><p><br></p><p><br></p><p>举出一些例子：  </p><p>    <strong>伪代码</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DECLARE Board : ARRAY[1:6, 1:7] OF INTEGER</span><br></pre></td></tr></table></figure><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Board = [[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">         [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">         [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">         [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">         [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">         [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">Board = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line">Board = [[<span class="number">0</span>] * <span class="number">7</span>] * 6R</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> Board(<span class="number">6</span>, <span class="number">7</span>) <span class="keyword">As</span> <span class="type">Integer</span></span><br></pre></td></tr></table></figure><p>元素的编号从0到给定的数字。这个声明多了一行和一列。<br>然而，如果忽略第0行和第0列，该算法可能更容易转换为程序代码。  </p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] board = {</span><br><span class="line">    {<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>},</span><br><span class="line">    {<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>},</span><br><span class="line">    {<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>},</span><br><span class="line">    {<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>},</span><br><span class="line">    {<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>},</span><br><span class="line">    {<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>},</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] board;</span><br><span class="line">board = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>][<span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>2维数组的初始化方式与一位数组类似。记住元素都是从0开始编号的。  </p><p><br></p><hr><h3 id="访问二维数组"><a href="#访问二维数组" class="headerlink" title="访问二维数组"></a><strong>访问二维数组</strong></h3><p>在伪代码中，需要使用一个<strong>索引值 (Index value)</strong>来访问数组中的一个特定内容：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;arrayIdentifier&gt;[x,y]</span><br></pre></td></tr></table></figure><p><br></p><hr><p>下面开始举例：  </p><p>    <strong>伪代码</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Board[3,4] ← 0 // sets the element in row 3 and column 4 to zero</span><br></pre></td></tr></table></figure><p><br></p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Board[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>在Python中，元素从0开始编号，因此[3]访问的是第四个元素。  </p><p><br></p><p>    <strong>VB.NET</strong></p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Board(<span class="number">3</span>, <span class="number">4</span>) = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>我们忽略第0行和第0列：这里说的就是第三行第四列。  </p><p><br></p><p>    <strong>Java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">board[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>同样在Java中，元素从0开始编号，因此[3]访问的是第四个元素。  </p><p><br></p><hr><h2 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a><strong>文本文件</strong></h2><h3 id="向文本文件中写入"><a href="#向文本文件中写入" class="headerlink" title="向文本文件中写入"></a><strong>向文本文件中写入</strong></h3><p>伪代码：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OPENFILE &lt;filename&gt; FOR WRITE          // open the file for writing</span><br><span class="line">WRITEFILE &lt;filename&gt;, &lt;stringValue&gt;    // write a line of text to the file</span><br><span class="line">CLOSEFILE &lt;filename&gt;                   // close file</span><br></pre></td></tr></table></figure><p><br></p><p>下面的代码示例演示了如何用这三种语言分别打开、写入和关闭名为<code>SampleFile.txt</code>的文件。<br>如果文件已经存在，只要<code>open file</code>命令分配了文件句柄，它就会被覆盖。</p><p><br></p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FileHandle = <span class="built_in">open</span>(<span class="string">"SampleFile.TXT"</span>, <span class="string">"w"</span>)</span><br><span class="line">FileHandle.write(LineOfText)</span><br><span class="line">FileHandle.close()</span><br></pre></td></tr></table></figure><p>调用<code>open</code>函数时要指定文件名和模式(‘w’表示写入)。<br>要写入到文件中的文本行必须包含换行符<code>\n</code>，以便移动到文本文件的下一行。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> FileHandle <span class="keyword">As</span> IO.StreamWriter</span><br><span class="line"><span class="keyword">Dim</span> LineOfText <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">FileHandle = <span class="built_in">New</span></span><br><span class="line">IO.StreamWriter(<span class="string">"SampleFile.TXT"</span>)</span><br><span class="line">FileHandle.WriteLine(LineOfText)</span><br><span class="line">FileHandle.Close()</span><br></pre></td></tr></table></figure><p>可以通过一个名为<code>StreamWriter</code>的对象访问该文件。  </p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">fileHandle</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">FileWriter</span>(<span class="string">"SampleFile.TXT"</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">printLine</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">PrintWriter</span> (fileHandle)l</span><br><span class="line">String lineOfText;</span><br><span class="line">printLine.printf(<span class="string">"%s"</span>+<span class="string">"%n"</span>, lineOfText);</span><br><span class="line">printLine.close();</span><br></pre></td></tr></table></figure><p>输入输出操作会抛出异常。<br>管理它们的最简单方法是将你的主标题更改为: <code>public static void main(String[] args); throws IOException</code></p><p><br></p><hr><h3 id="从文本文件中读取"><a href="#从文本文件中读取" class="headerlink" title="从文本文件中读取"></a><strong>从文本文件中读取</strong></h3><p>伪代码：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OPENFILE &lt;filename&gt; FOR READ             // open the file for writing</span><br><span class="line">READFILE &lt;filename&gt;, &lt;stringVariable&gt;    // read a line of text from the file</span><br><span class="line">CLOSEFILE &lt;filename&gt;                     // close file</span><br></pre></td></tr></table></figure><p><br></p><p>继续用<code>SampleFile.txt</code>举例：    </p><p><br></p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FileHandle = <span class="built_in">open</span>(<span class="string">"SampleFile.TXT"</span>, <span class="string">"r"</span>)</span><br><span class="line">LineOfText = FileHandle.readline()</span><br><span class="line">FileHandle.close()</span><br></pre></td></tr></table></figure><p>调用<code>open</code>函数时要指定文件名和模式(‘r’表示读取)。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> FileHandle <span class="keyword">As</span> IO.StreamWriter</span><br><span class="line"><span class="keyword">Dim</span> LineOfText <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line">FileHandle = <span class="built_in">New</span> IO.StreamReader(<span class="string">"SampleFile.TXT"</span>)</span><br><span class="line">LineOfText = FileHandle.ReadLine()</span><br><span class="line">FileHandle.Close()</span><br></pre></td></tr></table></figure><p>同样，通过一个名为<code>StreamWriter</code>的对象访问该文件。  </p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fileHandle</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">FileReader</span>(<span class="string">"SampleFile.TXT"</span>);</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">textReader</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">BufferedReader</span>(fileHandle);</span><br><span class="line"><span class="type">String</span> <span class="variable">lineOfText</span> <span class="operator">=</span> textReader.readLine();</span><br><span class="line">textReader.close()</span><br></pre></td></tr></table></figure><p>还有其他库类可用于输入/输出，例如Scanner。  </p><p><br></p><hr><h3 id="追加到文本文件"><a href="#追加到文本文件" class="headerlink" title="追加到文本文件"></a><strong>追加到文本文件</strong></h3><p>伪代码：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OPENFILE &lt;filename&gt; FOR APPEND        // open the file for append</span><br><span class="line">READFILE &lt;filename&gt;, &lt;stringValue&gt;    // write a line of text from the file</span><br><span class="line">CLOSEFILE &lt;filename&gt;                  // close file</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><p>继续用<code>SampleFile.txt</code>举例：    </p><p><br></p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FileHandle = <span class="built_in">open</span>(<span class="string">"SampleFile.TXT"</span>, <span class="string">"a"</span>)</span><br><span class="line">FileHandle.write(LineOfText)</span><br><span class="line">FileHandle.close()</span><br></pre></td></tr></table></figure><p>调用<code>open</code>函数时要指定文件名和模式(‘a’表示附加)。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> FileHandle <span class="keyword">As</span> IO.StreamWriter</span><br><span class="line">FileHandle = <span class="built_in">New</span></span><br><span class="line">IO.StreamWriter(<span class="string">"SampleFile.TXT"</span>, <span class="literal">True</span>)</span><br><span class="line">FileHandle.WriteLine(LineOfText)</span><br><span class="line">FileHandle.Close()</span><br></pre></td></tr></table></figure><p>同样，通过一个名为<code>StreamWriter</code>的对象访问该文件。<br>额外的参数<code>True</code>告诉系统我们需要将元素添加到对象中。</p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fileHandle</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">FileReader</span>(<span class="string">"SampleFile.TXT"</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">printLine</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">PrintWriter</span>(fileHandle);</span><br><span class="line">String lineOfText;</span><br><span class="line">printLine.printf(<span class="string">"%s"</span>+<span class="string">"%n"</span>, lineOfText);</span><br><span class="line">printLine.close();</span><br></pre></td></tr></table></figure><p>输入输出操作会抛出异常。<br>最简单的方法是将你的主标题改为:  <code>public static void main(String[] args) throws IOException</code></p><p><br></p><hr><h3 id="文件结束标记-EOF"><a href="#文件结束标记-EOF" class="headerlink" title="文件结束标记 (EOF)"></a><strong>文件结束标记 (EOF)</strong></h3><p><strong>EOF，为End Of File的缩写，通常在文本的最后存在此字符表示资料结束。</strong></p><p>伪代码：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OPENFILE "Test.txt" FOR READ</span><br><span class="line">WHILE NOT EOF("Test.txt") DO</span><br><span class="line">    READFILE "Test.txt", TextString</span><br><span class="line">    OUTPUT TextString</span><br><span class="line">ENDWHILE</span><br><span class="line">CLOSEFILE "Test.txt"</span><br></pre></td></tr></table></figure><p><br></p><p>下面的代码示例演示了如何用这三种语言分别读取和输出文件的内容。三段语言都需要当碰到EOF后终止读取：  </p><p><br></p><p>    <strong>Python</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FileHandle = <span class="built_in">open</span>(<span class="string">"Test.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line">LineOfText = FileHandle.readline()</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(LineOfText) &gt; <span class="number">0</span>:</span><br><span class="line">    LineOfText = FileHandle.readline()</span><br><span class="line">    <span class="built_in">print</span>(LineOfText)</span><br><span class="line">FileHandle.close()</span><br></pre></td></tr></table></figure><p>在Python中没有显式的EOF函数。<br>但是，当读取的文本行只包含文件结束标记时，该文本行的长度为0。可以运用这点达成同样的效果。  </p><p><br></p><p>    <strong>VB.NET</strong>  </p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> LineOfText <span class="keyword">As</span> <span class="type">String</span></span><br><span class="line"><span class="keyword">Dim</span> FileHandle <span class="keyword">As</span> System.IO.StreamReader</span><br><span class="line">FileHandle = <span class="built_in">New</span></span><br><span class="line">System.IO.StreamReader(<span class="string">"Test.txt"</span>)</span><br><span class="line"><span class="keyword">Do</span> <span class="keyword">Until</span> FileHandle.EndOfStream</span><br><span class="line">    LineOfText = FileHandle.ReadLine()</span><br><span class="line">    Console.WriteLine(LineOfText)</span><br><span class="line"><span class="keyword">Loop</span></span><br><span class="line">FileHandle.Close()</span><br></pre></td></tr></table></figure><p>当检测到文件结束标记时，<code>EndOfStream</code>就会返回True，循环就会结束。  </p><p><br></p><p>    <strong>Java</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="type">FileReader</span> <span class="variable">fileHandle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">"Test.txt"</span>);</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">textReader</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">BufferedReader</span>(fileHandle);</span><br><span class="line"><span class="type">String</span> <span class="variable">lineOfText</span> <span class="operator">=</span> textReader.readLine();</span><br><span class="line"><span class="keyword">while</span> (lineOfText != <span class="literal">null</span>)</span><br><span class="line">{</span><br><span class="line">    System.out.printIn(lineOfText);</span><br><span class="line">    lineOfText = textReader.readLine();</span><br><span class="line">}</span><br><span class="line">textReader.close();</span><br></pre></td></tr></table></figure><p>在Java里面也没有专门用于EOF函数。<br>但是，当读取的文本行只包含文件结束标记时，该文本行实际上是空的。我们可以运用这点达成同样的效果。    </p><p><br></p><hr><h1 id="第十五章：软件开发"><a href="#第十五章：软件开发" class="headerlink" title="第十五章：软件开发"></a><strong>第十五章：软件开发</strong></h1><h2 id="程序开发周期"><a href="#程序开发周期" class="headerlink" title="程序开发周期"></a><strong>程序开发周期</strong></h2><p>开发软件需要经历很多不同的阶段。<br>首先我们可以使用结构化英语，伪代码或者流程图来帮助我们理清程序的结构，然后再使用实际的语言编写。  </p><p>当需要大型软件系统来解决大问题时，这些阶段就会变得更加正式，特别是当更多的人参与开发时。<br>在设计解决方案之前，需要首先对问题进行分析。<br>当程序正常工作并被使用时，可能会出现需要修改的问题，这就是所谓的<strong>维护 (Maintenance)</strong>。  </p><p>下面来介绍程序开发周期中的每一步：</p><p><br></p><h3 id="分析-Analysis"><a href="#分析-Analysis" class="headerlink" title="分析 (Analysis)"></a><strong>分析 (Analysis)</strong></h3><p>解决问题的第一步是调查问题和当前的系统(如果存在的话)。<br>这个问题需要明确而精确地定义，然后再起草一份“需求说明书”。  </p><p>下一步就是思考解决方案。一个问题可能会有很多不同的解决方案。再分析这一步，我们有必要去思考这些解决方案中，哪一个是最合适，最有效的。  </p><p>第三步就是决定如何解决问题：  </p><ul><li><strong>Bottom-up</strong>：从一个小问题开始，然后在它的接触上一直向上构建新的内容。  </li><li><strong>Top-down</strong>：使用伪代码，流程图或者结构图逐步细化你的代码。  </li></ul><p><br></p><hr><h3 id="设计-Design"><a href="#设计-Design" class="headerlink" title="设计 (Design)"></a><strong>设计 (Design)</strong></h3><p>到这一步你的心中应该已经有了一个确切的解决方案了。但是我们如何细致的设计解决方案？  </p><p>我们可以使用一个<strong>标识表 (Identifier table)</strong>，把我们需要考虑的数据全部写进表里。这有助于我们去考虑所有的数据以及它们的结构。比如说，我们到底是需要一个一维数组或者二维数组处理数据？我们是不是需要创立一个文件夹来专门存放长期数据？  </p><p>随后使用伪代码或者流程图来写出你的程序。</p><p>这些都是设计这一步的任务。  </p><p><br></p><hr><h3 id="编程-Coding"><a href="#编程-Coding" class="headerlink" title="编程 (Coding)"></a><strong>编程 (Coding)</strong></h3><p>设计解决方案后，可能需要选择合适的高级编程语言。<br>如果你会一种以上的编程语言，你必须权衡每一种语言的利弊。<br>上一章提到了各种语言 <em>(实际上只有三种语言)</em> 的强项与弱项。  </p><p>在这一步，我们会将伪代码转化成真真切切的代码。<br>当你开始编写程序时，你可能会发现程序在编译之前需要尝试好几次。当它最终完成时，我们就可以执行它。<br>有些时候程序可能会炸，在这种情况下，我们需要调试代码。<br>但是当我们的程序已经成功运行没有问题的时候，我们还需要考虑程序是否做了它应该做的事情。  </p><p><br></p><hr><h3 id="测试-Testing"><a href="#测试-Testing" class="headerlink" title="测试 (Testing)"></a><strong>测试 (Testing)</strong></h3><p>只有彻底的测试程序才能确保程序在所有情况下都能正常工作。  </p><p><br></p><hr><h3 id="程序开发生命周期"><a href="#程序开发生命周期" class="headerlink" title="程序开发生命周期"></a><strong>程序开发生命周期</strong></h3><p>有几种不同的开发方法。这包括<strong>瀑布式 (Waterfall)</strong>、<strong>迭代式 (Iterative)</strong>和<strong>快速应用程序开发模型 (Rapid application development model)</strong>。  </p><p>程序开发生命周期遵循分析、设计、编码(实现)、测试和维护的定义阶段。<br>当维护时需要对程序做出进一步调整时，开发就会重新开始，从而形成一个循环。如下图所示：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB60da65bc6e27483d4d0a78ea394c3791?method=download&amp;shareKey=fbf82d48e43b6264e620741c2af24167" alt=""></p><p><br></p><hr><h3 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a><strong>瀑布模型</strong></h3><p>下图展示了瀑布式开发周期的示意图：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBe697a810daebb8e229ec272ace953615?method=download&amp;shareKey=8dac70db8706273056bfe209cffc1ce8" alt=""></p><p>图中向下的箭头表示一个阶段的结果被输入到下一个阶段。<br>返回到早期阶段的箭头反映了这样一个事实:在早期的开发阶段需要完成当前阶段更多的工作。</p><p>瀑布模型的好处有：  </p><ul><li>简单易懂，因为模型的每一个阶段都定义的十分清楚。  </li><li>由于模型中阶段的固定性，整个周期易于管理，而且每一个阶段都有特定的结果和成果。  </li><li>每一个阶段都需要被处理并完成。 </li><li>瀑布模型适用于<strong>需求被充分理解的小型项目</strong>。  </li></ul><p><br></p><p>瀑布模型的坏处有：  </p><ul><li>再整个开发周期的后期才能出现一个完全可用的软件。  </li><li>对于复杂并面向对象的项目来说，这个开发模式不是特别的适合。  </li><li>对于需要长期进行的项目来说，这个开发模式也不是很适合。  </li><li>没法适应不断变化的需求。  </li><li>很难衡量阶段性的发展。  </li><li>集成部分是在最后完成的，也就是说，如果有潜在的问题或者漏洞是很难发现的。  </li></ul><p><br></p><hr><h3 id="迭代模型"><a href="#迭代模型" class="headerlink" title="迭代模型"></a><strong>迭代模型</strong></h3><p>迭代生命周期模型并不试图从完整的需求规范开始。相反，开发从实现程序需求的一个小子集开始。<br>重复的(迭代的)评审以确定进一步的需求，最终形成完整的系统。</p><p>好处如下：  </p><ul><li>在开发的早期阶段有一个早期Demo这就允许团队更容易找到功能或者设计缺陷。在开发的早期阶段发现问题意味着可以更快地采取纠正措施。  </li><li>有些功能可以在周期的早期快速开发。  </li><li>我们在早期可以周期性的获得结果。  </li><li>我们甚至可以规划并行发展。 </li><li>易于衡量进步和进展。 </li><li>变更项目范围或者需求的成本更低。  </li><li>测试和调试较小的程序子集十分的容易。 </li><li>在迭代过程中可以很轻易地识别并解决风险。  </li><li>更容易管理风险，因为较高风险的风险会被优先考虑。  </li><li>每一次增量更新都可以向客户交付产品。  </li><li>在每个增量更新中确定的问题，挑战和风险都可以被应用到下一个增量更新中。  </li><li>更适合<strong>大型和关键任务项目</strong>。  </li><li>在这个生命周期中，软件会被尽早地生产出来。这有助于团队从客户那里听到有关产品的评估和反馈。  </li></ul><p><br></p><p>当然也有坏处：  </p><ul><li>只有大型软件开发项目才会从这个生命周期中收益。因为很难再将小型软件系统继续拆拆拆成更小的部分了。  </li><li>可能会需要很多的资源，包括人力物力。  </li><li>可能会出现设计问题，因为并非所有需求都在整个生命周期的开始时收集。  </li><li>定义增量的时候可能需要定义整个系统。  </li></ul><p><br></p><hr><h3 id="快速应用程序开发模型"><a href="#快速应用程序开发模型" class="headerlink" title="快速应用程序开发模型"></a><strong>快速应用程序开发模型</strong></h3><p>RAD是一种使用最小计划的软件开发方法。相反，它规划原型来解决问题。<br><strong>原型 (Prototype)</strong>是解决方案的一部分的工作模型。</p><p>在快速应用开发模型中，模块作为原型并行开发，并集成以形成完整的产品，从而更快地交付产品。没有详细的预先规划，并且随时可以在开发过程中进行更改。  </p><p>特点就是分析、设计、编码和测试阶段被合并到一系列短的迭代开发周期中。  </p><p>优点：  </p><ul><li>可以适应不断变化的需求。</li><li>易于衡量进步。  </li><li>在短时间内，人越少，生产力越高。</li><li>开发时间可以大幅减少。</li><li>组建的可复用性大大增加。  </li><li>适用于<strong>基于组件和可扩展的程序</strong>。 </li><li>可以进行快速的审查。  </li><li>该模型鼓励用户去积极反馈问题。</li><li>在集成所有模块之间就解决了许多集成中可能出现的问题。  </li></ul><p><br></p><p>缺点：  </p><ul><li>只有模块化的程序才能够使用RAD构建。  </li><li>需要高水平的开发人员和设计师。  </li><li>需要客户在开发的过程中全程参与。  </li><li>仅适合开发时间较短的项目。</li></ul><p><br></p><hr><h2 id="使用结构图设计程序"><a href="#使用结构图设计程序" class="headerlink" title="使用结构图设计程序"></a><strong>使用结构图设计程序</strong></h2><p>另一种模块化设计方法是选择子任务，然后构建一个<strong>结构图 (Structure chart)</strong>来显示模块之间的相互关系。<br>结构图中的每个框代表一个模块，其中的每一层都是上一层的细化。</p><p>结构图还显示了模块之间的接口，变量。这些变量被称为<strong>参数 (Parameters)</strong>。<br>向下层模块传参显示为向下指向的箭头。<br>向上层模块传参显示为向上指向的箭头。</p><article class="message is-info"><div class="message-body"><b>Structure chart: a graphical representation of the modular structure of a solution.</b><br><b>Parameter: a value passed between modules</b></div></article> <p><br></p><p>下图显示了计算两个数字平均值的模块的结构图。<br>顶层的方框是模块的名称，它被细化成了下一级的三个子任务。<br><code>INPUT numbers</code>(参数<code>Number1</code>和<code>Number2</code>)被传递到<code>Calculate average</code>子任务中，然后<code>Average</code>参数被传递到<code>OUTPUT average</code>子任务中。<br>箭头显示了参数如何在模块之间传递。传参的层级被称为”interface”。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBc564ae4358133cb655f147a2b2760aa4?method=download&amp;shareKey=9aabe1c235840cc0a405704fa2a96bba" alt=""></p><p><br></p><p>结构图还可以显示控制信息，比如选择和重复。<br>在第十二章我们举过一个有关于猜数字的例子，这里我们把它模块化先：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB5999b0d7e2cec85554d922cbfe494b9f?method=download&amp;shareKey=c937693c229fa4e1ed50e4704de0e9f5" alt=""></p><p>其中的<strong>菱形表示一个条件，要么为真，要么为假。</strong></p><p><br></p><p>下图显示了绘制金字塔程序的结构图。<br>最上面的半圆形箭头表示箭头下方模块的重复，标签显示重复发生时的情况。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB1c8a00096191e1b7fcdfac95b8bfe82b?method=download&amp;shareKey=def37509a231ad83a03421f6a279500d" alt=""></p><p><br></p><p>结构图帮助程序员可视化模块如何相互关联以及它们如何相互连接。当考虑一个更大的问题时，这变得更加重要。<br>下面给出了名为”Connect 4”游戏的程序的结构图。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB26b804f3801358c6a5c4b7934697dc1e?method=download&amp;shareKey=2f051cd5f32512d0e3bb99aab1bac796" alt=""></p><p>在图片中我们能看见传参过程中有不同的箭头。  </p><ul><li>实心圆箭头表示传递的值是一个布尔值。  </li><li>双头箭头表示变量值在模块内更新。  </li></ul><p><br></p><hr><h2 id="从结构图中写出伪代码"><a href="#从结构图中写出伪代码" class="headerlink" title="从结构图中写出伪代码"></a><strong>从结构图中写出伪代码</strong></h2><p>让我们再来将目光聚集到上面的金字塔问题。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB1c8a00096191e1b7fcdfac95b8bfe82b?method=download&amp;shareKey=def37509a231ad83a03421f6a279500d" alt=""></p><p>在原来的例子中，创建模块时没有使用结构图，所有变量都是全局变量。<br>现在我们将使用局部变量和参数。<br>使用局部变量和参数的原因是因为模块是自包含的，对变量的任何更改不会对其他地方的变量值产生意外的影响。  </p><p>顶层模块<code>Pyramid</code>调用了4个模块。<br>当一个模块被调用时，我们在模块标识符后面的括号中提供参数。伪代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">MODULE Pyramid</span><br><span class="line">    CALL SetValues(NumberOfSymbols, NumberOfSpaces, Symbol, MaxNumberOfSymbols)</span><br><span class="line">    REPEAT</span><br><span class="line">        CALL OutputSpaces(NumberOfSpaces)</span><br><span class="line">        CALL OutputSymbols(NumberOfSymbols, Symbol)</span><br><span class="line">        CALL AdjustValesForNextRow(NumberOfSpaces, NumberOfSymbols)</span><br><span class="line">    UNTIL NumberOfSymbols &gt; MaxNumberOfSymbols</span><br><span class="line">ENDMODULE</span><br><span class="line"></span><br><span class="line">PROCUDURE SetValues(NumberOfSymbols, NumberOfSpaces, Symbol, MaxNumberOfSymbols)</span><br><span class="line">    INPUT Symbol</span><br><span class="line">    CALL InputMaxNumberOfSymbols</span><br><span class="line">    NumberOfSpaces ← (MaxNumberOfSymbols - 1) / 2</span><br><span class="line">    NumberOfSymbols ← 1</span><br><span class="line">ENDPROCEDURE</span><br><span class="line"></span><br><span class="line">PROCEDURE InputMaxNumberOfSymbols(MaxNumberOfSymbols)</span><br><span class="line">    REPEAT</span><br><span class="line">        INPUT MaxNumberOfSymbols</span><br><span class="line">    UNTIL MaxNumberOfSymbols MOD 2 = 1</span><br><span class="line">ENDPROCEDURE</span><br><span class="line"></span><br><span class="line">PROCUDURE OutputSpaces(NumberOfSpaces)</span><br><span class="line">    FOR Count ← 1 TO NumberOfSpaces</span><br><span class="line">        OUTPUT Space // without moving to next line</span><br><span class="line">    NEXT Count</span><br><span class="line">ENDPROCEDURE</span><br><span class="line"></span><br><span class="line">PROCEDURE OutputSymbols(NumberOfSYMBOLS, Symbol)</span><br><span class="line">    FOR Count ← 1 TO NumberOfSymbols</span><br><span class="line">        OUTPUT Symbol // without moving to next line</span><br><span class="line">    NEXT Count</span><br><span class="line">    OUTPUT Newline // move to the next line</span><br><span class="line">ENDPROCEDURE</span><br><span class="line"></span><br><span class="line">PROCEDURE AdjustValuesForNextRow(NumberOfSpaces, NumberOfSymbols)</span><br><span class="line">    NumberOfSpaces ← NumberOfSpaces - 1</span><br><span class="line">    NumberOfSymbols ← NumberOfSymbols + 2</span><br><span class="line">ENDPROCEDURE</span><br></pre></td></tr></table></figure><p><br></p><hr><h2 id="状态转换图与程序设计"><a href="#状态转换图与程序设计" class="headerlink" title="状态转换图与程序设计"></a><strong>状态转换图与程序设计</strong></h2><p>我们的计算机系统可以看作是一个<strong>有限状态机(Finite State Machine, FSM)</strong>。<br>FSM有一个叫做start的状态。输入进FSM的指令会导致一种状态到另一种状态的转换。  </p><p>FSM的状态信息可以用<strong>状态转换表 (State-transition table)</strong>来表示。  </p><article class="message is-info"><div class="message-body"><b>Finite state machine (FSM): a machine that consists of a fixed set of possible states with a set of inputs that change the state and a set of possible outputs.</b><br><b>State-transition table: a table that gives information about the states of an FSM</b></div></article> <p><br></p><p>下表展示了一个展示FSM状态的状态转换表：  </p><ul><li>如果状态为S1，则a的输入不会导致状态改变。  </li><li>如果状态为S1，则b的一个输入将S1转换为S2。  </li><li>如果状态为S2，则b的输入不会改变状态。  </li><li>如果处于S2状态，则a的输入将S2转换为Sl。  </li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">input</th><th style="text-align:center">input name</th><th style="text-align:left">current state</th><th style="text-align:left">current state</th></tr></thead><tbody><tr><td style="text-align:left"></td><td style="text-align:center"></td><td style="text-align:left">S1</td><td style="text-align:left">S2</td></tr><tr><td style="text-align:left">input</td><td style="text-align:center">a</td><td style="text-align:left"><code>S1</code></td><td style="text-align:left"><code>S1</code></td></tr><tr><td style="text-align:left">input</td><td style="text-align:center">b</td><td style="text-align:left"><code>S2</code></td><td style="text-align:left"><code>S2</code></td></tr></tbody></table></div><p><br></p><p><strong>状态转移图 (State-transition graph)</strong>可以用来描述有限状态机的行为。<br>下图开始状态为S1。开始状态会用一个实心圆球的箭头表示。<br>如果有限状态机有一个最终状态(也称为<strong>停机状态 (Halting state)</strong>)，则用一个双圆圈状态来表示。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB0d67ad6b45126f4a8ee3d887d532aee0?method=download&amp;shareKey=1e3092bc349c47a581a15704ae2efa00" alt=""></p><p><br></p><article class="message is-info"><div class="message-body"><b>State-transition diagram: a diagram that describes the behaviour of an FSM.</b></div></article> <p><br></p><p>如果输入产生输出，则用竖线表示。<br>例如，如果当前状态为S1，b的输入产生了一个输出c，并将FSM转换为S2状态。这时候就会使用竖线隔开，表示输入输出。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBecea7fbf819b6c12f2ae69defd98f4d0?method=download&amp;shareKey=43b2f21937b18d3a84fe167e48bc1d39" alt=""></p><p>FSM还有一个别称：”Mealy Machine”。  </p><p><br></p><hr><h2 id="错误的类型"><a href="#错误的类型" class="headerlink" title="错误的类型"></a><strong>错误的类型</strong></h2><h3 id="为什么会发生错误-amp-我们如何找到它们"><a href="#为什么会发生错误-amp-我们如何找到它们" class="headerlink" title="为什么会发生错误 & 我们如何找到它们"></a><strong>为什么会发生错误 &amp; 我们如何找到它们</strong></h3><p>软件可能会因为下面的这些因素而没有按照预期的想法工作：  </p><ul><li>程序员在编程序的时候出现了错误。  </li><li>没有科学的在规划阶段指定需求。  </li><li>软件设计师犯了一个设计错误。  </li><li>UI设计的贼差，所以说用户可能会在使用时使程序出现问题。  </li><li>计算机硬件故障。  </li></ul><p><br></p><p>如何发现错误?<br>最终用户可能会报告一个错误，这无疑是不利于软件开发人员的声誉的。所以说，我们需要尽可能在软件发布之前进行测试，并修复尽可能多的漏洞。<br>研究表明，错误发现得越早，修复它的成本就越低。<br>软件在整个开发过程中都进行测试是非常重要的。</p><p>测试的目的是发现错误。著名的荷兰计算机科学家Edsger Dijkstra说:“程序测试可以用来显示bug的存在，但永远不能显示它们的不存在”。 (<em>每日名言</em>)  </p><p>查找<strong>语法错误 (Syntax errors)</strong>很容易。编译器/解释器会为你找到它们，并且通常会给你一个提示，告诉你哪里出了问题。  </p><p>根据开发环境编辑器的不同，编辑器可能会标记出一些语法错误，因此您可以在开发过程中纠正这些错误。<br>语法错误是一种“语法 (grammatical)”错误，指的是程序语句没有遵循高级语言结构的规则。</p><article class="message is-info"><div class="message-body"><b>Syntax error: an error in which a program statement does not follow the rules of the language.</b></div></article> <p><br></p><p>有些语法错误可能只有在使用解释器或编译器翻译程序时才会变得明显。<br>解释器和编译器的工作方式不同。一旦程序成功编译后，你就知道不会再有语法错误了。</p><p>但是对于解释型程序，情况并非如此：只有即将执行的语句才会进行语法检查。<br>因此，如果你的程序没有经过彻底的测试，它甚至可能还有语法错误。</p><p>更难以发现的是<strong>逻辑错误 (Logic errors)</strong>和<strong>运行时错误 (Runtime errors)</strong>。<br>当程序执行意外停止或“崩溃”或进入无限循环并“冻结”时，发生的就是运行时错误。</p><article class="message is-info"><div class="message-body"><b>Logic error: an error in the logic of the solution that causes it not to behave as intended.</b><br><b>Run-time error: an error that causes program execution to crash or freeze.</b></div></article> <p><br></p><p>这两种类型的错误都只能通过仔细的测试才能找到。<br>这种错误的危险在于，它们可能只会在某些情况下出现。<br>如果一个程序每次执行时都崩溃，那么很明显有错误。<br>如果程序被频繁地使用，并且看起来一直在工作，直到某组数据导致了故障，那么在不造成严重后果的情况下很难发现故障。  </p><p><br></p><hr><h2 id="测试程序的方法"><a href="#测试程序的方法" class="headerlink" title="测试程序的方法"></a><strong>测试程序的方法</strong></h2><h3 id="存根测试"><a href="#存根测试" class="headerlink" title="存根测试"></a><strong>存根测试</strong></h3><p><strong>存根测试 (Stub testing)</strong></p><p>在开发用户界面时，您可能希望在实现所有功能之前对其进行测试。<br>你可以为每个过程编写一个”存根 (Stub)”。  </p><p>存根(stub)和模拟(mocking)一样，意味着创建一个替身，但存根只模拟行为，而不是整个对象。<br>当你的实现只与对象的特定行为交互时，可以使用此方法。<br>比如说你想要测试你的主程序，但是你的每一个模块还没有完成，就可以使用Stub testing，通过定义每一个模块应输出的内容，来做到测试主程序的目的。  </p><p>每一个分叉只包含一条output语句，以确认进行了调用。<br>用户在主程序中选择的每个选项都将调用相关的过程。</p><p><br></p><hr><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a><strong>黑盒测试</strong></h3><p>作为程序员，你可以看到你的程序代码，你的测试将涉及代码的知识(参见白盒测试)。作为全面测试的一部分，程序还应该由其他人进行测试，他们看不到程序代码，也不知道解决方案是如何编码的。  </p><p>这样的程序测试人员将查看程序规范，以了解程序要做什么，设计测试数据并计算出预期的结果。<br><strong>测试数据 (Test data)</strong>通常由<strong>正常数据值</strong>、<strong>极端/边界数据值</strong>和<strong>错误/异常数据值</strong>组成。  </p><p>测试人员然后用测试数据运行程序并记录结果。<br>这种测试方法被称为黑盒测试，因为测试人员看不到程序代码的内部，程序对他们来说就像一个黑盒。  </p><p>当实际结果与预期结果不匹配时，就存在问题。<br>在修改程序之前，程序员需要找到这种差异的原因。<br>一旦黑盒测试确定存在错误，就必须使用调试软件或干式运行来找到需要更正的代码行。  </p><article class="message is-info"><div class="message-body"><b>Test data: carefully chosen values that will test a program.</b><br><b>Black-box testing: comparing expected results with actual results when a program is running.</b></div></article> <p><br></p><hr><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a><strong>白盒测试</strong></h3><p>我们如何检查代码是否正确工作?<br>我们选择合适的测试数据来检查代码中的每一条路径。这被称为<strong>白盒测试 (White-box testing)</strong>。  </p><article class="message is-info"><div class="message-body"><b>White-box testing: testing every path through the program code</b></div></article> <p><br></p><hr><h3 id="干式运行算法"><a href="#干式运行算法" class="headerlink" title="干式运行算法"></a><strong>干式运行算法</strong></h3><p>检查算法是否按预期工作的一种好方法是使用跟踪表和不同的测试数据来运行算法。<br>这也被称为walk through。  </p><p>其思想是在算法的每一步写下所有变量和条件值的当前内容。  </p><article class="message is-info"><div class="message-body"><b>Dry-run (walk through): the process of checking the execution of an algorithm or program by recording variable values in a trace table.</b><br><b>Trace table: a table with a column for each variable that records their changing values.</b></div></article> <p><br></p><hr><h3 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a><strong>测试阶段</strong></h3><p>这些测试方法在软件开发的早期使用，例如在编写单个模块时。<br>有时程序员自己也会使用这些测试方法。<br>在较大的软件开发组织中，一般来说会有全职的软件测试人员。  </p><p>软件通常由许多模块组成，有时由不同的程序员编写。<br>每个单独的模块可能已经通过了所有测试，但当模块合并成一个程序时，测试整个程序至关重要。这就是所谓的<strong>集成测试 (Integration testing)</strong>。<br>集成测试通常是增量式的。这意味着每次添加一个模块就会完成一次测试，并在添加下一个模块之前进行进一步的测试。  </p><p>软件在发布给客户之前，将由软件测试人员进行内部测试。这种类型的测试称为<strong>Alpha测试 (Alpha testing)</strong>。  </p><p>定制软件(为特定客户编写的)将随后发布给客户。客户将检查它是否符合他们的要求并按预期工作。这个阶段称为<strong>验收测试 (Acceptance testing)</strong>。<br>这通常是交接过程的一部分。在成功的验收测试之后，客户将签署软件。  </p><p>当软件不是为销售而生产时，没有特定的客户来执行验收测试和签署软件。所以，在alpha测试之后，一个版本将发布给有限的潜在用户受众，即所谓的“beta测试者”。<br>这些测试人员将使用软件并在他们自己的环境中进行测试。这个早期的发布版本被称为beta版本，被选中的用户执行<strong>Beta测试 (Beta testing)</strong>。<br>在beta测试期间，用户将向软件库反馈他们发现的任何问题，以便软件库可以纠正任何报告的错误。</p><article class="message is-info"><div class="message-body"><b>Integration testing: individually tested modules are joined into one program and tested to ensure the modules interact correctly.</b><br><b>Alpha testing: testing of software in-house by dedicated testers</b><br><b>Acceptance testing: testing of software by customers before sign-off.</b><br><b>Beta testing: testing of software by a limited number of chosen users before general release.</b></div></article> <p><br></p><hr><h2 id="测试策略，测试计划和测试数据"><a href="#测试策略，测试计划和测试数据" class="headerlink" title="测试策略，测试计划和测试数据"></a><strong>测试策略，测试计划和测试数据</strong></h2><p>在软件项目的设计阶段，我们需要制定合适的测试策略，以确保从一开始就对软件进行严格的测试。<br>我们应考虑哪些测试方法适用于所述项目，因为必须制定一个精心设计的测试计划来确保最终程序的质量。  </p><p>一些时候，大型程序不能进行详尽的测试，但重要的是系统测试可以发现尽可能多的错误，因此我们需要一个测试计划。  </p><p>在第一个例子中，我们设计了一个大纲规划，如下：  </p><ul><li>控制流：用户是否已经得到了适当的选择？所选的选项是否导致特定模块正常工作？  </li><li>输入验证：所有的数据是否已经正确地输入进系统？  </li><li>循环和决策：循环和决策是否正确？  </li><li>存储：数据是否保存在正确的文件当中？  </li><li>输出验证：程序是否能够产生正确的输出？  </li></ul><p>列出这份大纲之后，我们还要逐步细化，直到做成一个详细的测试计划。  </p><p>我们如何进行这些测试?<br>首先我们需要选择能够让我们看到它是否被正确处理的数据，这种类型的数据称为“测试数据 (Test data)”。<br>它与真实的、实时的数据不同，因为它是为了测试不同的可能性而特意选择的。<br>我们区分不同类型的测试数据，如下表所示：  </p><div class="table-container"><table><thead><tr><th style="text-align:left">测试数据类型</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:left"><strong>Normal</strong> (valid)</td><td style="text-align:left">正常的，有效的，合理的数据。</td></tr><tr><td style="text-align:left"><strong>Abnormal</strong> (erroneous)</td><td style="text-align:left">程序不应该接受的数据值。</td></tr><tr><td style="text-align:left"><strong>Boundary</strong> (extreme)</td><td style="text-align:left">处于正常数据范围的边界或者极端的数据值 <br> 测试数据应该包括恰好在边界内的值(即有效数据)和恰好在边界外的值(即无效数据)。</td></tr></tbody></table></div><p><br></p><hr><h3 id="如何预防错误"><a href="#如何预防错误" class="headerlink" title="如何预防错误"></a><strong>如何预防错误</strong></h3><p>编写能正确工作的程序的最好方法，就是从一开始就防止错误。<br>我们如何将程序中的错误最小化? 产生错误的一个主要原因是贫乏的需求分析。<br>在设计解决方案时，理解问题以及系统的用户想要或需要什么是非常重要的。<br>我们应该使用如下方案来达成这一目的:  </p><ul><li>使用久经沙场的，主流的语言和语言结构，如结构化变成或者面向语言的设计。</li><li>使用业内约定俗成的规定，如标识符表，数据结构，或者使用标准的算法。  </li><li>使用程序库 (Program libraries)中经过验证的模块和对象。  </li></ul><p><br></p><hr><h2 id="纠正性维护"><a href="#纠正性维护" class="headerlink" title="纠正性维护"></a><strong>纠正性维护</strong></h2><p>维护程序不像维护机械设备那样：它不需要润滑，零件也不会磨损。<br><strong>纠正性维护 (Corrective maintenance)</strong>指的是当程序由于逻辑错误或运行时错误而不能正确工作时所需要的工作。  </p><p>有时，程序错误在很长一段时间内都不会变得明显，因为只有在非常罕见的情况下才会出现意外结果或程序崩溃。<br>这些情况可能是因为程序的某些部分不经常使用，或者因为某些情况下的数据包含极端值。过于早期的纠正性维护也可能引入其他错误。</p><article class="message is-info"><div class="message-body"><b>Corrective maintenance: correcting identified errors.</b></div></article> <p><br></p><p>在报告问题时，程序员需要找出导致bug的原因。<br>为了找到bug，程序员要么使用程序调试软件，要么使用跟踪表。  </p><p><br></p><hr><h2 id="适应性维护"><a href="#适应性维护" class="headerlink" title="适应性维护"></a><strong>适应性维护</strong></h2><p>有时程序经常需要修改，以使其执行原本执行不了的功能。  </p><p>例如，第十三章介绍的Connect 4游戏允许O和X两个玩家对战。<br>修改后的版本将是一个玩家成为电脑。这意味着单个玩家与电脑下棋，尝试战胜计算机。  </p><p><strong>适应性维护 (Adaptive maintenance)</strong>是对程序进行修改以<strong>增强功能或响应规格变化</strong>的行为。  </p><article class="message is-info"><div class="message-body"><b>Adaptive maintenance: amending a program to enhance functionality or in response to specification changes</b></div></article> <p><br></p><hr><h2 id="改善性维护"><a href="#改善性维护" class="headerlink" title="改善性维护"></a><strong>改善性维护</strong></h2><p>如果你的程序运行得令人满意，但是你发现仍有改进的空间。<br>例如，如果文件处理由顺序访问改为直接访问，程序可能运行得更快。  </p><p><strong>改善型维护 (Perfective maintenance)</strong>的目标是修改程序以提高性能或可维护性。  </p><article class="message is-info"><div class="message-body"><b>Perfective maintenance: modifying a program to improve performance or maintainability.</b></div></article> <p><br></p><hr><p><strong>AS部分完结撒花</strong>  </p><p>(花)(花)(花)</p><p>最后更新于：<strong>2023.4.28</strong>  </p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;CS课堂笔记&lt;br&gt;</summary>
    
    
    
    <category term="CS" scheme="http://naughtychas.github.io/categories/CS/"/>
    
    <category term="笔记" scheme="http://naughtychas.github.io/categories/CS/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CIE" scheme="http://naughtychas.github.io/tags/CIE/"/>
    
    <category term="笔记" scheme="http://naughtychas.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算机" scheme="http://naughtychas.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX自学笔记</title>
    <link href="http://naughtychas.github.io/2022/08/24/Latex%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://naughtychas.github.io/2022/08/24/Latex%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2022-08-24T04:25:25.000Z</published>
    <updated>2025-01-26T12:46:15.907Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本人自学LaTeX非系统性笔记，随学习进度不断更新<br><span id="more"></span></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><p><br></p><p><strong>因为CIE考试迫在眉睫，最近就先暂时不更新这篇文章了</strong></p><p><br></p><hr><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>是一种基于ΤΕΧ的排版系统，在生成学术期刊，复杂表格和公式上的效果格外的突出。相比于Microsoft Word而言，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>可以很稳定、精确、美观地完成排版任务（尤其是数学排版）。<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>的可拓展性也很强，可以支持任何形式的排版，如五线谱，原理图等。  </p><p>当然，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>最大的缺点就是上手门槛高,   （<del>要是门槛不高就不会有这篇文章了</del>） 其次还有编写耗时长，编写复杂，需要编译源文件才可以看到文章效果等缺点。因此，爆肝各大<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>教程提升自己使用<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="4.672ex" height="2.033ex" role="img" focusable="false" viewBox="0 -683 2065 898.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(704,0)"></g><g data-mml-node="mpadded" transform="translate(564,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(1328,0)"></g><g data-mml-node="mi" transform="translate(1213,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>类排版系统能力是唯一的方法。  </p><p>那为什么还要花费如此经历去学习使用<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>？是因为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="4.672ex" height="2.033ex" role="img" focusable="false" viewBox="0 -683 2065 898.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(704,0)"></g><g data-mml-node="mpadded" transform="translate(564,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(1328,0)"></g><g data-mml-node="mi" transform="translate(1213,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>排版系统的质量实在是高，高到大学好多论文只支持上传<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>作品。  </p><p>那看样子这个 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>，我是铁定得学了。</p><p><strong>Tips：结合目录食用本文，你将收获更高阅读效率</strong>  </p><h2 id="配置本地环境"><a href="#配置本地环境" class="headerlink" title="配置本地环境"></a><strong>配置本地环境</strong></h2><p>首先得给自己整一个写<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="4.672ex" height="2.033ex" role="img" focusable="false" viewBox="0 -683 2065 898.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(704,0)"></g><g data-mml-node="mpadded" transform="translate(564,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(1328,0)"></g><g data-mml-node="mi" transform="translate(1213,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>的地方。<br>常见的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="4.672ex" height="2.033ex" role="img" focusable="false" viewBox="0 -683 2065 898.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(704,0)"></g><g data-mml-node="mpadded" transform="translate(564,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(1328,0)"></g><g data-mml-node="mi" transform="translate(1213,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 发行版有两个，分别是 <code>TeX Live</code>和 <code>MiKTeX</code>。  </p><h3 id="TeX-Live"><a href="#TeX-Live" class="headerlink" title="TeX Live"></a><strong>TeX Live</strong></h3><p><code>TeX Live</code>提供的包特别全，但是体积比较大，安装比较慢（<del>指安装一个上午</del>）。不过如果你的网络条件不是特别稳定，建议直接安装<code>TeX Live</code>一劳永逸。</p><p>   <a href="https://www.tug.org/texlive/acquire-iso.html">TeX Live下载地址</a>  </p><h3 id="MiKTeX"><a href="#MiKTeX" class="headerlink" title="MiKTeX"></a><strong>MiKTeX</strong></h3><p><code>MiKTeX</code>体积相比<code>TeX Live</code>小了很多，安装速度明显变快，但是遇到缺少的包就需要联网下载了。<br>   <a href="https://miktex.org/download">MikTeX下载地址</a></p><h3 id="Overleaf"><a href="#Overleaf" class="headerlink" title="Overleaf"></a><strong>Overleaf</strong></h3><p>另外，如果想要快速使用 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="4.672ex" height="2.033ex" role="img" focusable="false" viewBox="0 -683 2065 898.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(704,0)"></g><g data-mml-node="mpadded" transform="translate(564,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(1328,0)"></g><g data-mml-node="mi" transform="translate(1213,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 编辑器的话，一款叫做<code>Overleaf</code>的在线<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="4.672ex" height="2.033ex" role="img" focusable="false" viewBox="0 -683 2065 898.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(704,0)"></g><g data-mml-node="mpadded" transform="translate(564,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(1328,0)"></g><g data-mml-node="mi" transform="translate(1213,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>编辑器也比较好用，进入网站需要先注册登录才能使用。<br>   <a href="https://www.overleaf.com">Overleaf网址</a>  </p><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a><strong>Visual Studio Code</strong></h3><p>在安装完<code>TeX Live</code>或者<code>MiKTeX</code>之后，你可以使用VSCode作为一个写作环境。VSCode可以对代码进行高亮标注，并且还有现代化的UI，出色的颜值。如果你是VSCode的忠实用户的话，也可以对VSCode进行快速的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 环境配置。  </p><p>我们需要安装一个叫做<code>LaTeX Workshop</code>的插件。安装方法如下：  </p><ol><li>按下 Ctrl+Shift+X，转到 Extentions(扩展) 界面  </li><li>搜索<code>LaTeX Workshop</code>  </li><li>点击安装  </li></ol><hr><h2 id="LaTeX命令格式"><a href="#LaTeX命令格式" class="headerlink" title="LaTeX命令格式"></a><strong>LaTeX命令格式</strong></h2><p>所有的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 命令都使用反斜杠”<code>\</code>“作为开头<br>反斜杠后面的文字部分代表命令名称，后面的花括号”<code>{}</code>“代表命令参数<br>举一个例子，此命令<code>\documentclass{article}</code>代表引入文档类别，类别为article（文章）。  </p><p><strong>若存在百分号”<code>%</code>“，则代表在同一行内百分号后面的所有字符为注释，不参与文档编译</strong>。在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>中出现编译错误时，相比于直接删除有问题的代码，使用”<code>%</code>“注释掉相应代码是更明智的选择。你可以在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>文档任何一个位置插入注释。</p><hr><h2 id="LaTeX文件结构"><a href="#LaTeX文件结构" class="headerlink" title="LaTeX文件结构"></a><strong>LaTeX文件结构</strong></h2><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 文档的结构分为导言区和正文区（文稿区）。</p><h3 id="导言区"><a href="#导言区" class="headerlink" title="导言区"></a><strong>导言区</strong></h3><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 导言区主要用于文档的全局设置。<br>在<code>\begin{document}</code>命令之上的内容，一般称之为导言区。<br>下面是导言区常用的命令：</p><ul><li><code>\documentclass</code>命令用来引入文档类别，以及定义部分正文属性。  </li><li><ul><li>例如，<code>\documentclass{article}</code>代表引入文档类别，类别为article（文章）。花括号内还可以使用<code>report, book, letter</code>等参数。每一种文档类别编译出的效果都不一样。（比如说Book就会生成一个封面，但是article就不会）  </li></ul></li><li><code>\title{}</code>命令用于定义文档标题。  </li><li><code>\author{}</code>命令用于定义文章作者。  </li><li><code>\date{}</code>命令用于定义编辑文档的时间。<br>花括号内填入<code>\today</code>代表使用当前时间。</li></ul><h3 id="正文区"><a href="#正文区" class="headerlink" title="正文区"></a><strong>正文区</strong></h3><p>顾名思义，正文区则用于承载编译结果的内容。（<del>说白了就是正文</del>）  你可以使用文字，命令，数学公式等元素构成正文。</p><h4 id="正文区命令"><a href="#正文区命令" class="headerlink" title="正文区命令"></a><strong>正文区命令</strong></h4><ul><li><p>使用<code>\begin{*环境名称*}</code>和<code>\end{*环境名称*}</code>命令引入一个环境。  </p><ul><li><p>环境名称填入<code>document</code>引入一个文件环境。<strong>所有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>文档有且只有一个document环境</strong>，置于<code>\begin{document}</code>和<code>\end{document}</code>之间的内容叫做正文区。  </p></li><li><p>置于<code>\begin{document}</code>和<code>\end{document}</code>之间的命令与字符会被编译。因此，可以在<code>\end{document}</code>存放一些论文相关的资料，以便日后查阅。  </p></li><li><p>环境命令的格式如下：  </p><pre><code>\begin{*环境名称*}    内容\end{*环境名称*}</code></pre></li></ul></li></ul><ul><li><code>\maketitle</code>命令用于在正文依次显示导言区定义的标题，作者和编辑时间。<ul><li><strong>只有在导言区设定了标题，作者和编辑时间的值之后，才可正常显示</strong>。</li><li>当文档类别为<code>letter</code>时，此命令会编译错误。因为<code>letter</code>文件类型中不存在<code>\maketitle</code>命令。  </li></ul></li></ul><hr><h4 id="数学模式"><a href="#数学模式" class="headerlink" title="数学模式"></a><strong>数学模式</strong></h4><p>使用“美元”符号”<code>$</code>“包裹的内容称之为”数学模式”，之外的内容为”文字模式”。  </p><p>文字置于文字模式内即可渲染。但在数学模式下输入公式，才可以正确渲染公式。</p><p>单美元符号”$$<code>"包裹的公式会在行内显示，称作**行内公式**；而双美元符号"</code>$$$”包裹的内容会另起一整行居中显示，称作<strong>行间公式</strong>。  </p><p>例如如下代码：</p><pre><code>Let $f(x)$ be defined by the formula $$f(x)=3x^2+x-1$$ which is a polynomial of degree 2.</code></pre><p>会被显示为：  </p><p>Let <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1900 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> be defined by the formula </p><script type="math/tex; mode=display">f(x)=3x^2+x-1</script><p>which is a polynomial of degree 2.</p><p>(<del>LaTeX的一大好处，解决数学渲染的痛点</del>)</p><p>P.s:(后面那个“(1)”实操的时候是不会显示的，这是我的博客目前的一个Bug，以后找时间再修复)</p><hr><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a><strong>换行</strong></h4><p>在源文件正文中增加一个空行，用于表示换行操作。<br>例如：  </p><pre><code>Hello World!Let $f(x)$ be defined by the formula $f(x)=3x^2+x-1$.</code></pre><p>显示为：<br>Hello World! Let <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1900 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> be defined by the formula <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.686ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 8259 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2177.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3233.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="msup" transform="translate(3733.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4964.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(5964.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(6758.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(7759,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>.</p><p>而添加一行空行后：  </p><pre><code>Hello World!Let $f(x)$ be defined by the formula $f(x)=3x^2 +x-1$.</code></pre><p>则显示为：<br>Hello World!<br>Let <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1900 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> be defined by the formula <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.686ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 8259 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2177.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3233.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="msup" transform="translate(3733.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4964.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(5964.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(6758.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(7759,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>.  </p><p>空行有以下几个规则：  </p><ul><li><strong>仅存在注释的一行不算做空行，不作为换行操作。</strong>  </li><li><strong>多个空行并列存在，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>会当做只有一行空行处理</strong></li></ul><hr><h2 id="LaTeX中文处理"><a href="#LaTeX中文处理" class="headerlink" title="LaTeX中文处理"></a><strong>LaTeX中文处理</strong></h2><p>需要进行几步配置才可以使用中文输入。具体配置方式之后在这里更新。<br>另外，设计中文处理的一些命令也会在文章最后进行补充，等到时候再更新吧。</p><hr><h2 id="LaTeX字体"><a href="#LaTeX字体" class="headerlink" title="LaTeX字体"></a><strong>LaTeX字体</strong></h2><p>在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>中，一个字体有如下5种属性：  </p><ul><li>字体编码  <ul><li>正文字体编码</li><li>数学字体编码</li></ul></li><li>字体族  <ul><li>罗马字体</li><li>无衬线字体</li><li>打字机字体</li></ul></li><li>字体系列  <ul><li>粗细</li><li>宽度</li></ul></li><li>字体形状  <ul><li>直立</li><li>斜体</li><li>伪斜体</li><li>大型小写</li></ul></li><li>字体大小  </li></ul><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>文件中，如上五个属性都可以通过命令或者声明进行设置。<br>以下内容从字体族开始：  </p><hr><h3 id="字体族"><a href="#字体族" class="headerlink" title="字体族"></a><strong>字体族</strong></h3><p>字体族一共有三种，分别是<strong>罗马字体</strong>（Roman Family），<strong>无衬线字体</strong>（Sans Serif Family）和<strong>打字机字体</strong>（Typewriter Family）。  </p><p>三中不同的字体看起来就像是这样的：  </p><ul><li><p>罗马字体：笔画起始处有装饰（衬线）<br><img src="https://note.youdao.com/yws/api/personal/file/WEBdb59ed7ddce826f365650c6998aaf54c?method=download&amp;shareKey=7e956c01305c5bda37d60a1934cafaf6" alt="罗马字体">  </p></li><li><p>无衬线字体：笔画起始处无装饰<br><img src="https://note.youdao.com/yws/api/personal/file/WEBdf0acdc3e7165d09a40b077bf5f37349?method=download&amp;shareKey=01e00a3cab6ea2569b5b88fc4f099f66" alt="无衬线字体">  </p></li><li><p>打字机字体：每个字符宽度相同，又称作等宽字体<br><img src="https://note.youdao.com/yws/api/personal/file/WEBa28e4606ecd3aa83dc012a3608fb2f73?method=download&amp;shareKey=f5b744c5cd20c3b2f17f60eb42e697cf" alt="打字机字体">  </p></li></ul><hr><h4 id="字体族命令"><a href="#字体族命令" class="headerlink" title="字体族命令"></a><strong>字体族命令</strong></h4><p>在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>文档中，可通过<code>\textXX{*文本*}</code>和<code>\XXfamily *文本*</code>两种命令设置字体族种类。<br>XX需要填入对应字体族缩写。</p><h5 id="textXX"><a href="#textXX" class="headerlink" title="\\textXX{}"></a><strong><span>\</span>textXX{}</strong></h5><p><code>\textXX{}</code>为字体命令。<br>在<code>\textXX{}</code>中，<code>XX</code>中填入对应字体族缩写。  </p><p>此命令共有三种样式：  </p><ul><li><code>\textrm{}</code> 代表使用罗马字体（rm）  </li><li><code>\textsf{}</code> 代表使用无衬线字体（sf）  </li><li><code>\texttt{}</code> 代表使用打字机字体（tt）  </li></ul><p>而在<code>{}</code>中需要填入需要指定字体族的文字，例如<code>\textrm{Roman Family}</code>命令输出结果为：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBdb59ed7ddce826f365650c6998aaf54c?method=download&amp;shareKey=7e956c01305c5bda37d60a1934cafaf6" alt="" title="罗马字体">  </p><p>由上图所示，”Roman Family”文字以罗马字体显示。  </p><h5 id="XXfamily-文本"><a href="#XXfamily-文本" class="headerlink" title="\\XXfamily *文本*"></a><strong><span>\</span>XXfamily *文本*</strong></h5><p><code>\XXfamily *文本*</code>为字体声明。<br>在<code>\XXfamily *文本*</code>中，<code>XX</code>中需填入对应字体族缩写。<br>不过请注意，<strong><code>*文本*</code>与命令<code>\XXfamily</code>之间需存在一个空格。</strong></p><p>与<code>\textXX{}</code>命令一样，此命令共有三种样式：  </p><ul><li><code>\rmfamily *文本*</code> 代表使用罗马字体（rm）  </li><li><code>\sffamily *文本*</code> 代表使用无衬线字体（sf）  </li><li><code>\ttfamily *文本*</code> 代表使用打字机字体（tt）  </li></ul><p>*文本*区域输入需要声明格式的文字，作用于后续的文本。<br>文本区域可以使用大括号对文本进行分组，限定字体声明的作用范围。<br>例如：  </p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">{<span class="keyword">\rmfamily</span> Roman Family} {<span class="keyword">\sffamily</span> Sans Serif Family} {<span class="keyword">\ttfamily</span> Typewriter Family}</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="keyword">\rmfamily</span> Roman Family {<span class="keyword">\sffamily</span> Sans Serif Family} {<span class="keyword">\ttfamily</span> Typewriter Family}</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="keyword">\rmfamily</span> Roman Family <span class="keyword">\sffamily</span> Sans Serif Family <span class="keyword">\ttfamily</span> Typewriter Family</span><br></pre></td></tr></table></figure><p>三行均输出为：<br><img src="https://note.youdao.com/yws/api/personal/file/WEB14a87d410aeaad7af421b463d6b6d3db?method=download&amp;shareKey=48ddd82a2dcc891e8faee70cdd8fd0fe" alt=""></p><p>不过请注意，当一个字体声明遇到另一个字体声明时，会结束当前声明，而采用新的声明。  </p><hr><h3 id="字体系列"><a href="#字体系列" class="headerlink" title="字体系列"></a><strong>字体系列</strong></h3><p>字体系列一共有两种，分别是<strong>中体(Medium Series)</strong>和<strong>粗体(Boldface Series)</strong><br>所谓中体，其实是中等权重；加粗也实际上是“加宽加粗”。<br>（<del>虽说我也没搞懂这个中体是个啥玩意，看起来也没啥特别的</del>）  </p><p>两种字体系列如图所示：  </p><ul><li>中体：   </li></ul><p><img src="https://note.youdao.com/yws/api/personal/file/WEBb173c4fd5cc816de3cae7a8c0687c0cc?method=download&amp;shareKey=484f9ee5e805f9cab2b035ee00c9757b" alt="中等权重">  </p><ul><li>粗体：  </li></ul><p><img src="https://note.youdao.com/yws/api/personal/file/WEB8b20781f2822426a632b07b4130c1193?method=download&amp;shareKey=c090c1e0206637917c7180995fdd90cb" alt="粗体"></p><hr><h4 id="字体系列命令"><a href="#字体系列命令" class="headerlink" title="字体系列命令"></a><strong>字体系列命令</strong></h4><p>与字体族命令相同，可通过<code>\textXX{*文本*}</code>和<code>\XXfamily *文本*</code>两种命令设置字体系列。<br>XX需要填入对应字体族缩写。<br>其中，<strong>中体的缩写为<code>md</code>，而粗体的缩写为<code>bf</code>。</strong>如下面表格所示：   </p><div class="table-container"><table><thead><tr><th style="text-align:center">字体系列名称</th><th style="text-align:center">英文名称</th><th style="text-align:center">缩写</th></tr></thead><tbody><tr><td style="text-align:center">中等权重</td><td style="text-align:center">Medium Series</td><td style="text-align:center"><strong>md</strong></td></tr><tr><td style="text-align:center">加粗</td><td style="text-align:center">Boldface Series</td><td style="text-align:center"><strong>bf</strong></td></tr></tbody></table></div><p>例如，<code>\textmd{Medium Series}</code> 或者 <code>\mdfamily Medium Series</code> 的输出结果为<br><img src="https://note.youdao.com/yws/api/personal/file/WEBb173c4fd5cc816de3cae7a8c0687c0cc?method=download&amp;shareKey=484f9ee5e805f9cab2b035ee00c9757b" alt="">  </p><p>而<code>\textbf{Boldface Series}</code> 或者 <code>\bffamily Boldface Series</code>的输出结果为<br><img src="https://note.youdao.com/yws/api/personal/file/WEB8b20781f2822426a632b07b4130c1193?method=download&amp;shareKey=c090c1e0206637917c7180995fdd90cb" alt=""></p><p>两个命令的语法要求与特点和字体族的那两个命令完全一致，因此这里就不多写了。<br>有关内容在<a href="#字体族命令">这里</a>查看。  </p><p>*有一点需要注意，我前往Overleaf官网测试的时候，加粗命令结果好像编译后不显示。可以使用本地的<code>TeX Studio</code>试一下。</p><hr><h3 id="字体形状"><a href="#字体形状" class="headerlink" title="字体形状"></a><strong>字体形状</strong></h3><p>字体形状共有如下四种。<br><strong>直立(Upright Shape / Roman Shape)</strong>，<br><strong>斜体/意大利(Italic Shape)</strong>，<br><strong>伪斜体/倾斜(Slanted Shape)</strong>，<br><strong>大型小写(Small Capitals Shape)</strong>  </p><p>他们分别看起来是这样的：  </p><ul><li><p>直立：<br><img src="https://note.youdao.com/yws/api/personal/file/WEBb9f08b4e66e785a640410f71c87a798a?method=download&amp;shareKey=71e87a1b35f5588eef5355339b603cd1" alt="直立"></p></li><li><p>斜体：<br><img src="https://note.youdao.com/yws/api/personal/file/WEB97566ff022b2f71d925cbcd5286355ae?method=download&amp;shareKey=3f4c268b63eeb633e20a2acf096da634" alt="斜体"></p></li><li><p>伪斜体：<br><img src="https://note.youdao.com/yws/api/personal/file/WEB70b1ef65085d7cc700a0b19435c98fa5?method=download&amp;shareKey=e65ef0f3b2ddf0e3f2b83832db175ed8" alt="伪斜体"></p></li><li><p>大型小写：<br><img src="https://note.youdao.com/yws/api/personal/file/WEB7bf786807131360d9c706c749e153f75?method=download&amp;shareKey=463076882756fa8339db060675d0037d" alt="大型小写"></p></li></ul><p>同样的，下面用一个表格总结一下字体形状与缩写：  </p><div class="table-container"><table><thead><tr><th style="text-align:center">字体系列名称</th><th style="text-align:center">英文名称</th><th style="text-align:center">缩写</th></tr></thead><tbody><tr><td style="text-align:center">直立</td><td style="text-align:center">Upright Shape / Roman Shape</td><td style="text-align:center"><strong>up</strong></td></tr><tr><td style="text-align:center">斜体/意大利</td><td style="text-align:center">Italic Shape</td><td style="text-align:center"><strong>it</strong></td></tr><tr><td style="text-align:center">伪斜体/倾斜</td><td style="text-align:center">Slanted Shape</td><td style="text-align:center"><strong>sl</strong></td></tr><tr><td style="text-align:center">大型小写</td><td style="text-align:center">Small Capitals Shape</td><td style="text-align:center"><strong>sc</strong></td></tr></tbody></table></div><hr><h4 id="字体形状命令"><a href="#字体形状命令" class="headerlink" title="字体形状命令"></a><strong>字体形状命令</strong></h4><p>与字体族和字体系列命令相同，可通过<code>\textXX{*文本*}</code>和<code>\XXfamily *文本*</code>两种命令设置字体系列。<br>XX需要填入对应字体族缩写。  </p><p>例如：<code>\textup{Upright Shape}</code> 或者 <code>\upfamily Upright Shape</code>均输出为：<br><img src="https://note.youdao.com/yws/api/personal/file/WEBb9f08b4e66e785a640410f71c87a798a?method=download&amp;shareKey=71e87a1b35f5588eef5355339b603cd1" alt="">  </p><p>两个命令的语法要求与特点和字体族的那两个命令完全一致，因此这里就不多写了。<br>有关内容在<a href="#字体族命令">这里</a>查看。  </p><hr><h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a><strong>字体大小</strong></h3><p>在调整字体大小之前，需要前往导言区<code>\documentclass</code>命令设置默认字号。在<code>\documentclass</code>命令后紧跟一个方括号<code>[]</code>，并在其中定义想要的默认字号磅数。  </p><p>比如说，<code>\documentclass[12pt]{article}</code>代表<strong>默认字号为12磅</strong>，文档类型为article（文章）。这也意味着文档除单独定义过大小的文字，其他文字的大小都变为12磅。<br>不过这个磅数到了12磅就封顶了，没有什么所谓的13磅14磅。  </p><h4 id="字体大小命令"><a href="#字体大小命令" class="headerlink" title="字体大小命令"></a><strong>字体大小命令</strong></h4><p>我们可以用<code>{\字体大小命令 *文本*}</code>来定义文档内部分文字的字号。<br>使用括号来规定作用字体大小的范围。<br>在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>中，有如下几个大小命令。由小到大依次为：<br><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\tiny</span></span><br><span class="line"><span class="keyword">\scriptsize</span></span><br><span class="line"><span class="keyword">\footnotesize</span></span><br><span class="line"><span class="keyword">\small</span></span><br><span class="line"><span class="keyword">\normalsize</span></span><br><span class="line"><span class="keyword">\large</span></span><br><span class="line"><span class="keyword">\Large</span></span><br><span class="line"><span class="keyword">\LARGE</span></span><br><span class="line"><span class="keyword">\huge</span></span><br><span class="line"><span class="keyword">\Huge</span></span><br></pre></td></tr></table></figure></p><p>举个例子，<code>{\tiny Hello} {\Huge Hello}</code>的输出为： </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBcb5f496ff83d0e71052d6dba17745533?method=download&amp;shareKey=08902477357070f589a7733e8e390769" alt=""> </p><p>如下代码：<br><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">{<span class="keyword">\tiny</span> Hello}</span><br><span class="line"></span><br><span class="line">{<span class="keyword">\scriptsize</span> Hello}</span><br><span class="line"></span><br><span class="line">{<span class="keyword">\footnotesize</span> Hello}</span><br><span class="line"></span><br><span class="line">{<span class="keyword">\small</span> Hello}</span><br><span class="line"></span><br><span class="line">{<span class="keyword">\normalsize</span> Hello}</span><br><span class="line"></span><br><span class="line">{<span class="keyword">\large</span> Hello}</span><br><span class="line"></span><br><span class="line">{<span class="keyword">\Large</span> Hello}</span><br><span class="line"></span><br><span class="line">{<span class="keyword">\LARGE</span> Hello}</span><br><span class="line"></span><br><span class="line">{<span class="keyword">\huge</span> Hello}</span><br><span class="line"></span><br><span class="line">{<span class="keyword">\Huge</span> Hello}</span><br></pre></td></tr></table></figure></p><p>的输出为：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB7f8b598c729595627347ad1c8a6bf310?method=download&amp;shareKey=791bb4071f345ef2d22f45eaf5c7462a" alt="hello2">  </p><p>这些命令对应字体的大小和默认字体有关，具体对应关系如下：</p><div class="table-container"><table><thead><tr><th style="text-align:center">命令<span>\</span>默认字号</th><th style="text-align:center">10pt</th><th style="text-align:center">11pt</th><th style="text-align:center">12pt</th></tr></thead><tbody><tr><td style="text-align:center"><span>\</span>tiny</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center"><span>\</span>scriptsize</td><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center"><span>\</span>footnotesize</td><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center"><span>\</span>small</td><td style="text-align:center">9</td><td style="text-align:center">10</td><td style="text-align:center">10.95</td></tr><tr><td style="text-align:center"><span>\</span>normalsize</td><td style="text-align:center">10</td><td style="text-align:center">10.95</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center"><span>\</span>large</td><td style="text-align:center">12</td><td style="text-align:center">12</td><td style="text-align:center">14.4</td></tr><tr><td style="text-align:center"><span>\</span>Large</td><td style="text-align:center">14.4</td><td style="text-align:center">14.4</td><td style="text-align:center">17.28</td></tr><tr><td style="text-align:center"><span>\</span>LARGE</td><td style="text-align:center">17.28</td><td style="text-align:center">17.28</td><td style="text-align:center">20.74</td></tr><tr><td style="text-align:center"><span>\</span>huge</td><td style="text-align:center">20.74</td><td style="text-align:center">20.74</td><td style="text-align:center">24.88</td></tr><tr><td style="text-align:center"><span>\</span>Huge</td><td style="text-align:center">24.88</td><td style="text-align:center">24.88</td><td style="text-align:center">24.88</td></tr></tbody></table></div><hr><p>最后编辑于：2022.8.31<br><strong><em>持续更新</em></strong></p><p>参考源:<br><a href="https://www.bilibili.com/video/BV11h41127FD?vd_source=2cfdb1c3b42978b5b84f0844acce6ea9">Bilibili-一个非常快速的 Latex 入门教程</a><br><a href="https://www.bilibili.com/video/BV15x411j7k6?p=2&amp;vd_source=2cfdb1c3b42978b5b84f0844acce6ea9">Bilibili-latex中文教程-15集从入门到精通包含各种latex操作</a><br><a href="https://www.jianshu.com/p/a7fcdf18526d">简书-LaTeX教学2.4 环境</a><br><a href="https://www.jianshu.com/p/68da21a1501a">LaTeX字体设置</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本人自学LaTeX非系统性笔记，随学习进度不断更新&lt;br&gt;</summary>
    
    
    
    <category term="LaTeX" scheme="http://naughtychas.github.io/categories/LaTeX/"/>
    
    <category term="自学笔记" scheme="http://naughtychas.github.io/categories/LaTeX/%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://naughtychas.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="LaTeX" scheme="http://naughtychas.github.io/tags/LaTeX/"/>
    
  </entry>
  
  <entry>
    <title>8.23 Induction Example</title>
    <link href="http://naughtychas.github.io/2022/08/23/8-23-induction-example/"/>
    <id>http://naughtychas.github.io/2022/08/23/8-23-induction-example/</id>
    <published>2022-08-23T15:02:10.000Z</published>
    <updated>2023-06-10T03:01:54.144Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>8.23 记一道Induction题目  </p></blockquote><span id="more"></span>  <p>     The sequence of real numbers <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="12.223ex" height="1.437ex" role="img" focusable="false" viewBox="0 -441 5402.7 635"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(965.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1410.2,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2375.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2820.4,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3786,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(4230.7,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g></g></svg></mjx-container> is such that <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="6.333ex" height="1.846ex" role="img" focusable="false" viewBox="0 -666 2799.1 816"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1243.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2299.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container> and  </p><script type="math/tex; mode=display">a_{n+1}=\left(a_{n}+\frac{1}{a_{n}}\right)^{3}</script><p>a. Prove by mathematical induction that <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="15.721ex" height="2.244ex" role="img" focusable="false" viewBox="0 -833.9 6948.8 991.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""></path></g><g data-mml-node="msub" transform="translate(1000.7,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2314.7,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msup" transform="translate(3370.5,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(5448.1,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(6282.1,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mn" transform="translate(6448.8,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container> for all integers <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="5.506ex" height="1.819ex" role="img" focusable="false" viewBox="0 -666 2433.6 804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>.  </p><p>       [You may use the fact that <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="16.882ex" height="2.755ex" role="img" focusable="false" viewBox="0 -864.9 7461.8 1217.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1000.7,0)"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M152 251Q152 646 388 850H416Q422 844 422 841Q422 837 403 816T357 753T302 649T255 482T236 250Q236 124 255 19T301 -147T356 -251T403 -315T422 -340Q422 -343 416 -349H388Q359 -325 332 -296T271 -213T212 -97T170 56T152 251Z"></path></g><g data-mml-node="mi" transform="translate(458,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1252.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(2252.4,0)"><g data-mml-node="mn" transform="translate(245.5,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="604.5" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(3096.9,0) translate(0 -0.5)"><path data-c="29" d="M305 251Q305 -145 69 -349H56Q43 -349 39 -347T35 -338Q37 -333 60 -307T108 -239T160 -136T204 27T221 250T204 473T160 636T108 740T60 807T35 839Q35 850 50 850H56H69Q197 743 256 566Q305 425 305 251Z"></path></g></g><g data-mml-node="mo" transform="translate(3832.7,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mi" transform="translate(4888.5,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(5722.5,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mi" transform="translate(5889.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></g></svg></mjx-container> for <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.442ex" height="1.597ex" role="img" focusable="false" viewBox="0 -666 2405.6 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(1905.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>.]  </p><hr><p><strong>Solution:</strong>  </p><p>a.</p><p>               Let <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.506ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2433.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>,</p><p>                                                       <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.469ex;" xmlns="http://www.w3.org/2000/svg" width="25.665ex" height="4.516ex" role="img" focusable="false" viewBox="0 -1346.8 11344.1 1996.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1243.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2299.1,0)"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z"></path></g><g data-mml-node="msub" transform="translate(597,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1784.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(2785,0)"><g data-mml-node="mn" transform="translate(384.6,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msub" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><rect width="882.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(3907.7,0) translate(0 -0.5)"><path data-c="29" d="M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(4537.7,876.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7518.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(8574,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mo" transform="translate(9788.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(10844.1,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></svg></mjx-container>,</p><p>                                                       <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="27.69ex" height="2.224ex" role="img" focusable="false" viewBox="0 -833.2 12238.8 983.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1000.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1243.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2299.1,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(3133.1,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3299.8,0)"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1214.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2270.1,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(2936.8,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(3770.8,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mn" transform="translate(3937.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(4715.2,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(5771,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(6437.7,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(7271.7,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mn" transform="translate(7438.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg></mjx-container></p><p>                                      So it’s true for <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.506ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2433.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>.</p><p>               Assume it’s true for <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.553ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 2454.6 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1933.6,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container>:</p><p>                                                       <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="15.468ex" height="2.288ex" role="img" focusable="false" viewBox="0 -853.7 6837 1011.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1000.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1258.2,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msup" transform="translate(2314,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(4335.7,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(5169.7,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mn" transform="translate(5336.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></p><p>                                     <br>When <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="9.45ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 4177 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1933.6,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(2676.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3677,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>:</p><p>                                                       <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.469ex;" xmlns="http://www.w3.org/2000/svg" width="18.516ex" height="4.516ex" role="img" focusable="false" viewBox="0 -1346.8 8184.3 1996.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2161.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(3217.6,0)"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z"></path></g><g data-mml-node="msub" transform="translate(597,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1799.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(2799.8,0)"><g data-mml-node="mn" transform="translate(389.8,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msub" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><rect width="893.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(3933.1,0) translate(0 -0.5)"><path data-c="29" d="M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(4563.1,876.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></g></svg></mjx-container></p><p>                                                       <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.469ex;" xmlns="http://www.w3.org/2000/svg" width="63.282ex" height="4.516ex" role="img" focusable="false" viewBox="0 -1346.8 27970.5 1996.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1000.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2161.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3217.6,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(4051.6,0)"><path data-c="2061" d=""></path></g><g data-mml-node="msup" transform="translate(4218.3,0)"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z"></path></g><g data-mml-node="msub" transform="translate(597,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1799.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(2799.8,0)"><g data-mml-node="mn" transform="translate(389.8,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msub" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><rect width="893.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(3933.1,0) translate(0 -0.5)"><path data-c="29" d="M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(4563.1,876.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mo" transform="translate(9462.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(10518.5,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(11185.2,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(12019.2,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(12185.8,0)"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z"></path></g><g data-mml-node="msub" transform="translate(597,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1799.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(2799.8,0)"><g data-mml-node="mn" transform="translate(389.8,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msub" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><rect width="893.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(3933.1,0) translate(0 -0.5)"><path data-c="29" d="M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z"></path></g></g><g data-mml-node="mo" transform="translate(4807.9,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(5863.7,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(6530.3,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(7364.3,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7531,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1258.2,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g><g data-mml-node="mn" transform="translate(9567.2,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(10289.4,0)"><path data-c="2219" d="M55 251Q55 328 112 386T249 444T386 388T444 249Q444 171 388 113T250 55Q170 55 113 112T55 251Z"></path></g><g data-mml-node="msup" transform="translate(11011.6,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(13033.4,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(13867.4,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mn" transform="translate(14034,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mtext" transform="translate(14534,0)"><path data-c="A0" d=""></path></g></g></g></g></g></svg></mjx-container></p><p>                                                       <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="22.478ex" height="2.402ex" role="img" focusable="false" viewBox="0 -853.7 9935.2 1061.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1000.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2161.9,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g><g data-mml-node="mtext" transform="translate(3940.5,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(4190.5,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(4912.8,0)"><path data-c="2219" d="M55 251Q55 328 112 386T249 444T386 388T444 249Q444 171 388 113T250 55Q170 55 113 112T55 251Z"></path></g><g data-mml-node="msup" transform="translate(5635,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7712.3,0)"><path data-c="2219" d="M55 251Q55 328 112 386T249 444T386 388T444 249Q444 171 388 113T250 55Q170 55 113 112T55 251Z"></path></g><g data-mml-node="mi" transform="translate(8434.5,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(9268.5,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mn" transform="translate(9435.2,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container></p><p>                                                       <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="17.228ex" height="2.402ex" role="img" focusable="false" viewBox="0 -853.7 7614.8 1061.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(834,0)"><path data-c="2061" d=""></path></g><g data-mml-node="msub" transform="translate(1000.7,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3162.5,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msup" transform="translate(4218.3,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5391.9,0)"><path data-c="2219" d="M55 251Q55 328 112 386T249 444T386 388T444 249Q444 171 388 113T250 55Q170 55 113 112T55 251Z"></path></g><g data-mml-node="mi" transform="translate(6114.2,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(6948.2,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mn" transform="translate(7114.8,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container></p><p>                                      So it’s true for <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="9.45ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 4177 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1933.6,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(2676.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3677,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></p><p>               Hence by induction, it’s true for <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="14.387ex" height="2.193ex" role="img" focusable="false" viewBox="0 -775.2 6358.9 969.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2433.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mtext" transform="translate(2878.2,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(3128.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4006,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="msup" transform="translate(4950.8,0)"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="TeXAtom" transform="translate(808,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g></g></g></g></g></svg></mjx-container>.  </p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;8.23 记一道Induction题目  &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="数学" scheme="http://naughtychas.github.io/categories/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="题目积累" scheme="http://naughtychas.github.io/categories/%E6%95%B0%E5%AD%A6/%E9%A2%98%E7%9B%AE%E7%A7%AF%E7%B4%AF/"/>
    
    
    <category term="数学" scheme="http://naughtychas.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="例题" scheme="http://naughtychas.github.io/tags/%E4%BE%8B%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>浅谈今年CAIE的POE考试</title>
    <link href="http://naughtychas.github.io/2022/08/12/%E6%B5%85%E8%B0%88%E4%BB%8A%E5%B9%B4CAIE%E7%9A%84POE%E8%80%83%E8%AF%95/"/>
    <id>http://naughtychas.github.io/2022/08/12/%E6%B5%85%E8%B0%88%E4%BB%8A%E5%B9%B4CAIE%E7%9A%84POE%E8%80%83%E8%AF%95/</id>
    <published>2022-08-12T13:00:50.000Z</published>
    <updated>2023-02-08T13:43:20.939Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章，早就已经想写了<br>和我有同样经历的全体CIE考生，……<br><span id="more"></span></p></blockquote><p>这篇文章，早就已经想写了  </p><p>和我有同样经历的全体CIE考生，每个人心中都是在骂考试局的<br>诸如“誓死力争，还我分数”此类的，确实河南拔智齿<br>但是发生这一悲剧的源头，和这个大黑锅到底要交给谁来背   （<del>至少不是学生来背</del>）    ，确实是一个值得深思的话题。  </p><h1 id="现状"><a href="#现状" class="headerlink" title="现状"></a><strong>现状</strong></h1><p>我们先看看现在全校的考生手里拿到的都是一些什么稀烂的成绩吧：<br>首先是高一，高一的两科标配，基础数学和经济 （<del>除了部分弃考经济的同学</del>），拿到的成绩都出奇的低。  </p><p>那就细看一下到底有多低  </p><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a><strong>数学</strong></h2><p>先说数学，所有的同学都选择了在今年的五月份把基础数学AS部分考出来。先不说难度如何难不难考小a，但是平时成绩稳定小a稳得一批的同学，有很大一部分只拿到了b。那些拿到a的同学本是很开心，但是往后一看分数，都傻眼了。<strong>满分一百分，真正上85分的都寥寥无几。</strong> 但是对于学生来说，拿一个low a到底有什么意义？  </p><p>好学生已经失望透顶了，不只是因为自己没有考出好成绩，还有看到自己最终分数竟然还没有在班级后面不听课的学生分高，换谁谁不憋屈啊？嗯？</p><p>POE的AS部分总分是100分，这种简单到小学生都会的题目，人均扣了15分以上我确实是很难理解。  </p><p><strong><strong>CAIE都开始搞抽象了是吧？？？</strong></strong>  </p><p>至于什么合成成绩单啊，时间期限等一些别的东西，我们下面再说。  </p><h2 id="经济"><a href="#经济" class="headerlink" title="经济"></a><strong>经济</strong></h2><p>鉴于本人经济水平稀烂，确实也无法对于试卷内容方面做出任何评价。<br>但是我虽然经济水平稀烂，但是别的同学也不至于像我一样烂到b边摸不到吧<br>CIE就像魔怔了一样，闭着眼给成绩，bcd什么的跟随机一样，还故意给了一堆Q（就是没成绩）。<br>至于为什么有理由揣测成绩是随机给的，表现出来就是和数学一样，部分差生的成绩比班里经济十分优秀的同学分还要高，这不就离谱嘛<br>我话就搁着，<strong>亚当·斯密亲自来考AS经济，都拿不了这次POE的小a。</strong>    </p><h2 id="高年级"><a href="#高年级" class="headerlink" title="高年级"></a><strong>高年级</strong></h2><p>谁能想到高一上述的情况还算是好的，新高三这一届才是最惨的<br>前情提要，CIE的考试有这样几个规定：  </p><blockquote><p>-所有的成绩，可用的持续时间是<strong>半年</strong><br>-全科成绩需要<strong>使用AS和A2两部分</strong>合成一个全科成绩  </p><p>其中:  </p><blockquote><p>-A2成绩一旦考出，只能寻找<strong>上一个可用的（未过期的）AS成绩合成全科成绩</strong>  </p></blockquote></blockquote><p>上述虽然不是全部的规则，但是是与新高三关系最密切的几个规则<br>大部分的新高三学生，在今年的5月份考试完成了大部分的全科考试。这一考，对于学长学姐们来说是至关重要的。考好了就能拿到目标分数，考炸了就直接寄。  </p><p>但是现在这个情况，CIE的这一波骚操作，把所有人都搞寄了。这一寄，对于新高三的学生来说，悬崖勒马的机会都基本没了。  </p><p>拿去申请的成绩，大多都是全科成绩的，但是鉴于”<code>考试可用持续时间是半年</code>“这一个规定，想要再去合成全科成绩，只能在<strong>明年的五月份一次性考出来所有选择的全科</strong>。  </p><p>4到5个科目，每一科都分AS和A2，一个半科考两次，一个全科考四次，算下来一共要考20次。再加上不同的科目要在一个半月之内准备好，这换谁能再发挥好啊？</p><p>摆在他们面前的，要不就是加一年Gap Year，要不就只能抓住这样最后一丝希望。  </p><h2 id="全国"><a href="#全国" class="headerlink" title="全国"></a><strong>全国</strong></h2><p>也不是只有叽歪这个问题，全国使用POE政策的考点基本全都寄了，但是那些正常线下坐在考场里做卷子的一点事儿没有。  </p><p>成绩发出来那一下午，微博知乎朋友圈，哪一个不爆炸?  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB68c769af52d7a96b255cc9d86a9445a1?method=download&amp;shareKey=8d4002d18fd723a10856e3861b644c14" alt="微博暴躁老哥" title="微博暴躁老哥"></p><p>据不完全统计，全国已经有北京，上海，杭州等地出现离谱分数了，不知道之后CIE中国考区办公室还会闹出一些什么幺蛾子。  </p><h1 id="CAIE"><a href="#CAIE" class="headerlink" title="CAIE"></a><strong>CAIE</strong></h1><p>这次的POE评分标准及其离谱，所有人都没搞懂剑桥要干什么。<br>不过根据不完全准确的消息，本次的CAIE证据的提交似乎没有要求校方上传评估题目的标准答案，那就有人好奇了，剑桥那边到底有没有认真地批阅上传的证据？我想绝对没有。  </p><p>一个人三份证据，每一份都没有答案。一所学校有300多人，加起来就是大约1000张没有答案的证据，剑桥那边似乎是真的没有认真在批；再加上POE只是全部考试的冰山一角，剑桥考试局自然是将更多的精力放到了正常的线下测试上，就更没有理由去面对POE材料了。这样国际性的考试，剑桥大学，作为英国顶级学府，选择把POE草草略过，毫不走心，不对考生的证据负责，无疑是败坏自己名誉的不二之选。  </p><p><strong>等考生们全都转去转爱德思考试局了，你们什么时候就傻眼了。</strong>  </p><h1 id="对策"><a href="#对策" class="headerlink" title="对策"></a><strong>对策</strong></h1><p>没有人想拿着这样垃圾的成绩申请大学，所以每一座受影响的的国际学校都在紧锣密鼓的商讨对策。  </p><p>大部分人第一时间就想到了复议。复议就是通过申请，让剑桥考试局重新按照要求审查一遍分数，修正结果的一套流程。然而鉴于这次爆发的是一次全国乃至全球性的大事件，申请复议的人数多如漫天繁星，所以想要通过复议获得应有分数的可能性不能说没有，而是相当的微小。  </p><p>与其说是复议，更不如是说买彩票，还是带不同价格不同配置那种。</p><p>所以在这种情况下，重考才是比较贴近现实的一个选择。  </p><p>不过对于本来计划这次AS数学考出小a并规划新考的同学来说，或许是需要准备10月份加紧考基础数学全科了。再加上现在到了学期初雅思要出分的时候，时间紧迫，任务繁重，只能硬着头皮上了。  </p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a><strong>结语</strong></h1><p>不知不觉写了这么多，与其说是评论，更像是一种情绪的爆发  </p><p>事已至此，在复议希望渺茫的现在，还是安下心来准备重考罢（悲  </p><p>不过在准备重考期间，也千万不要忘记这几天发生的这一切，不要忘记到底是谁让我们落到这步田地的  </p><p>因为背后的原因，我相信大家都有目共睹。</p><p>2022.8.12</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这篇文章，早就已经想写了&lt;br&gt;和我有同样经历的全体CIE考生，……&lt;br&gt;</summary>
    
    
    
    <category term="CIE与考试" scheme="http://naughtychas.github.io/categories/CIE%E4%B8%8E%E8%80%83%E8%AF%95/"/>
    
    
    <category term="学业历程" scheme="http://naughtychas.github.io/tags/%E5%AD%A6%E4%B8%9A%E5%8E%86%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>邈想日集</title>
    <link href="http://naughtychas.github.io/2022/08/12/%E9%82%88%E6%83%B3%E6%97%A5%E9%9B%86/"/>
    <id>http://naughtychas.github.io/2022/08/12/%E9%82%88%E6%83%B3%E6%97%A5%E9%9B%86/</id>
    <published>2022-08-12T06:34:24.000Z</published>
    <updated>2025-01-26T16:50:06.850Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>记录生活</strong><br><span id="more"></span>  </p></blockquote><h1 id="2024"><a href="#2024" class="headerlink" title="2024"></a><strong>2024</strong></h1><h2 id="十二月"><a href="#十二月" class="headerlink" title="十二月"></a><strong>十二月</strong></h2><h3 id="2024-12-30"><a href="#2024-12-30" class="headerlink" title="2024.12.30"></a><strong>2024.12.30</strong></h3><p>下学期有C++课。决定还是在假期提前自学一下比较好。</p><h3 id="2024-12-11"><a href="#2024-12-11" class="headerlink" title="2024.12.11"></a><strong>2024.12.11</strong></h3><p>Alright kids I’m back.</p><hr><h2 id="七月"><a href="#七月" class="headerlink" title="七月"></a><strong>七月</strong></h2><h3 id="2024-7-12"><a href="#2024-7-12" class="headerlink" title="2024.7.12"></a><strong>2024.7.12</strong></h3><p>玩o玩的现在真的是病入膏肓了。<br>另外最近也在和ATRI1024一块做项目。项目地址：<a href="https://github.com/osu-atri/osu-dictionary">osu-dictionary</a>  </p><p>确实是一次千载难逢的好机会。希望能通过这次项目积累一些使用git,js,react之类的相关经验吧。</p><p><br></p><p>顺便看过了其他成员的博客，遂觉得我的博客比较杂乱，老旧（主要是评论模块好像也没法用了）。打算找一个比较不错的新框架迁移一下博客。</p><p>懒癌发作了，改天再说吧…</p><p><br></p><hr><h2 id="五月"><a href="#五月" class="headerlink" title="五月"></a><strong>五月</strong></h2><h3 id="2024-5-15"><a href="#2024-5-15" class="headerlink" title="2024.5.15"></a><strong>2024.5.15</strong></h3><p>进入了计算机Paper2复健期。问题在于伪代码一看就不想写，怎么办</p><p><br></p><hr><h3 id="2024-5-12"><a href="#2024-5-12" class="headerlink" title="2024.5.12"></a><strong>2024.5.12</strong></h3><p>爆充了osu!撒泼特。</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB5ade07269c4bf5ed9f5ae7fc3aab34ac?method=download&amp;shareKey=9a6e7c42313182bcf15618f815f61e44" alt="osu!supporter tag"></p><p>另外最近也完成了在osu里的第一次collab：  </p><p><img style="width:60%;" src="https://note.youdao.com/yws/api/personal/file/WEBc4a44d63e59c5596e36b50a72892d317?method=download&shareKey=9311bc458a9c120db121cc86f235781d"></p><p><br></p><hr><h3 id="2024-5-8"><a href="#2024-5-8" class="headerlink" title="2024.5.8"></a><strong>2024.5.8</strong></h3><p>今天考完了计算机P1。感觉这个考试季的题还是蛮常规的<br>再接再厉吧</p><p><br></p><hr><h2 id="四月"><a href="#四月" class="headerlink" title="四月"></a><strong>四月</strong></h2><h3 id="2024-4-18"><a href="#2024-4-18" class="headerlink" title="2024.4.18"></a><strong>2024.4.18</strong></h3><p>虽说是这样不过发现越接近考试季心里就越浮躁，这个考试季格外能感觉出来  </p><p>关键问题是在于这是我最后一次考试季了我自己给我整这一出。  </p><p>大概写下这段文字的时候，距离第一场计算机考试还有19天，距离第一场物理考试还剩大约23天。可以确定的是这两科里面必须是要出一个A*的。还是要抓紧努力。</p><p>欸不是兄弟这个大粉饼是个什么东西，诶不是我怎么停不下来了这玩意真上头吧就</p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBf17ec18edf0931c343a8ef88b46ba53d?method=download&amp;shareKey=dc9afe9dded1608254cc2bdb1394bba8" alt=""></p><p>啊啊啊啊都别拦着我啊啊啊我要刷pp  </p><p>不是哥们你刷pp，ppy都tm让你手打出腱鞘炎了你还隔着刷pp，你<em>*</em>铁音痴，你跟pp过一辈子吧，就抱着你那破鼠标键盘，你的成绩都是我的了  </p><p><br></p><hr><h2 id="二月"><a href="#二月" class="headerlink" title="二月"></a><strong>二月</strong></h2><h3 id="2024-2-25"><a href="#2024-2-25" class="headerlink" title="2024.2.25"></a><strong>2024.2.25</strong></h3><p>申请生涯惨遭滑铁卢什么的千万不要啊啊啊啊啊啊 <em>(绝望的呐喊)</em></p><p>我不是不想去滑铁卢大学的意思…</p><h1 id="2023"><a href="#2023" class="headerlink" title="2023"></a><strong>2023</strong></h1><h2 id="十二月-1"><a href="#十二月-1" class="headerlink" title="十二月"></a><strong>十二月</strong></h2><h3 id="2023-12-23"><a href="#2023-12-23" class="headerlink" title="2023.12.23"></a><strong>2023.12.23</strong></h3><p>发这条的目的是为了告诉大家我还健在：Github Project还在稳步更新中…  </p><p>另外一个目的是马上就2024了，再不写两条记录，23年的博客记录就止步在10月了。</p><p><br></p><hr><h2 id="十月"><a href="#十月" class="headerlink" title="十月"></a><strong>十月</strong></h2><h3 id="2023-10-9"><a href="#2023-10-9" class="headerlink" title="2023.10.9"></a><strong>2023.10.9</strong></h3><p>突然猛地发现，已经有两个月没有更新文章了。<br>可能是因为最近这段时间太忙了把，已经来不及处理别的事情了。  </p><p>上次写日记还是8月19号，是CIE出成绩的那一天。当时那确实觉得真的是废了，现在看来也无非就是变得更充实一些，没有别的。</p><h2 id="八月"><a href="#八月" class="headerlink" title="八月"></a><strong>八月</strong></h2><h3 id="2023-8-19"><a href="#2023-8-19" class="headerlink" title="2023.8.19"></a><strong>2023.8.19</strong></h3><p>最近发生的事都糟透了，这两三天简直就是度日如年，完全看不到任何希望的光芒<br>当然我还是说的还是有些极端了，只不过现在成绩这个样，很难申请到一个好大学啊……  </p><p>一科一科的说，先从进阶数学开始。我首先需要承认的是，AS部分的进阶数学考的那叫一个灾难，尤其是我最喜欢的机械数学部分。当时AS的分数是一个89的小a，还给我留下了一点希望，觉得A2考的好一点就可以那A*了。  </p><p>结果我没考好，这是我的原因。某些程度上来说，A2部分比AS部分考的更加灾难。虽然说这次进阶的全科成绩是个A，但是我很不满意这样的结果。  </p><p>物理考的还可以，这个就先跳过了。  </p><p>计算机我不是很理解。计算机反而是我这几个科目里面感觉最拿手的科目了，当时在考场上也答得相当不错，可是发下成绩一看我有些质疑。是a没错，但是是一个比例很奇怪的小a。  </p><p>随后我就想到了一些事情。简单的一波分析结束后，发现可能是CIE又出了一些问题。这次的CIE绝对压分了。<br>那些原因暂且不提，我没有能力考到满分，我就没有资格抱怨CIE压分严重————谁叫我考不出来满分，这样分数再高也没法压了。  </p><p>还有STEP…</p><p>算了不说了，说多了都是泪</p><p>头抬起，继续向前发展吧</p><p><br></p><hr><h3 id="2023-8-4"><a href="#2023-8-4" class="headerlink" title="2023.8.4"></a><strong>2023.8.4</strong></h3><p>今天是这个暑期项目的最后一天，明天就要坐高铁回济南了。<br>现在我坐在宿舍的床上一直在想，我来上海这一趟到底有什么收获<br>仔细一想好像也确实没有啥收获。  </p><p>不过事情都过去了，那就让他们过去吧，再去考虑也没有什么作用了。既来之则安之嘛。  </p><p>我不得不吐槽下最后的final。说是这几天的科研，实际上根本也没研究啥，无非就是去kaggle上面找了个已经存在的项目，扒下来自己看看，然后再围绕它做了个简单的报告罢了。  </p><p>不得不提到我们组内的<strong>某位</strong>同学了。这位同学自己本身是啥也没干，不过当我们再最后一天围着final忙的死去活来的时候，倒是喊着 <em>“给我上点压力嘛~”</em> 之类的话，确实是给爷整笑了。<br>对这种摆爷，我希望他对自己之后的人生也是这个态度哈，挺好的继续保持。<br>哦对了，它刚上高一。  </p><p>顺带一提，如果有需要的话，连接放在<a href="https://www.kaggle.com/code/sslp23/predicting-fifa-2022-world-cup-with-ml">这里</a>。<br>对机器学习和足球预测的同志们可以来看看这个项目，有一说一质量还是很高的。  </p><p><br></p><hr><h2 id="七月-1"><a href="#七月-1" class="headerlink" title="七月"></a><strong>七月</strong></h2><h3 id="2023-7-25"><a href="#2023-7-25" class="headerlink" title="2023.7.25"></a><strong>2023.7.25</strong></h3><p>现在是七月二十五号的下午3：48，坐在暑期科研教室里的我一点课也听不进去，于是就出现在这里了。  </p><p>想来想去，发现有一段时间没有总结下最近发生的事情了：  </p><p><br></p><hr><p><br></p><p>       <strong>· 坦克，炮塔和无人机</strong>  </p><p>首先是学校里面有关于坦克和炮塔的项目那个（就是之前6.19号提到的那个项目），早就已经非圆满结束了。<br>具体情况就是，我们所有的代码和模型训练下来之后，效果也还算是不错：能够识别出来坦克的坐标，电机也可以将炮塔对准坦克，发射也不成问题。  </p><p>但是我们忽略了最大的一个问题：我们所有的坦克的模型都是在黎阳办公室里训练的，这就会导致模型的泛用性很差。  </p><p><strong>相当的差。</strong>  </p><p>所以说当我们到了项目站的那一天，炮塔就完全不起作用了。<br>由于环境光太亮，再加上这是一个完全陌生的环境，我们训练的模型因为数据集太少，经常把另一些不是坦克的东西识别成坦克。（哈哈）<br>然后就乱射一通。见到个东西就乱射。最后的结果也是十分的尴尬，我们只拿到了整个项目展的三等奖。  </p><p><em>不过这里面确实也应该又黑幕。我们当时拉票拉了将近100多票，最后的竟然连一个没有实际成果的小项目给拿去第一了，就凭他们的人气更高一些。</em><br><em>哦对了，他们也送吃的。</em>  </p><p>可惜了我们的头发了。全叽歪最先进的技术栈只拿到了项目展的第三名，可以说是变相说出“计算机滚出滚出济外”了吧。  </p><p><br></p><hr><p>       <strong>· 有关人工智能的暑期项目</strong> </p><p>这一次的暑假是申请季之前冲申请材料的绝佳机会，同时也是最后机会，所以我计划这个暑假来参加一个有关人工智能和深度学习的科研项目。  </p><p>昨天是开营仪式，去的是上海国家会议中心，整的还是挺牌面的：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB29acc15e65880d6a9e65318d7c19cb8b?method=download&amp;shareKey=94f44f865ce61bf3123d1da105dd79e8" alt=""></p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB8464b4d440b0b0bdc644d024b0a9186d?method=download&amp;shareKey=261ec9909e5c37e97747a71172edd739" alt="参会证"></p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBe1ef70fa078d89b03a221126ae9f1360?method=download&amp;shareKey=c58da7cfa1358a750f62accf211e4cd7" alt=""></p><p>场馆内部还是很豪华的，毕竟国家级别的会场嘛。</p><p><br></p><p>但是需要吐槽的是，这个时间的把控是真的答辩。<br>早上9点起床，然后坐车从崇明岛到上海市区就是两个小时，睡的跟猪一样。  </p><p>所以说大约十二点就到会场了，简单的吃完饭后，才不过12点半多一点。<br>问题就在于大会是下午一点半开始，所以我们只能很无聊的挤在会场里面，啥也干不了哈哈 😅  </p><p>不过好在大会办的还是不错。主办方邀请到了很多有头有脸的人物：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB57578220ee08ae8b31033df34bca5a72?method=download&amp;shareKey=bf19a6d614f5cc256b5f1f6c57525c14" alt="Chas Bountra"></p><p>邀请到了Chas Bountra先生，是牛津大学的常务副校长，讲的东西也是挺有深意的。</p><p>然后感觉大会真正有含金量的地方就结束了，剩下的时间都是漫长的等待。  </p><p><br></p><hr><h3 id="2023-7-6"><a href="#2023-7-6" class="headerlink" title="2023.7.6"></a><strong>2023.7.6</strong></h3><p>好累啊，明明一动都不动也还是好累啊  </p><p>假期里面给自己整了个项目，有关于人工智能和深度学习的。<br>话说回来这个假期的活儿，害真不少嘞：<br>MAT，TMUA还有雅思和A-Level。如果有时间的话看看能不能再塞进来一个EPQ整整。  </p><p>毕竟有些东西可以不用，但是不允许用的时候没有。</p><p><br></p><hr><p>下周周三还是周四就放假了，好想抓紧这机会找老同学们玩玩。毕竟他们要新高三了，再不爽一把就真没时间了哈  </p><p><br></p><hr><h2 id="六月"><a href="#六月" class="headerlink" title="六月"></a><strong>六月</strong></h2><h3 id="2023-6-19"><a href="#2023-6-19" class="headerlink" title="2023.6.19"></a><strong>2023.6.19</strong></h3><p>随后发现了一个很炸裂的消息：<strong>我们的项目七月份之前就要截止了</strong>  </p><p>难蚌。我们甚至还没正式开始  </p><p>现在就是一个什么情况呢：炮台那边的设备都还没组装起来，这还不是主要问题：关键是我们组里面甚至还在花大把时间配置环境，要知道配置环境这件事我们早早就开始了  </p><p>难蚌。即使我们现在已经开始了  </p><p>但是我的任务是写一个有关于控制炮台那边的主程序，包括什么拍照啊图传啊控制电机啊之类的功能。即使是用了这么经典的opencv的库，还是推不起来进度。<br>现在就是最基础的功能：图像的传输，都没有干净利落的完成。就更别说那边的YOLO模型项目了，更何况我还要同时掌舵两条船呢  </p><p>最然没走出去太远，但是还是回头看了看，才发现有些事真不能是听了以后直接答应下来。<br>当初创立项目的初期一个比一个嗨，一个个都有顶掉窝法核心人员的劲头，现在是一个比一个拉跨。  </p><p>我正好感觉我是里面最拉跨的一个。毕竟人傻活多 <em><del>人傻conda环境多(雾</del></em> 嘛。  </p><p>只能说是能走多远走多远了，能写一些是一些了。毕竟没人不想出成果对吧  </p><p>你说是吧  </p><p><br></p><hr><h3 id="2023-6-12"><a href="#2023-6-12" class="headerlink" title="2023.6.12"></a><strong>2023.6.12</strong></h3><p>七月份有工程和项目要做，现在就开始跟着李沐老师学学Pytorch。  </p><p><a href="https://zh-v2.d2l.ai/">《动手学深度学习》 —— 动手学深度学习 2.0.0</a><br><a href="https://space.bilibili.com/1567748478/channel/seriesdetail?sid=358497">动手学深度学习 PyTorch版</a></p><p><br></p><hr><h2 id="五月-1"><a href="#五月-1" class="headerlink" title="五月"></a><strong>五月</strong></h2><h3 id="2023-5-13"><a href="#2023-5-13" class="headerlink" title="2023.5.13"></a><strong>2023.5.13</strong></h3><p>到目前为止一切顺利……争取接下来的计算机二卷不会狠狠地寄掉<br>应该是不会有寄掉的可能的。  </p><p><br></p><hr><h2 id="四月-1"><a href="#四月-1" class="headerlink" title="四月"></a><strong>四月</strong></h2><hr><h3 id="2023-4-28"><a href="#2023-4-28" class="headerlink" title="2023.4.28"></a><strong>2023.4.28</strong></h3><p>成功地完成了ASCS的笔记：都已经有9600多行了呢…  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBc17348616f8890af84b69549120a7b9e?method=download&amp;shareKey=589dba4b3fa95d5e5903af98e9725d32" alt="">  </p><p>不知道这九千多行里面到底有多少冗余，是吧html+markdown  </p><p><br></p><p>提到CS笔记就不得不提到我现在拉跨的Paper 2…有一种赶鸭子上架的感觉<br>不过Paper 1表现就好的多。  </p><p>我个人认为<code>9618_w22_qp_11</code>属于是难度比较高的一套试卷了。 （链接放在这里： Github issues： <a href="https://github.com/NaughtyChas/SCIE-Pastpapers/issues/89">9618_w22_qp_11</a> ）属于是把很多冷门的知识点串在一起考了。<br>比如说冯诺依曼结构的”Stored program concept”啊，中断处理啊，两步汇编底层原理啊，CSMA/CD啊，甚至还考察了为外围设备提供的接口的接口名称。  </p><p>多冷门啊，CIE，多冷门呐  </p><p>都是些我这个脑容量供不起来的货色</p><p>(<em>虽说最后一个知识点不算特别难，但是他就是很小众，对吧…上了考场看到这么个陌生的东西谁不慌呢</em>)</p><p><br></p><hr><p><em>来自 邈想日集 2023.1.13</em>  </p><blockquote><p>因为打派的时候会遇到很严重的性能瓶颈，其次我感觉可能是CPU或者GPU遇到了过热现象自动关机了<br>后来用CoreTemp工具查看了下，打派的温度甚至还没我玩BONEWORKS或者半条命：爱莉克斯来的高<br>自然就抛弃了这个理论了。  </p></blockquote><p><br></p><p>嗯嗯，属于是一开始就把正确答案排除掉了。真是聪明呢。  </p><p>虽然是很久之前就修复好了，但是我还是想提一嘴：<br>当时的解决方法是：  </p><ul><li>拆机  </li><li>拆下风扇</li><li>擦掉处理器和显卡上的残余硅脂</li><li>给CPU和GPU上一层完美的信越7921</li><li>压风扇，盒盖  </li><li>大功告成  </li></ul><p>之后就从来也没有出现过这个问题了。笑死我了。  </p><p>不过有意思的是派在15赛季之后的优化就好像变得异常不错。<br>打架的时候帧率在我的垃圾3050Ti上面甚至偶尔吃满，再也没有出现严重掉帧的情况了。  </p><p><br></p><hr><h3 id="2023-4-24"><a href="#2023-4-24" class="headerlink" title="2023.4.24"></a><strong>2023.4.24</strong></h3><p>这就是一月一更带给我的自信。  </p><p>没时间来更这个文章，我也没啥额外的东西需要邈想了：大多精力全部分配给应该关注的CIE考试上去了…  </p><h2 id="三月"><a href="#三月" class="headerlink" title="三月"></a><strong>三月</strong></h2><h3 id="2023-3-7"><a href="#2023-3-7" class="headerlink" title="2023.3.7"></a><strong>2023.3.7</strong></h3><p>注意保护好自己，千万不要甲流了</p><p><br></p><hr><h2 id="二月-1"><a href="#二月-1" class="headerlink" title="二月"></a><strong>二月</strong></h2><h3 id="2023-2-18"><a href="#2023-2-18" class="headerlink" title="2023.2.18"></a><strong>2023.2.18</strong></h3><p>ChatGPT已经出来了一段时间了，我相信大多数人已经了解到了他的恐怖之处了，也已经体会过AI的强大了。<br>但是ChatGPT在一些地方是很有局限性的，比如说结合实时发生的事情来生成内容，生成的资料没有明确的出处等等。  </p><p>然而2月12日，我开始在B站上看见陆续有人在发一个名叫New Bing的新视频。我也深深的被New Bing的能力震撼到了。<br>New Bing是不仅可以结合实时性的数据来生成内容，而且还可以说出一些很逆天的话，这些话听起来好像在你屏幕的那头是一个真正有情感的人一样。  </p><p><a href="https://www.bilibili.com/video/BV1ev4y1s7pb/?spm_id_from=333.337.search-card.all.click">《试用了集合ChatGPT的Bing搜索后，感觉潘多拉魔盒已经打开了》—— 哔哩哔哩</a></p><p>如果你还没有了解过这个New Bing，那么上面这一个视频可以让你简单的了解了解他的强大之处。  </p><p>我当时就直接被New Bing强大的功能震撼到了，于是立即前往微软官网加入了测试队列。  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB2df4f5a63bbcab57ceb844f01ebec360?method=download&amp;shareKey=bd3e378a88715268afc8823476a56d86" alt=""></p><p>可惜这是要排队的，并不是说你加入了候补就可以直接使用了，还是要等微软官方作出回应才行。  </p><p><br></p><p>在等待候补到正式测试的这段时间，我能一直在B站上看见有关他的各种逆天视频，每一条都能刷新我对这个新AI的认知，这些视频中的New Bing做出的回应远超ChatGPT的能力范围，无论是内容还是语言组织。  </p><p>比如说下面这个：  </p><p><a href="https://www.bilibili.com/video/BV1qR4y1i7oM/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=2cfdb1c3b42978b5b84f0844acce6ea9">《妈我恋爱了，获得一只又可爱又能干还会写代码的猫娘》—— 哔哩哔哩</a><br><a href=""></a><br><a href=""></a></p><p><br></p><hr><h3 id="2023-2-14"><a href="#2023-2-14" class="headerlink" title="2023.2.14"></a><strong>2023.2.14</strong></h3><p>我知道很长时间不来更新这个博客确实很过分，但是我要是这一次雅思接着寄就更过分了。<br>因此，我当时做出了一个决定<br>就是很长时间不来更新这个博客。  </p><p>这次回来的原因是，我明天就要考雅思了<br>真激动。  </p><p><br></p><hr><h3 id="2023-2-8"><a href="#2023-2-8" class="headerlink" title="2023.2.8"></a><strong>2023.2.8</strong></h3><p>最近确实好忙啊，很多有意思的事情确实办不了<br>所以我就挑了几个有意思的事情做，比如说使用Termux在我的安卓平板上安装了一个Ubuntu，然后使用<code>code-server</code>包实现真正的安卓VS CODE使用体验。  </p><p>这主要是为了能在学校里写上博客。  </p><p>因为本人每次在学校有东西想写或者有笔记需要同步，所以就花了一个晚上辛苦学习了如何使用git。<br>所以我在我的电脑上和平板上都同样配置了git，这样每次需要使用直接从库里面拉取就开箱即用了。  </p><p><br></p><hr><h3 id="2023-2-6"><a href="#2023-2-6" class="headerlink" title="2023.2.6"></a><strong>2023.2.6</strong></h3><p>由于本人咕咕咕的属性所以寒假游记也没写完（我估计也真的没人会看<br>所以我就先搁一边了，等啥时候有空了啥时候写<br>这东西反正也不是正事对吧（确信  </p><p>知道什么是正事儿么——<br>9天后的雅思机考，90来天后的计算机考试…<br>我根本都不想数，笑死我了  </p><p><br></p><hr><h3 id="2023-2-5"><a href="#2023-2-5" class="headerlink" title="2023.2.5"></a><strong>2023.2.5</strong></h3><p>今天仔细地计算了一下时间，然后发现这个学期留给我的时间确实不多了  </p><p>抓紧干活啦</p><p><br></p><hr><h3 id="2023-2-4"><a href="#2023-2-4" class="headerlink" title="2023.2.4"></a><strong>2023.2.4</strong></h3><p>有好久没有回来更这个博客了  </p><p>游记暂时隐藏了，写完了再发  </p><p>哦对了，开学快乐（</p><p><br></p><hr><h2 id="一月"><a href="#一月" class="headerlink" title="一月"></a><strong>一月</strong></h2><h3 id="2023-1-17"><a href="#2023-1-17" class="headerlink" title="2023.1.17"></a><strong>2023.1.17</strong></h3><p>从济南跑出来了  </p><p>现在邈想没啥好想的，好想的东西都在新更的文章里面了</p><p><br></p><hr><h3 id="2023-1-13"><a href="#2023-1-13" class="headerlink" title="2023.1.13"></a><strong>2023.1.13</strong></h3><p>重装系统之后又要重新搭环境，笑死了  </p><p>当你能成功看见这条消息，代表我又花费了很多精力重新安装Nodejs，安装缺失的npm包，调试各种博客参数<br>尤其是那个烦人的latex渲染器，怎么调都调不好，服了  </p><p>实际上npm在5.0.0的版本之前，如果想让npm把依赖安装到局部目录中，需要自己在后面添加一个<code>--save</code>参数。<br>你也可以简写成<code>-s</code>。  </p><p>同样的，在后面加入<code>-g</code>的参数，可以安装一个全局依赖。  </p><p>在5.0.0版本之后的npm，<code>--save</code>已经内嵌到了<code>npm install</code>命令里面了。<br>每当你安装一个新的依赖，npm会在项目根目录下的<code>package.json</code>文件中加上一行新引用，像这样：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB1d74d36caf8f7c70af8b384617e12854?method=download&amp;shareKey=9bfbaa4fdd7c33e32c726b077a2f68b6" alt="">  </p><p>也能起到一个清单的作用，提示你这个项目里面用到了哪些依赖，以便于后期增删改查。  </p><p><br></p><hr><p><br></p><p>基础数学科目拿到了A*，终于可以放下基础数学的包袱，去学习一些更高深（<del>困难</del>）的新科目了  </p><p>不过我对自己AS部分的进阶数学的成绩不是很满意，这意味着A2部分的进阶数学成绩得上上强度了  </p><p>往好的方面想：今年的进阶题甚至基础数学考试题给我们上了个大强度。再加上今年离谱的压分，能拿到A*的同学确实比之前少了好多啊  </p><p>这么想来我还是挺幸运的</p><p><br></p><hr><p><br></p><p>最近一直在派，有一些东西真的让我看见了我这台电脑的上限和短板。<br>我的Y7000P虽然能跑得起来，但是也算是跑的稀烂。平均帧不打架100来帧，打起架来60来帧，奥林匹斯掉帧瀑布能掉到50来帧。<br>但是这些东西怎么说，也还算说得过去，毕竟是没有影响到正常体验。  </p><p>这几天最让我恶心的一些东西不是在试卷上，也不是在成绩单上，而是全部堆在我Windows的事件查看器里面。  </p><p><br></p><p>有坏东西在我电脑里面，具体是什么我不知道，但是表现出来就是我打派的时候会自动关机。<br>打GO的时候也不会出现这种问题，只有派会出现这个问题。<br>打着打着突然黑屏，然后两秒后风扇狂转，持续大约10秒钟吧。<br>然后<strong>啪</strong>的一下主板断电了，咱也都知道突然给主板断电会给他带来多大的伤害。可惜的是，没有人知道排查半个月问题并尝试了上百种解决方案修复这个问题依然无果会对我造成多大的伤害。  </p><p><br></p><p>开机之后，BIOS会恢复默认启动设置：性能模式启动为均衡模式，键盘背光关闭，FnLock关闭，触控板默认打开。<br>我首先怀疑应该是是BIOS的问题，所以我去官网更新了下BIOS<br>结果是没有任何变化：该关机还是关机  </p><p><br></p><p>因为打派的时候会遇到很严重的性能瓶颈，其次我感觉可能是CPU或者GPU遇到了过热现象自动关机了<br>后来用CoreTemp工具查看了下，打派的温度甚至还没我玩BONEWORKS或者半条命：爱莉克斯来的高<br>自然就抛弃了这个理论了。  </p><p><br></p><p>直到我有一天打开事件查看器一看，发现一个规律：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB3037fd3be722aee2ee71bdf19c8d89e1?method=download&amp;shareKey=c353af1b4836e88adf0f045023ca7e86" alt=""></p><p>首先每次启动电脑，不管有没有死机，有没有强制关机，必定会出现一大批这个来自<code>DistributedCOM</code>的警告<br>具体成因大概是没有足够高的权限去修改部分注册表。<br>但就因为无论有没有死机都会出现这个问题，我推测强制关机的原因大概率不在这一事件身上。<br>相反的，那些不常发生且一击致命的事件才是真正的罪魁祸首  </p><p><br></p><p>所以我继续向下排查事件，发现了几个真正恶心的东西：  </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB79883ebb3ab94ad024afa19bc5c818d9?method=download&amp;shareKey=4ecbae91c2b57d64ea1fcd34e678010e" alt="">  </p><p>这位大哥绝对是全场最佳了，尽管我们无法盖棺定论这就是罪魁祸首，但是这个事件的确是个头号嫌疑人<br>甚至还有变式训练</p><blockquote><p><strong>为设备 HID\VID_046D&amp;PID_0A9B&amp;MI_03&amp;Col02\7&amp;2acf9647&amp;0&amp;0001 加载驱动程序 \Driver\WudfRd 失败。</strong>  </p><p><strong>为设备 ROOT\SYSTEM\0001 加载驱动程序 \Driver\WudfRd 失败。</strong></p><p><strong>为设备 PCI\VEN_8086&amp;DEV_9A03&amp;SUBSYS_380C17AA&amp;REV_05\3&amp;11583659&amp;1&amp;20 加载驱动程序 \Driver\WudfRd 失败。</strong>  </p></blockquote><p>还有很多，只能说大哥玩挺花<br>这个问题微软自己都搞不明白咋回事，你去看看微软官方的论坛，给到你的解决方案可以说是2023最佳笑话了：  </p><p><br></p><blockquote><p>当您遇到为设备加载WudfRd驱动程序失败的问题时，请尝试使用以下解决方案：</p><ul><li>尝试停止运行所有应用程序，然后关闭视窗10。  </li><li>卸载所有有可能出现问题的设备。</li><li>尝试重置您的系统。</li></ul></blockquote><p>短短三条所谓解决方案治好了我的精神内耗</p><p><br></p><p>随后谷歌并必应了一圈后发现一个问题：拯救者笔记本中招的可能性相对高一些，表现出来的问题就是自动关机。<br>某位知乎老哥分享了他自己的解决方案：卸载一个名叫<strong>Lenovo System Interface Foundation</strong>的驱动。<br>多讽刺啊联想，你们自己写的程序自家的硬件这么抗拒么  </p><p>目前已经成功卸载了这个驱动程序，下一步就是继续观察，看看电脑会不会继续打着打着派然后挂掉了  </p><p><br></p><hr><h3 id="2023-1-9"><a href="#2023-1-9" class="headerlink" title="2023.1.9"></a><strong>2023.1.9</strong></h3><p>啥也不会<br>寄喽！</p><p><br></p><hr><h3 id="2023-1-3"><a href="#2023-1-3" class="headerlink" title="2023.1.3"></a><strong>2023.1.3</strong></h3><p><strong><em>迟来的新年祝福！新年快乐！</em></strong></p><p><br>  </p><hr><p><br></p><p>新年祝福之后立即陷入CIE出成绩和期末考试的焦虑谷，实在感谢  </p><p><br></p><hr><h1 id="2022"><a href="#2022" class="headerlink" title="2022"></a><strong>2022</strong></h1><h2 id="十二月-2"><a href="#十二月-2" class="headerlink" title="十二月"></a><strong>十二月</strong></h2><h3 id="2022-12-28"><a href="#2022-12-28" class="headerlink" title="2022.12.28"></a><strong>2022.12.28</strong></h3><p>前两天发现Github死活上不去了，发现原来是被某个坏东西墙了<br>严格来说是被标记成诈骗网站了（雾<br>因此就有一段时间没有来更新这篇博客了。  </p><p><br></p><p>发现接下来的任务繁重：物理和计算机六月份就要考AS，进阶数学同样的六月份需要考A2<br>最关键的是这三科里面有两科需要我去自学哈哈<br>S2更是个重量级——学校都开始讲了我还不知道有这事儿发生（  </p><p><br></p><p><strong><em>Inferno你放过我罢</em></strong></p><p><br></p><hr><h3 id="2022-12-4"><a href="#2022-12-4" class="headerlink" title="2022.12.4"></a><strong>2022.12.4</strong></h3><p>今年12月9号会发生很多好的事情啊：我的生日，Portal RTX发布，全面打击未备案网课…<br>好吧最后那个不是什么好的事情（  </p><p><br></p><hr><h3 id="2022-12-2"><a href="#2022-12-2" class="headerlink" title="2022.12.2"></a><strong>2022.12.2</strong></h3><p><br></p><p>“同学们我们还剩下一点时间，我们给下一个内容稍微开个头”  </p><p>“我给你们放一段视频哈” (<del>10min</del>)  </p><p>*两分钟后</p><p>“时间关系我们看不完视频了。我课下把视频发在群里”  </p><p>*QQ：0下载  </p><p>我：6  </p><p>老师：6  </p><p><br></p><hr><h3 id="2022-12-1"><a href="#2022-12-1" class="headerlink" title="2022.12.1"></a><strong>2022.12.1</strong></h3><p><br></p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB7279499ff399c5d6e0f0f6d05952a1eb?method=download&amp;shareKey=422e97cb5a8d3d5d2ef91b64fae16aed" alt="-">  </p><p>谢谢，我现在急得很  </p><p><br></p><hr><p><br></p><p>太空虚了…在家里呆着是一点也不充实<br>网课是毁掉一个没有自控力学生 <del>我</del> 的最快方式<br>只想回学校 只想回学校 只想回学校啊啊啊啊啊   </p><p><em>哦对了首页最底部多了一篇文章，因为一些原因我把它藏在最后面了（</em>  </p><p><br></p><hr><p><br></p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB7efc84605a4ba91e2cd3bedc89667495?method=download&amp;shareKey=c72d405b8723da2e695e498d385982ea" alt=""></p><p>目睹污浊的世界离我而去  </p><p><br></p><hr><h2 id="十一月"><a href="#十一月" class="headerlink" title="十一月"></a><strong>十一月</strong></h2><h3 id="2022-11-25"><a href="#2022-11-25" class="headerlink" title="2022.11.25"></a><strong>2022.11.25</strong></h3><p>FL合成器里的预设，估计够我用上一辈子了吧<br>数量多质量又超高，对于我这种不会调音色的蔡来说简直是福音  (<del>实际上我只会调3xosc哈哈</del>)  </p><p><br></p><hr><h3 id="2022-11-24"><a href="#2022-11-24" class="headerlink" title="2022.11.24"></a><strong>2022.11.24</strong></h3><p><br></p><p>因为疫情，小区的大门被警戒线和封条封的死死的<br>还好前两天出门去超市，屯了大约23包方便面回家。至少是饿不死了  </p><p><br></p><hr><p><br></p><p>碧蓝档案？只知道它的BGM确实不错的，B站的二创满天飞啊…  </p><p><br></p><h3 id="2002-11-22"><a href="#2002-11-22" class="headerlink" title="2002.11.22"></a><strong>2002.11.22</strong></h3><p>果不其然线上网课了<br>太折磨人了，我现在只想回学校上学啊  </p><h3 id="2022-11-16"><a href="#2022-11-16" class="headerlink" title="2022.11.16"></a><strong>2022.11.16</strong></h3><p>回家简单配置了下Todesk远程操控，以后就可以在学校用家里的电脑了<br>比如说这句话，就是我通过todesk在学校打出来的  </p><p>简单说下体验：<br>办公效果还好，轻办公完全是足够了，虽然有延迟，但是完全可以接受。<br>但是打游戏的话就不是很适合了。延迟特别的高基本没法操作，而且因为某些因素，FPS没有办法转动视角，十分的奇怪。  </p><p>回家开私炉。  </p><p><br></p><hr><h3 id="2022-11-15"><a href="#2022-11-15" class="headerlink" title="2022.11.15"></a><strong>2022.11.15</strong></h3><p>真的挺奇怪的最近hexo d 或者git push都不能推上去，提示是没有权限<br>然后就像上github重新改一下SSH，发现无论什么手段，github都上不去了。  </p><p><br></p><hr><h3 id="2022-11-10"><a href="#2022-11-10" class="headerlink" title="2022.11.10"></a><strong>2022.11.10</strong></h3><p>NovelAI真的好强啊</p><p><br></p><hr><h3 id="2022-11-9"><a href="#2022-11-9" class="headerlink" title="2022.11.9"></a><strong>2022.11.9</strong></h3><p>把博客救活过来了<br>前两天总是没法部署</p><p><br></p><hr><h2 id="十月-1"><a href="#十月-1" class="headerlink" title="十月"></a><strong>十月</strong></h2><h3 id="2022-10-31"><a href="#2022-10-31" class="headerlink" title="2022.10.31"></a><strong>2022.10.31</strong></h3><p>唔。。终于把最近该忙的都忙完了，可以抽出空来更更这个Blog了  </p><p><br></p><hr><h3 id="2022-10-20"><a href="#2022-10-20" class="headerlink" title="2022.10.20"></a><strong>2022.10.20</strong></h3><p>最近实在太忙了就更的很少很少…   </p><p>这次回来更新就一个目的：告诉大家自己还活蹦乱跳的没啥问题(  </p><p><br></p><hr><h3 id="2022-10-16"><a href="#2022-10-16" class="headerlink" title="2022.10.16"></a><strong>2022.10.16</strong></h3><p>希望自己在明天的P1考试中正常发挥</p><p><br></p><hr><h3 id="2022-10-13"><a href="#2022-10-13" class="headerlink" title="2022.10.13"></a><strong>2022.10.13</strong></h3><p>再一次：祝明天的自己好运</p><p><br></p><hr><h3 id="2022-10-9"><a href="#2022-10-9" class="headerlink" title="2022.10.9"></a><strong>2022.10.9</strong></h3><p>计划有变，门户首页</p><p><br></p><hr><h3 id="2022-10-8"><a href="#2022-10-8" class="headerlink" title="2022.10.8"></a><strong>2022.10.8</strong></h3><p>今天好累…</p><p><br></p><hr><h3 id="2022-10-7"><a href="#2022-10-7" class="headerlink" title="2022.10.7"></a><strong>2022.10.7</strong></h3><p>明天见</p><p><br></p><hr><h3 id="2022-10-6"><a href="#2022-10-6" class="headerlink" title="2022.10.6"></a><strong>2022.10.6</strong></h3><p>嗯？后天就开学了？</p><p><br></p><hr><h3 id="2022-10-5"><a href="#2022-10-5" class="headerlink" title="2022.10.5"></a><strong>2022.10.5</strong></h3><p>简短的说下最近博客发生的情况：  </p><p>前几天看了C盘有一个名叫<code>$Windows.~BT$</code>的文件夹出奇地大，占了大约有30几个G<br>然后就按照网上的方法清了下<br>然后Edge就打不开了，开始菜单右键也没反应了，于是我就干脆重装系统  </p><p>重装倒是不要紧，要紧的是装了以后，Git的环境全都炸了。<br>最可悲的是装完以后才发现这一点，给我捣腾了一晚上<br>表现出来就是Hexo使用<code>hexo g</code>命令反复出错。  </p><p>然后就重新clone部署了一下Hexo，把主题部分迁移过来重新写重新推。  </p><p>你现在看到的这个主页是我在本地重新打的一个博客目录，也就是说，可能有成堆的Bug存在  </p><p>所以路过的麻烦直接把问题丢到博客留言版就好，我有空就修（  </p><p><br></p><hr><p><br></p><p>不出意外的话，数学渲染一定是又炸掉了</p><p><br></p><hr><p><br></p><p>想开展一个计划：以后试着每一个月研究一个有意思的课题，可以是任何领域的：从计算机到数学，不限题材。<br>但前提是先度过今年的考试季，时间先空出来再说。</p><p><br></p><hr><p><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ospp /insLicID MondoVolume /sethst:kms.loli.beer /setprt:1688 /act</span><br></pre></td></tr></table></figure><p><br></p><h3 id="2022-10-3"><a href="#2022-10-3" class="headerlink" title="2022.10.3"></a><strong>2022.10.3</strong></h3><p>那就祝自己明天好运吧</p><h2 id="九月"><a href="#九月" class="headerlink" title="九月"></a><strong>九月</strong></h2><h3 id="2022-9-27"><a href="#2022-9-27" class="headerlink" title="2022.9.27"></a><strong>2022.9.27</strong></h3><p>最近忙，十分的忙，就暂时不怎么更新了。<br>过了国庆再说  </p><p><br></p><hr><h3 id="2022-9-24"><a href="#2022-9-24" class="headerlink" title="2022.9.24"></a><strong>2022.9.24</strong></h3><p><strong>10 DAYS LEFT</strong></p><p><br></p><hr><p><br></p><blockquote><p>[2022.9.13]：  </p><p>修改了一下本文的目录样式。原来是一年分春夏秋冬的，不过照顾到目录长度可能会炸掉，于是就改成了按月记录了。  </p><p>如果这样目录还是会炸掉的话，那就寄了（</p></blockquote><p>经过一番改动，toc属于是永远不会炸掉了，所以也没有必要按月记录了   </p><p>不过后来一想改成按月记录也不错，就懒得改了（  </p><p><br></p><hr><p><br></p><p>第一次发表Pull Request，没啥经验<br>然后因为没有照顾到全部使用场景被否掉了。。。<br>然后就改良了一下代码，决定换个仓库提交  </p><p><br></p><hr><h3 id="2022-9-23"><a href="#2022-9-23" class="headerlink" title="2022.9.23"></a><strong>2022.9.23</strong></h3><p>启动了一个宏伟的项目（  </p><p>希望能做成吧</p><p><br></p><hr><h3 id="2022-9-22"><a href="#2022-9-22" class="headerlink" title="2022.9.22"></a><strong>2022.9.22</strong></h3><p>今晚的进阶作业得按坏我十个计算器（  </p><p><br></p><hr><h3 id="2022-9-20"><a href="#2022-9-20" class="headerlink" title="2022.9.20"></a><strong>2022.9.20</strong></h3><p>多希望时间能过得慢一点，这样就可以晚一点考试了（  </p><p>过了10月下旬，就算是开始了下一个学习阶段了吧…  </p><p><br></p><hr><p><br></p><p>顺带修了一下目录过长超出页面的问题。路过的朋友可以在左边帮忙测试下（  </p><h3 id="2022-9-19"><a href="#2022-9-19" class="headerlink" title="2022.9.19"></a><strong>2022.9.19</strong></h3><iframe src="//player.bilibili.com/player.html?aid=983915462&bvid=BV1Pt4y1V7mu&cid=788544958&page=1&high_quality=1&danmaku=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><p><br></p><p><br></p><blockquote><p>【01:17】:   </p><p><strong>截至目前，中国只打进过一次世界杯</strong><br><strong>Fast to forward today, China is only ever competed in one World Cup.</strong>   </p><p><strong>但如果目前中国建设足球场馆的热潮是未来中国足球发展的方向，那也表明他们对未来的雄心壮志所在。</strong><br><strong>But if its current stadium building spirit is any indication to where it could be headed, then their big ambitions are ahead.</strong>  </p></blockquote><p>嗯嗯，希望是这样吧。</p><p><br></p><hr><p><br></p><p>有关于数据库三范式的笔记一会更一下。</p><p><br></p><hr><h3 id="2022-9-18"><a href="#2022-9-18" class="headerlink" title="2022.9.18"></a><strong>2022.9.18</strong></h3><p>早上起来逛一圈Github顺便研究一下hr2星过的Icalingua++。  </p><p>然后就发现需要好好学SQL数据库了（丢分大头是吧  </p><p><br></p><hr><p><br></p><p>回形针不是全网灭绝了嘛，但是后来发现公开档案馆还不少。。。<br>至少我是发现了两个:<a href="https://ipaperclip.icu/%E5%9B%9E%E5%BD%A2%E9%92%88PaperClip/%E5%9B%9E%E5%BD%A2%E9%92%88%E4%BA%8B%E5%8A%A1%E6%89%80">链接1</a> <a href="https://paperclip.eu.org/paperclip/%E5%8E%9F%E5%88%9B%E4%B8%93%E8%BE%91/MULTIPLY%20%E6%AD%A3%E7%89%87%E5%8F%A0%E5%BA%95/">链接2</a>  </p><p>回形针屁股坐歪了确实可惜了技术力爆炸的一个团队，但是该喷还是得往死里喷<br>但是针针的音乐，各位确实是喷不得的</p><p><br></p><hr><p><br></p><p>感觉刚放了周末就要回学校了（悲</p><p><br></p><hr><h3 id="2022-9-17"><a href="#2022-9-17" class="headerlink" title="2022.9.17"></a><strong>2022.9.17</strong></h3><p>个人感觉 Drumstep 和 DnB 是最适合CSGO的音乐风格。以后找BGM就基本离不开这些了</p><p>顺便调了下Live2D插件并且启用了，先浅看一下效果</p><p><br></p><hr><h3 id="2022-9-16"><a href="#2022-9-16" class="headerlink" title="2022.9.16"></a><strong>2022.9.16</strong></h3><p>晚上十一点来浅更一下：  </p><p>某石蒜厨今天刷B看见了一个不错的repo，链接在这儿：<a href="https://github.com/dsrkafuu/sakana-widget">链接</a><br>等什么时候有空了就给自己装一个</p><p><br></p><hr><p><br></p><p>突然想起来这个博客底层确实存在一个网页Live2D插件，看起来还蛮不错的。但是因为我没有自己的模，所以就暂时没有启用（  </p><p><br></p><hr><h3 id="2022-9-15"><a href="#2022-9-15" class="headerlink" title="2022.9.15"></a><strong>2022.9.15</strong></h3><p>昨晚上几乎是没睡觉，导致今天一天都昏昏沉沉的：</p><p>昨晚因为身体不是特别舒服，就打算早点睡觉。是10点半上的床<br>然后过了十分钟，我厕所的浴霸面板可能受潮了接触不良罢，突然地滴滴响，厕所的灯一开一关的。<br>然后我就下床拿工具修，花半个小时修好了</p><p>但是我回到床上尝试睡着的时候，我发现我根本合不上眼，破浴霸搞得我睡意全无<br>然后我就在床上挣扎了半个多小时，现在大概是11点10分。但是我现在只想睡觉于是掏出耳机打开asmr，15分钟后脑子开始迷糊，似乎要入睡了</p><p>然后我家旁边不远的一个工地突然就开始用大卡车拉水泥（？？？）</p><p>就是当你生病不舒服的时候，入睡时耳边的噪音就会变得格外的大你懂吧<br>所以我当时感觉114514辆大卡车在我卧室里拉水泥，3D环绕的那种</p><p>这还没完，过了一会啪的一声工地的大灯打开了。灯是那种特大功率的，跟太阳似的那么亮，我的屋里顿时明如白昼<br>然后那些大卡车还在灯下面到处瞎跑，投下的影子在我屋里面到处乱飞<br>就像极了大半夜枕头边上永远飞不走打不死的那只蚊子一样烦人。<br>我是真的困，也懒得下床拉窗帘。但意识就在清醒和昏迷间反复横跳，跳着跳着两个半小时又过去了</p><p>两点钟，在床上到处咳嗽的我打算下床去客厅吃点药。找药，烧水，喝药一共花了我半个小时<br>然后我终于在沙发上睡了一个半小时。</p><p>生病的时候睡眠是特别浅的，于是在4:10左右我又醒了，因为工地那边听起来好像是有什么东西炸了（我猜可能是大车爆胎了）</p><p>我当时特别生气，打算今晚干脆就不睡了。我打开咖啡机磨咖啡，还想着要不背背笔记什么的。<br>咖啡磨的是超浓的那种，贼苦贼苦的</p><p>4:48我开始背笔记。</p><p>结果在5:00，我在喝着超浓咖啡的情况下的书桌旁昏昏欲睡</p><p>我迷糊的爬回床上，心想终于可以睡个安稳觉了<br>然后五点半我妈把我摇醒了，说是到点了要上学了。</p><p>然后结果就是：某同学于2022.9.15日早上六点因为贪睡回笼觉结果一不小心睡得太死导致一起床就是中午12点所以没有出现在学校，望周知<br>（实际上是因为身体确实不舒服，要不我妈就直接大清早一盆冷水把我搞醒催上学了）</p><p>另外祝大家换季期永远不生病（</p><p><br></p><hr><h3 id="2022-9-13"><a href="#2022-9-13" class="headerlink" title="2022.9.13"></a><strong>2022.9.13</strong></h3><p>回学校力  </p><p>修改了一下本文的目录样式。原来是一年分春夏秋冬的，不过照顾到目录长度可能会炸掉，于是就改成了按月记录了。<br>如果这样目录还是会炸掉的话，那就寄了（    </p><p><br></p><hr><p><br></p><p>求GL返场AT96谢谢辽（</p><p><br></p><hr><p><br></p><p>整了一个新鼠标，罗技 MX Master 3S。<br>用了一天来浅浅评论一下，确实是挺好用的。  </p><p>有些功能在安卓端试不出来，比如Logitech Flow，但是这个滚轮是真的顶<br>想象一下你轻轻一拨滚轮，然后数十万行的代码在你眼前划过的感觉，确实爽爆了（   </p><p>点按静音也确实很顶，现在我终于可以大胆地带着鼠标键盘去图书馆偷卷而不打扰别人力（喜</p><p>至于其他的评价用用再说</p><p><br></p><hr><h3 id="2022-9-11"><a href="#2022-9-11" class="headerlink" title="2022.9.11"></a><strong>2022.9.11</strong></h3><p>最近过节，再加上没有啥特别的事情发生，就不打算更的太频繁了<br>一切都开学之后再说罢（</p><p><br></p><hr><h3 id="2022-9-10"><a href="#2022-9-10" class="headerlink" title="2022.9.10"></a><strong>2022.9.10</strong></h3><p>迟来的中秋祝福：<br>祝大家中秋快乐！！<br><br></p><hr><p><br></p><p>终于搬来了新家，一切都仿佛来到了一个新的起点<br>但是新家的这个AP路由真的太费劲了，倒腾了我整整一天时间都没给他整好。。。<br>后来发现是交换器坏了（</p><p><br></p><hr><h3 id="2022-9-8"><a href="#2022-9-8" class="headerlink" title="2022.9.8"></a><strong>2022.9.8</strong></h3><p>今天发生了一件大事<br>至于是什么大事，因为某些原因就不做锐评了  </p><p><br></p><hr><p><br></p><p>什么？70/75？寄！</p><p><br></p><hr><h3 id="2022-9-7"><a href="#2022-9-7" class="headerlink" title="2022.9.7"></a><strong>2022.9.7</strong></h3><p>看来toc果然是炸掉了。<br>找时间再解决吧，最近太忙了（  </p><p><br></p><hr><h3 id="2022-9-6"><a href="#2022-9-6" class="headerlink" title="2022.9.6"></a><strong>2022.9.6</strong></h3><p>如果不出意外的话，今天写完的内容push上去之后toc长度就会炸掉了</p><p><br></p><hr><h3 id="2022-9-5"><a href="#2022-9-5" class="headerlink" title="2022.9.5"></a><strong>2022.9.5</strong></h3><p>耶耶耶耶耶耶黎阳老师fork了我的repo！！！！ </p><p><img src="https://note.youdao.com/yws/api/personal/file/WEB7d9c20e441e490acccea94f0fa113d05?method=download&amp;shareKey=17c89fd91523e60fbc681ca1179169bf" alt="Clone"></p><p>（<del>不过好像也没啥值得开心的</del>  </p><p>对了，永远不要相信本地图床（  </p><p><br></p><hr><p><br></p><p>突然发现运行完<code>hexo g</code>命令之后立即进行远程push容易发生渲染错误。等本地生成完之后等一小会再运行<code>hexo d</code>就好。  </p><p><br></p><hr><p><br></p><p>总是有人认为在教室的大屏幕上，重启电脑能解决一切问题。<br>可关键是你连信号源都没接对为什么盲目重启啊啊啊啊啊   </p><p><br></p><p>显示屏因为粉笔灰误触了，解决方案竟是重启电脑。<br>这如果不是当代图灵的话我不是很认可  </p><p><br></p><hr><p><br></p><p>不要再疑惑为什么我名字叫<code>NaughtyChas</code>了，问就是某注册程序随机编的（</p><p><br></p><h3 id="2022-9-4"><a href="#2022-9-4" class="headerlink" title="2022.9.4"></a><strong>2022.9.4</strong></h3><p>期待我的下一个友链</p><p><br></p><hr><p><br></p><p>手头上有一台Vector。等有时间了研究研究Vector的SDK做一个小项目。<br>先clone下来Vector的repo再说</p><p><br></p><hr><p><br></p><p><img src="https://note.youdao.com/yws/api/personal/file/WEBd69bdc2b68867a2eb3bfd2d088ba811f?method=download&amp;shareKey=e5a087bca5c3548c9773620c9602d84b" alt="" title="???"></p><p>网易还是赶紧爬回去检查下自己的程序罢  </p><p><br></p><hr><h3 id="2022-9-3"><a href="#2022-9-3" class="headerlink" title="2022.9.3"></a><strong>2022.9.3</strong></h3><p>李老师果然是数学界顶流，简单的两行数学表达式当时看起来很简单，现在坐在电脑前却复盘不出来了  </p><p><br></p><hr><p><br></p><p>距离Blast Showdown开赛还剩下46天。<br>等时机成熟了，就简单预测一下今年的Showdown走势如何了。<br>还有，祝天禄好运       <del>即便我知道天禄是这几个队里最拉的那一个</del></p><p><br></p><hr><h3 id="2022-9-2"><a href="#2022-9-2" class="headerlink" title="2022.9.2"></a><strong>2022.9.2</strong></h3><p>听说济南已经有小区被封掉了，我从未如此紧张过<br>至于为什么紧张想必大家懂得都懂，毕竟要临近考试季了嘛。  </p><p>疫情什么的赶紧消失吧 ———— 一想到每周要在校做两次核酸，一次就要排队40分钟就头疼  </p><p><br></p><hr><p><br></p><p>为什么现在都流行起来自创音游了？<br>属于是技术力溢出无处存放了（  </p><p><br></p><hr><p>这东西还蛮有意思的：  </p><iframe src="//player.bilibili.com/player.html?aid=857414635&bvid=BV1CV4y1W7Bh&cid=814345042&page=1&high_quality=1&danmaku=0" allowfullscreen="allowfullscreen" width="100%" height="500" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><p>不过声音听起来好像有点假就是了（  </p><p>这让我想起来前段时间刷B站还看到有大佬用Pytorch做基于VITS神经网络模型的TTS语音合成技术。<br>坏消息：VA失业计划<br>好消息：可以实时念玩家起的各种各样的名字了（     <del>当然名字还要过审核所以实装就不是很现实</del></p><p><br>  </p><hr><h3 id="2022-9-1"><a href="#2022-9-1" class="headerlink" title="2022.9.1"></a><strong>2022.9.1</strong></h3><p>我真心求求疫情千万不要再扩散了</p><p><br></p><hr><h2 id="八月-1"><a href="#八月-1" class="headerlink" title="八月"></a><strong>八月</strong></h2><h3 id="2022-8-31"><a href="#2022-8-31" class="headerlink" title="2022.8.31"></a><strong>2022.8.31</strong></h3><p><br></p><p>开学了。  </p><p>不过开学了也不影响我扒博客代码修BUG，你说是吧（<br>不知道动了哪个地方，行间 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.488ex;" xmlns="http://www.w3.org/2000/svg" width="6.293ex" height="2.108ex" role="img" focusable="false" viewBox="0 -716.3 2781.3 931.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mspace" transform="translate(681,0)"></g><g data-mml-node="mpadded" transform="translate(356,0)"><g transform="translate(0,210)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mstyle" transform="scale(0.707)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></g></g></g><g data-mml-node="mspace" transform="translate(886.3,0)"></g><g data-mml-node="mi" transform="translate(716.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mspace" transform="translate(1420.3,0)"></g><g data-mml-node="mpadded" transform="translate(1280.3,0)"><g transform="translate(0,-215.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g><g data-mml-node="mspace" transform="translate(2044.3,0)"></g><g data-mml-node="mi" transform="translate(1929.3,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> 数学公式可以正常渲染了，后面没有“（1）”这个烦人的东西了  </p><p>很是欣慰，但我不知道我是怎么修好这个BUG的 （<del>我甚至都没有打算修这个BUG</del>）  </p><p><br></p><hr><p><br>  </p><p>对于叽歪感到很不解，宿舍有那么多空房间不去用，非要去挤我们高二的位置，真的好么？<br>祝住宿舍的同学都能洗上舒服的热水澡。  </p><p><br></p><hr><p><br></p><p><strong>rks +0.02</strong><br>这就去开香槟。</p><p><br></p><h3 id="2022-8-29"><a href="#2022-8-29" class="headerlink" title="2022.8.29"></a><strong>2022.8.29</strong></h3><p>给自己记一下写代码段的语法：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% codeblock "可选文件名" lang:代码语言 &gt;folded %}</span><br><span class="line">...代码块内容...</span><br><span class="line">{% endcodeblock %}</span><br></pre></td></tr></table></figure><p>其中参数是可以自定义的，比如说<code>&gt;folded</code>代表此代码段折叠。可以根据需求删去不必要的参数。<br>此方法相比于传统<code>``` </code>引用，可以额外定义并显示一个代码段名称。<br>不过当然使用<code>``` </code>引用代码段也是可以的，但是前段时间博客系统使用的代码段引用样式还是行内的代码块，因此就找出了这个方法。  </p><p><br></p><p>还有，<strong>一定要定期运行一下<code>hexo clean</code>！！</strong>  实测解决99%的编译问题。  </p><p><br></p><hr><h3 id="2022-8-27"><a href="#2022-8-27" class="headerlink" title="2022.8.27"></a><strong>2022.8.27</strong></h3><p><br></p><p>倒计时四天了，意味着只有96个小时可以用来补作业了(悲<br>不过吃瓜了解到新学期变了一堆老师什么的，确实挺有意思的  </p><p><br></p><hr><p><br></p><p><strong><em>突然发现还有51天就考P1了</em></strong>  </p><p><br></p><hr><p><br></p><p>Oculus （<del>现在可能应该叫Meta</del>)最近发邮件通知开发者，自家<code>RoomsAPI</code>将会在2023年弃用<br>置于说为什么弃用，是因为Meta那边在忘API里加新功能的时候，发现自己写了一堆什么 ( ) 山代码，改起来太费劲<br>既然改起来费劲，他们的评价是：推翻重建<br>说的还挺像一回事的，但倒是和我没什么太大关系，毕竟Unity基本原理还没怎么入门，就更用不着这个API了（  </p><p><br></p><hr><p><br></p><p>GL真有你的啊，30个寻车包只给我出一个EP9？<br>3.3%的概率还没保底，你可是自己说的出精选概率百分之10奥<br><del>当然也可能是我太非了？</del>  </p><p><br></p><p>我就是大奖赛天花板！！！<br><img src="https://note.youdao.com/yws/api/personal/file/WEB4e707d177c6037dcac8f95da41235974?method=download&amp;shareKey=6773fc9eb6fff8f4bd7f36c7daab277e" alt="Grand Prix" title="Grand Prix"></p><p><br></p><hr><p><br></p><p>Quest 2从之前的低价销售策略走了出来，毕竟他们发现一体机领域里没什么可以打的对手了。 （Pico国产之光？国产之寄！）<br>所以很快啊，从1900涨到2500左右。<br>早买早享受，还享折扣，他真的，我哭死（<br>但是改价格总有被背刺的，比如说闲鱼个人卖家是吧  </p><p><br></p><hr><h3 id="2022-8-25"><a href="#2022-8-25" class="headerlink" title="2022.8.25"></a><strong>2022.8.25</strong></h3><p><br></p><p>已知 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="3.282ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 1450.7 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(529,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(973.7,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container> 为常数， <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container> 为未知数，请计算 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.304ex;" xmlns="http://www.w3.org/2000/svg" width="23.049ex" height="4.208ex" role="img" focusable="false" viewBox="0 -1283.6 10187.9 1860"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(396.8,-345) scale(0.707)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g><rect width="907.1" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(1147.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(1953.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msqrt" transform="translate(3009.7,0)"><g transform="translate(1020,0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1000,0)"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1000,0)"></path></g><rect width="1260.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(1500.7,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(1977.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(2506.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="mo" transform="translate(0,73.6)"><path data-c="221A" d="M1001 1150Q1017 1150 1020 1132Q1020 1127 741 244L460 -643Q453 -650 436 -650H424Q423 -647 423 -645T421 -640T419 -631T415 -617T408 -594T399 -560T385 -512T367 -448T343 -364T312 -259L203 119L138 41L111 67L212 188L264 248L472 -474L983 1140Q988 1150 1001 1150Z"></path></g><rect width="2867.7" height="60" x="1020" y="1163.6"></rect></g><g data-mml-node="mo" transform="translate(7119.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(8119.8,0)"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mi" transform="translate(8913.3,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="msup" transform="translate(9390.3,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(394,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg></mjx-container> 的精确解。  （我真的会谢<br>开学什么的就快点拿出来罢,我已经等不及力（  </p><p><br></p><h3 id="2022-8-23"><a href="#2022-8-23" class="headerlink" title="2022.8.23"></a><strong>2022.8.23</strong></h3><p><br></p><p>没啥，就是又跟同学出来聚了聚而已<br>同样是假期运动量最大的一天</p><p><br></p><h3 id="2022-8-18"><a href="#2022-8-18" class="headerlink" title="2022.8.18"></a><strong>2022.8.18</strong></h3><p>开学就在脸上，所以空一天时间和初中同学聚一聚<br>感谢mhh同学的激情演唱，真情流露，情感倾注（<br>ktv曲目千千万，点歌印象曲占一半  </p><p><br></p><hr><h3 id="2022-8-17"><a href="#2022-8-17" class="headerlink" title="2022.8.17"></a><strong>2022.8.17</strong></h3><p>是时候了，可以开始集中精力刷爆Frank的CIE工坊了  </p><p><br></p><hr><h3 id="2022-8-16"><a href="#2022-8-16" class="headerlink" title="2022.8.16"></a><strong>2022.8.16</strong></h3><p>CIE你又逼着我骂人是吧，你这小分是怎么算的，嗯？<br>还有，博客评论系统好像又挂了，我加紧修复  </p><p><br></p><hr><h3 id="2022-8-14"><a href="#2022-8-14" class="headerlink" title="2022.8.14"></a><strong>2022.8.14</strong></h3><p>怎么感觉到了一定程度，机械数学也会变得很简单的样子（<br>不过确实是该开始练练雅思写作了，现在差不多已经5分不到了捏（<em>悲</em><br>那就先在这里挖第一个坑，以后开一个专题记录我认为比较好的短语和写作技巧罢<br>对了，谁理解了所谓“国际电汇费”是个什么东西（？）  </p><p><br></p><hr><h3 id="2022-8-13"><a href="#2022-8-13" class="headerlink" title="2022.8.13"></a><strong>2022.8.13</strong></h3><p>果然是Github，Pages（io）的加载简直是太慢了，慢到离谱<br>甚至有时已经到了需要挂梯子上博客的局面（<br>我也懒得挂CDN，不知道换国内托管Gitee效果会不会好一些  （<del>可是Github UI好看啊</del>）<br>等什么时候博客用起来了，啥时候就花点小钱买个个人域名罢  </p><p><br></p><hr><h3 id="2022-8-12"><a href="#2022-8-12" class="headerlink" title="2022.8.12"></a><strong>2022.8.12</strong></h3><p>第一天，有个大工程要写一写<br>这个事儿憋不了，必须得给他锐评一下  </p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;记录生活&lt;/strong&gt;&lt;br&gt;</summary>
    
    
    
    <category term="日常" scheme="http://naughtychas.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="My Self" scheme="http://naughtychas.github.io/tags/My-Self/"/>
    
  </entry>
  
  <entry>
    <title>网站更新日志</title>
    <link href="http://naughtychas.github.io/2022/08/11/%E7%BD%91%E7%AB%99%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
    <id>http://naughtychas.github.io/2022/08/11/%E7%BD%91%E7%AB%99%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</id>
    <published>2022-08-11T09:07:12.000Z</published>
    <updated>2025-01-29T10:02:20.096Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 本文为此博客网站更新日志</p></blockquote><span id="more"></span><p><strong>目前的网页上有成吨的BUG，我尽量克服懒癌慢慢修复：）</strong><br><strong>请发现Bug之后于网站留言板块向我反馈 :smile:</strong>  </p><h1 id="已知现有问题"><a href="#已知现有问题" class="headerlink" title="已知现有问题"></a><strong>已知现有问题</strong></h1><ul><li>编译md文件若存在四级标题会出现编译错误 <span class="tag is-info">⊙ Open</span>  </li></ul><hr><h1 id="2025-1-17"><a href="#2025-1-17" class="headerlink" title="2025.1.17"></a>2025.1.17</h1><p>半夜不睡觉是因为在这里修复评论插件问题。</p><ul><li>切换Gitalk评论至Giscus</li></ul><p>Gitalk评论功能无法使用 <span class="tag is-info">✓ Closed</span></p><p>哦之前的评论还没迁移过来。</p><p><em>1:55</em>: 现在基本上确定好迁移框架了，当你看到这段文字的时候大概率都迁移过来了（</p><hr><h1 id="2025-1-16"><a href="#2025-1-16" class="headerlink" title="2025.1.16"></a>2025.1.16</h1><ul><li>更改正文字体样式为Torus</li><li>更改行内/代码块字体样式为Consolas</li><li>标题现在会默认加粗渲染了</li></ul><hr><h1 id="2023-8-16"><a href="#2023-8-16" class="headerlink" title="2023.8.16"></a>2023.8.16</h1><p>很久之前就发现网站的Gitalk崩了，听说换一个proxy就能解决，但是我懒。  </p><p>就这样吧。</p><ul><li>Gitalk评论功能无法使用 <span class="tag is-info">✓ Closed</span>  </li></ul><h1 id="2022-9-20"><a href="#2022-9-20" class="headerlink" title="2022.9.20"></a>2022.9.20</h1><ul><li>为目录增加了滚动，之后不再出现目录过长超出页面的问题 <span class="tag is-success is-normal">✓ Closed</span>  <ul><li>解决方案来自：<a href="https://www.alphalxy.com/2019/03/customize-icarus/#%E7%9B%AE%E5%BD%95%E7%B2%98%E6%80%A7%E5%AE%9A%E4%BD%8D">Icarus 主题自定义 - Xinyu Liu</a>  </li></ul></li></ul><p>具体改动如下：  </p><figure class="highlight javascript"><figcaption><span>source/js/main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $toc = $(<span class="string">'#toc'</span>);</span><br><span class="line"><span class="keyword">if</span> ($toc.<span class="property">length</span> &gt; <span class="number">0</span>) {</span><br><span class="line">    $toc.<span class="title function_">addClass</span>(<span class="string">'column-left is-sticky'</span>);</span><br><span class="line">    <span class="keyword">const</span> $mask = $(<span class="string">'&lt;div&gt;'</span>);</span><br><span class="line">    $mask.<span class="title function_">attr</span>(<span class="string">'id'</span>, <span class="string">'toc-mask'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight css"><figcaption><span>include/style/widget.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#toc</span></span><br><span class="line"> <span class="attribute">max-height</span>: <span class="built_in">calc</span>(<span class="number">87vh</span> - <span class="number">80px</span>)</span><br><span class="line"> overflow-y: scroll</span><br></pre></td></tr></table></figure><h1 id="2022-9-19"><a href="#2022-9-19" class="headerlink" title="2022.9.19"></a>2022.9.19</h1><ul><li><p>更改了message样式：  </p><ul><li><code>border-style</code>改为<code>solid</code></li><li><code>border-width</code>改为<code>3px</code></li><li><code>border-radius</code>改为<code>2</code></li><li><p>具体改动如下：  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.message</span><span class="selector-class">.message-immersive</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2</span></span><br><span class="line">    margin: <span class="number">0</span> <span class="number">0</span> - $card-content-padding $card-content-padding <span class="number">0</span> - $card-content-padding</span><br><span class="line"></span><br><span class="line">    .message-body</span><br><span class="line">        border-style: solid</span><br><span class="line">        border-width: <span class="number">3px</span></span><br><span class="line">        border-radius: <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.message.is-info</span><br><span class="line">    border-radius: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    .message-body</span><br><span class="line">        border-style: solid</span><br><span class="line">        border-width: <span class="number">3px</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="2022-9-5"><a href="#2022-9-5" class="headerlink" title="2022.9.5"></a>2022.9.5</h1><ul><li>修复了静态网页搜索失效问题  <span class="tag is-success is-normal">✓ Closed</span>  </li></ul><h1 id="2022-9-3"><a href="#2022-9-3" class="headerlink" title="2022.9.3"></a>2022.9.3</h1><ul><li>安装了hexo-bilibili-card插件，repo地址：<a href="https://github.com/MaxChang3/hexo-bilibili-card">https://github.com/MaxChang3/hexo-bilibili-card</a>  </li></ul><h1 id="2022-8-28"><a href="#2022-8-28" class="headerlink" title="2022.8.28"></a>2022.8.28</h1><ul><li>因代码块样式暂不匹配黑夜模式，已取消夜间自动开启夜间模式功能(有些时候有效果有些时候没效果就很离谱)  <ul><li>您仍可使用网站右上角“月亮”按钮手动切换夜间模式  </li></ul></li></ul><h1 id="2022-8-25"><a href="#2022-8-25" class="headerlink" title="2022.8.25"></a>2022.8.25</h1><ul><li><p>更改了行内与行间代码块样式：  </p><ul><li>字体颜色改为 <code>#000000</code>  </li><li>背景颜色改为 <code>#F0F0F0</code>  </li><li>圆角参数设为 <code>8px</code>   </li><li><p>具体改动如下：  </p><pre><code class="lang-css">code    padding: 1    color: #000000    border-radius: 8px    background: #F0F0F0    overflow-wrap: break-word</code></pre></li><li><p>以上代码更改于<code>include/style/article.styl</code>。  </p><pre><code class="lang-css">pre  overflow-touch()  background-color #F0F0F0  color $pre  font-size $pre-font-size  overflow-x auto  padding $pre-padding  white-space pre  word-wrap normal  code    background-color transparent    color currentColor    font-size $pre-code-font-size    padding 0</code></pre></li><li><p>以上代码更改于<code>source/css/default.styl</code>，用于更改行间代码块背景颜色。  </p></li><li>有关此改动的Discussion请前往<a href="https://github.com/ppoffice/hexo-theme-icarus/discussions/1111">此网址</a>查看。</li></ul></li></ul><h1 id="2022-8-24"><a href="#2022-8-24" class="headerlink" title="2022.8.24"></a>2022.8.24</h1><ul><li>增加了各模块的圆角数值  </li></ul><h1 id="2022-8-19"><a href="#2022-8-19" class="headerlink" title="2022.8.19"></a>2022.8.19</h1><ul><li>更正了网站标题的某语法问题 <span class="tag is-success is-normal">✓ Closed</span>  </li></ul><h1 id="2022-8-17"><a href="#2022-8-17" class="headerlink" title="2022.8.17"></a>2022.8.17</h1><ul><li>修复了Gitalk评论系统  <span class="tag is-success is-normal">✓ Closed</span>  </li></ul><h1 id="2022-8-13"><a href="#2022-8-13" class="headerlink" title="2022.8.13"></a>2022.8.13</h1><p>· 添加了碎碎念板块<br>· 添加了主页“最新评论”Widget<br>-修复了使用Github登录Gitalk后出现”<code>Request failed with status code 403</code>“的问题  <span class="tag is-success is-normal">✓ Closed</span>   </p><h1 id="2022-8-12"><a href="#2022-8-12" class="headerlink" title="2022.8.12"></a>2022.8.12</h1><p>· 添加了Gitalk评论服务<br>· 添加了博客留言板块<br>· 添加了“关于”模块内容<br>· 添加了 Github 、知乎 和 Bilibili 的社交网络地址   </p><p>-修复了Fontawesome图标无法正常显示的问题:  <span class="tag is-success is-normal">✓ Closed</span><br>    更换的CDN如下：  </p><pre><code>https://cdn.bootcdn.net/ajax/libs/font-awesome/6.1.2/css/&gt; all.css  </code></pre><p>-修复了点击“关注我”不会重定向的问题  <span class="tag is-success is-normal">✓ Closed</span>   </p><p>-修复了封面图和缩略图无法显示的问题  <span class="tag is-success is-normal">✓ Closed</span>  </p><h1 id="2022-08-11"><a href="#2022-08-11" class="headerlink" title="2022.08.11"></a>2022.08.11</h1><p> <strong>此博客于2022-08-11 17:07:12起正式启用</strong></p><p>-修复了在部分页面上Markdown没有正确渲染的问题  <span class="tag is-success is-normal">✓ Closed</span>   </p><p>-修复了Mathjax在二级菜单错误渲染的问题  <span class="tag is-success is-normal">✓ Closed</span>   </p><p>-修复了Mathjax在加载页面时渲染不稳定的问题  <span class="tag is-success is-normal">✓ Closed</span>   </p><hr>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; 本文为此博客网站更新日志&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="日志" scheme="http://naughtychas.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
    <category term="网站日志" scheme="http://naughtychas.github.io/categories/%E6%97%A5%E5%BF%97/%E7%BD%91%E7%AB%99%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="http://naughtychas.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
</feed>
